%comment 
sort 
Mth1 = struct getExeTask(taskId:Nat) ;
Mth2 = struct getExeTask_return(eId:Nat) ; 
Mth3 = struct delTask(taskId:Nat) ;  
Mth4 = struct delTask_return ;  
Mth5 = struct remTask(taskId:Nat,eid:Nat) ;  
Mth6 = struct remTask_return(result:Bool);
Mth7= struct __sndTask2Exe(eId:Nat,eTypes:List(eType),checkIdle:Bool);
Mth8 = struct  __sndTask2Exe_return(reply:Reply,tid:Nat) ;     
Mth9 = struct    freeSlots(eId:Nat) ;     
Mth10 = struct  freeSlots_return(fs:Nat) ;     
Mth11 = struct  popTask(eTypes:List(eType)) ; 
Mth12 = struct  popTask_return(taskId:Nat,eType:eType) ;
Mth13 = struct addTask(eId:Nat,taskId:Nat) ;    
Mth14 = struct  addTask_return ;
Mth15 = struct  __msgTask2Exe(taskId:Nat,eId:Nat,eType:eType) ;     
Mth16 = struct  __msgTask2Exe_return(result:Reply) ;     
Mth17 = struct  pushTask(eType:eType,taskId:Nat,ahead:Bool) ;     
Mth18 = struct  pushTask_return ;     
Mth19 = struct  cbSendTask(taskId:Nat,taskObj:TaskObject,eId:Nat,eType:eType) ;     
Mth20 = struct  cbSendTask_return(result:Reply);
Mth21 = struct msg(msg:Message,eId:Nat, taskObj:TaskObject) ;
Mth22 = struct  remTaskDisp(taskid:Nat) ; 
Mth23 = struct  remTaskDisp_return(reply:Reply) ; 	% should return reply:Reply
Mth24 = struct  __fillExes(etype:eType,defrozeIfNeeded:Bool) ;	%OK
Mth25 = struct  __fillExes_return ; 
Mth26 = struct  __unfreezeTasks(etype:eType) ;	 
Mth27 = struct  __unfreezeTasks_return ;
Mth28 = struct getIdleExe(etype:eType);
Mth29 = struct  getIdleExe_return(eId:Nat) ; 
Mth30 = struct  __dispatchTask(taskId:Nat,defrozeIfNeeded:Bool) ; 
Mth31 = struct  __dispatchTask_return(reply:Reply) ; 
Mth32 = struct  __remFromFreez(taskid:Nat) ; 
Mth33 = struct  __remFromFreez_return(result:Bool) ; 
Mth34 = struct  __getNxtExe(taskid:Nat) ; 
Mth35 = struct  __getNxtExe_return(reply:Reply,etype:eType) ; 
Mth36 = struct  __freezeTask(taskid:Nat,eType:eType) ; 
Mth37 = struct  __freezeTask_return(result:Bool);
Mth38 = struct getTask(taskid:Nat) ; 
Mth39 = struct  getTask_return(taskObj:TaskObject);
Mth40 = struct cbDispatch(taskid:Nat,taskObj:TaskObject,exedPath:List(eType)) ; 
Mth41 = struct  cbDispatch_return(reply:Reply,etype:eType) ; 
Mth42 = struct  setStatus1(jobState:TaskObject,fullStatus:FullStatus) ; 
Mth43 = struct  setStatus1_return(reply:Reply) ; 
Mth44 = struct  rescheduleJob(jobState:TaskObject) ; 
Mth45 = struct  rescheduleJob_return(reply:Reply);
Mth46 = struct exec_dispatch(jid:Nat,jobState:TaskObject,pathExecuted:List(eType)) ; 
Mth47 = struct  exec_dispatch_return(reply:Reply,nextExe:eType) ; 
Mth48 = struct  msg1(msg:Message,jids:List(Nat)) ;
Mth49 = struct  forgetTask(taskid:Nat) ;	%OK
Mth50 = struct  forgetTask_return ; 
Mth51 = struct  exeTask(jid:Nat,cachedJobState:TaskObject) ; 
Mth52 = struct  exeTask_return(reply:Reply);
Mth53 = struct addTaskDisp(taskid:Nat,taskObj:TaskObject) ; 
Mth54 = struct  addTaskDisp_return(reply:Reply) ; 
Mth55 = struct  __addTaskIfNew(taskid:Nat,taskObj:TaskObject) ; 
Mth56 = struct  __addTaskIfNew_return(result:Bool) ; 
Mth57 = struct  submitJob(jobIDs:List(Nat)) ; 
Mth58 = struct  submitJob_return ;
Mth59 = struct __sendNewJobsToMind(jobIDs:List(Nat)) ; 
Mth60 = struct  __sendNewJobsToMind_return ; 
Mth61 = struct  killJob(jobID:Nat) ;	%OK
Mth62 = struct  killJob_return ; 
Mth63 = struct  resetJobAPI(jobID:Nat) ;	%OK
Mth64 = struct  resetJobAPI_return ;	%OK
Mth65 = struct  taskProcd(eId:Nat,taskId:Nat,taskObj1:TaskObject) ; 
Mth66 = struct  taskProcd_return(reply:Reply) ;
Mth67 = struct __taskReceived(taskId:Nat,eId:Nat) ; 
Mth68 = struct  __taskReceived_return(reply:Reply,eType:eType) ; 
Mth69 = struct  cbTaskProcd(taskId:Nat,taskObj:TaskObject,eType:eType) ; 
Mth70 = struct  cbTaskProcd_return(reply:Reply) ;
Mth71 = struct remExe(eid:Nat) ; 
Mth72 = struct  remExe_return ; 
Mth73 = struct  remExeStates(eid:Nat) ; 
Mth74 = struct  remExeStates_return(tasksInExec:List(Nat)) ; 
Mth75 = struct  cbDisconectExe(eid:Nat) ; 
Mth76 = struct  cbDisconectExe_return;

Mth77 = struct exec_exeDisconnected(trid:Nat) ; 
Mth78 = struct exec_exeDisconnected_return ; 
Mth79 = struct freezeTask(eid:Nat,taskid:Nat,taskObj:TaskObject) ; 
Mth80 = struct freezeTask_return(reply:Reply) ; 
Mth81 = struct conn_connected(trid:Nat,eTypes:List(eType),maxTasks:Nat) ; 
Mth82 = struct conn_connected_return(reply:Reply);
Mth83 = struct addExe(trid:Nat,eTypes:List(eType),maxTasks:Nat) ; 
Mth84 = struct addExe_return ; 
Mth85 = struct  exec_exeConnected(trid:Nat,eTypes:List(eType)) ; 
Mth86 = struct  exec_exeConnected_return(reply:Reply) ; 
Mth87 = struct  addExeState(eid:Nat,eTypes:List(eType),maxTasks:Nat) ; 
Mth88 = struct  addExeState_return ; 
Mth89 = struct  getExesConnected ; 
Mth90 = struct  getExesConnected_return(eTypes:List(eType));
Mth91 = struct getTaskIds ; 
Mth92 = struct getTaskIds_return(knownJids:List(Nat)) ; 
Mth93 = struct  __loadJobs(eTypes:List(eType)) ; 
Mth94 = struct  __loadJobs_return(reply:Reply) ; 
Mth95 = struct  conn_drop(trid:Nat) ; 
Mth96 = struct  conn_drop_return ; 
Mth97 = struct  __doPeriodicStuff ;
Mth98 = struct  __doPeriodicStuff_return;
Mth99 = struct connect(instance:Nat, mind:Mind) ;
Mth100 = struct connect_return ;
Mth101 = struct  __taskInQueue_get(taskid:Nat) ;
Mth102 = struct  __taskInQueue_get_return(etype:eType) ;
Mth103 = struct  __taskInQueue_del(taskid:Nat) ; 
Mth104 = struct  __taskInQueue_del_return ;
Mth105 = struct  __queues_index(etype:eType,taskid:Nat) ;
Mth106 = struct  __queues_index_return(pos:Int) ;
Mth107 = struct  __queues_delAtPos(etype:eType,pos:Nat) ;
Mth108 = struct  __queues_delAtPos_return;
Mth109 = struct __queues_pop(etype:eType,pos:Nat) ;
Mth110 = struct __queues_pop_return(taskid:Int) ;
Mth111 = struct  __taskInQueue_keys ;
Mth112 = struct  __taskInQueue_keys_return(taskids:List(Nat)) ;
Mth113 = struct  __queues_keys ;
Mth114 = struct  __queues_keys_return(etypes:List(eType)) ;
Mth115 = struct  __queues_addetype(etype:eType) ;
Mth116 = struct  __queues_addetype_return ;
Mth117 = struct  __queues_insert(etype:eType,taskid:Nat) ;
Mth118 = struct  __queues_insert_return ;
Mth119 = struct  __queues_append(etype:eType,taskid:Nat) ;
Mth120 = struct  __queues_append_return ;
Mth121 = struct __taskInQueue_set(taskid:Nat,etype:eType) ;
Mth122 = struct  __taskInQueue_set_return ;
Mth123 = struct  __taskInExec_get(taskid:Nat) ;
Mth124 = struct  __taskInExec_get_return(eid:Int) ;
Mth125 = struct  __execTasks_remtaskid(eid:Nat,taskid:Nat) ;
Mth126 = struct  __execTasks_remtaskid_return ;
Mth127 = struct  __taskInExec_pop(taskid:Nat) ;
Mth128 = struct  __taskInExec_pop_return ;
Mth129 = struct __maxTasks_get(eid:Nat) ;
Mth130 = struct  __maxTasks_get_return(maxtasks:Nat) ;
Mth131 = struct  __execTasks_taskids(eid:Nat) ;
Mth132 = struct  __execTasks_taskids_return(taskids:List(Nat)) ;
Mth133 = struct  __taskInExec_set(taskid:Nat,eid:Nat) ;
Mth134 = struct  __taskInExec_set_return ;
Mth135 = struct  __execTasks_addtaskid(eid:Nat,taskid:Nat) ;
Mth136 = struct  __execTasks_addtaskid_return;
Mth137 = struct __typeToId_eids(etype:eType) ;
Mth138 = struct  __typeToId_eids_return(eids:List(Nat)) ;
Mth139 = struct  __typeToId_keys ;
Mth140 = struct  __tasks_pop_return ;
Mth141 = struct  __typeToId_keys_return(etypes:List(eType)) ;
Mth142 = struct  __typeToId_rem(etype:eType,eid:Nat) ;
Mth143 = struct  __typeToId_rem_return ;
Mth144 = struct  __execTasks_pop(eid:Nat) ;
Mth145 = struct  __execTasks_pop_return ;
Mth146 = struct  __maxTasks_pop(eid:Nat) ;
Mth147 = struct  __maxTasks_pop_return;
Mth148 = struct __maxTasks_add(eid:Nat,maxTasks:Nat) ;
Mth149 = struct  __maxTasks_add_return ;
Mth150 = struct  __execTasks_keys ;
Mth151 = struct  __execTasks_keys_return(eids:List(Nat)) ;
Mth152 = struct  __execTasks_addeid(eid:Nat) ;
Mth153 = struct  __execTasks_addeid_return;
Mth154 = struct __typeToId_addeType(etype:eType) ;
Mth155 = struct  __typeToId_addeType_return ;
Mth156 = struct  __typeToId_addeid(etype:eType,eid:Nat) ;
Mth157 = struct  __typeToId_addeid_return;
Mth158 =  struct __tasks_get(taskid:Nat) ; 
Mth159 = struct  __tasks_get_return(taskObj:TaskObject) ;
Mth160 = struct  __taskFreez_check(taskid:Nat) ;
Mth161 = struct  __taskFreez_check_return(isIn:Bool) ;
Mth162 = struct  __taskFreez_append(taskid:Nat) ;
Mth163 = struct  __taskFreez_append_return ;
Mth164 = struct __taskFreez_index(taskid:Nat) ;
Mth165 = struct  __taskFreez_index_return(ipos:Int) ;
Mth166 = struct  __taskFreez_pop(ipos:Nat) ;
Mth167 = struct  __taskFreez_pop_return ;
Mth168 = struct  __tasks_keys ;
Mth169 = struct  __tasks_keys_return(taskids:List(Nat)) ;
Mth170 = struct  __execTypes_get_eTypes ;
Mth171 = struct  __execTypes_get_eTypes_return(etypes:List(eType)) ;
Mth172 = struct  __tasks_add(taskObj:TaskObject) ;
Mth173 = struct  __tasks_add_return ;
Mth174 = struct __idMap_keys ;
Mth175 = struct  __idMap_keys_return(eids:List(Nat)) ;
Mth176 = struct  __idMap_set(eid:Nat,etypes:List(eType)) ;
Mth177 = struct  __idMap_set_return ;
Mth178 = struct  __execTypes_add(etype:eType) ;
Mth179 = struct  __execTypes_add_return ;
Mth180 = struct  __execTypes_inc(etype:eType) ;
Mth181 = struct  __execTypes_inc_return;
Mth182 = struct __idMap_pop(eid:Nat) ;
Mth183 = struct  __idMap_pop_return(etypes:List(eType)) ;
Mth184 = struct  __execTypes_dec(etype:eType) ;
Mth185 = struct  __execTypes_dec_return ;
Mth186 = struct  __idMap_get(eid:Nat) ;
Mth187 = struct  __idMap_get_return(etypes:List(eType)) ;
Mth188 = struct __taskFreez_len ;
Mth189 = struct  __taskFreez_len_return(len:Nat) ;
Mth190 = struct  __taskFreez_get(iP:Nat) ; 
Mth191 = struct  __taskFreez_get_return(taskid:Int) ;
Mth192 = struct  __execTypes_getExesConnected ;
Mth193 = struct  __execTypes_getExesConnected_return(etypes:List(eType)) ;
Mth194 = struct  __tasks_update(taskid:Nat,taskObj:TaskObject) ;
Mth195 = struct  __tasks_update_return ;
Mth196 = struct  __tasks_pop(taskid:Nat) ;


sort ClassType = struct ExeDisp |
			ExeState |
			ExeQueues |
			OptimizationMindHandler |
			JobManagerHandler |
			MindCluster |
			MindCallbacks;

sort ClassObject = struct __eDispatch |
			  __eDispatch1 |
			  __cbHolder |
			  __queues |
			  __states |
			  MindHandler |
			  JobManager |
			  mindCluster;
			
sort Reply = struct OK | ERROR ;

sort Message = struct ProcessTask | 
		      TaskDone |
		      TaskError | 
		      TaskFreeze |
		      ExeError |
		      OptimizeJobs;

sort Mind = struct OptimizationMind | OtherMind;

sort MinorStatus = struct NewMinor | JobPath | JobSanity | InputData | JobScheduling | PilotAgentSubmission | FailedMinor | JobRescheduled | MarkedForTermination |
   JobAccepted | MaxReschedulings | None;

sort eType = MinorStatus;


sort Status = struct New | Checking | Waiting | Failed | Received | Killed;

sort FullStatus = struct statusBundle(status:Status,minorStatus:MinorStatus);

sort TypeAttr = struct Attr1 | Attr2;
sort TaskObject = struct taskObj(taskID:Nat,optimizationChain:List(eType),eType:eType,status:FullStatus) | NullObj;
% ==================DATA 

sort __execTypes1 = struct __execTypes1(etype:eType,counter:Int);


%-----------------
sort __execTypes = List(__execTypes1);

map __execTypes_get:__execTypes # eType -> Int;
    __execTypes_init:List(eType) -> __execTypes;
    __execTypes_inc:__execTypes # eType -> __execTypes;
    __execTypes_dec:__execTypes # eType -> __execTypes;
    __execTypes_add:__execTypes # eType -> __execTypes;
    __execTypes_get_eTypes:__execTypes -> List(eType);
    __execTypes_rem:__execTypes # eType -> __execTypes;
    __execTypes_getExesConnected: __execTypes -> List(eType);

var a,list_exectypes:__execTypes;
    et:eType;
    n:Nat;
    list_et,let:List(eType);
    ext:__execTypes1;

eqn 
    __execTypes_get([],et) = -1; 
    etype(ext)==et -> __execTypes_get(ext|>list_exectypes,et) = counter(ext);
    !(etype(ext)==et) -> __execTypes_get(ext|>list_exectypes,et) = __execTypes_get(list_exectypes,et);

    __execTypes_init([]) = [];
    __execTypes_init(et|>let) = __execTypes1(et,0)|>__execTypes_init(let);

    __execTypes_inc([],et) = [];
    etype(ext)==et -> __execTypes_inc(ext|>list_exectypes,et) = __execTypes1(etype(ext),succ(counter(ext)))|>__execTypes_inc(list_exectypes,et);
    !(etype(ext)==et) -> __execTypes_inc(ext|>list_exectypes,et) = ext|>__execTypes_inc(list_exectypes,et);

    __execTypes_dec([],et) = [];
    etype(ext)==et -> __execTypes_dec(ext|>list_exectypes,et) = __execTypes1(etype(ext),pred(counter(ext)))|>__execTypes_dec(list_exectypes,et);
    !(etype(ext)==et) -> __execTypes_dec(ext|>list_exectypes,et) = ext|>__execTypes_dec(list_exectypes,et);

    __execTypes_add(a,et) = a<|__execTypes1(et,0);

    __execTypes_get_eTypes([]) = [];
    __execTypes_get_eTypes(ext|>list_exectypes) = etype(ext)|> __execTypes_get_eTypes(list_exectypes);

    __execTypes_getExesConnected([]) = [];
    (etype(ext)!=JobPath && counter(ext)>0) -> __execTypes_getExesConnected(ext|>list_exectypes) = etype(ext)|>__execTypes_getExesConnected(list_exectypes);
    (etype(ext)==JobPath) -> __execTypes_getExesConnected(ext|>list_exectypes) = __execTypes_getExesConnected(list_exectypes);
    (counter(ext)<1) -> __execTypes_getExesConnected(ext|>list_exectypes) = __execTypes_getExesConnected(list_exectypes);
    

    __execTypes_rem([],et) = [];
    etype(ext)==et -> __execTypes_rem(ext|>list_exectypes,et) = __execTypes_rem(list_exectypes,et);
    !(etype(ext)==et) -> __execTypes_rem(ext|>list_exectypes,et) = ext|>__execTypes_rem(list_exectypes,et);

%-----------------

sort __tasks1 = struct __tasks1(taskid:Nat,taskobj:TaskObject);
sort __tasks = List(__tasks1);


map __tasks_get:__tasks # Nat -> TaskObject;
    __tasks_add:__tasks # TaskObject -> __tasks;
    __tasks_keys:__tasks -> List(Nat);
    __tasks_update:__tasks # Nat # TaskObject -> __tasks;
    __tasks_pop: __tasks # Nat -> __tasks;

var a,list_tasks:__tasks;
    n,taskid,tid:Nat;
    el_task:__tasks1;
    tob:TaskObject;
eqn 
    __tasks_get([],tid) = NullObj;
    taskid(el_task)==tid -> __tasks_get(el_task|>list_tasks,tid) = taskobj(el_task);
    !(taskid(el_task)==tid) -> __tasks_get(el_task|>list_tasks,tid) = __tasks_get(list_tasks,tid);

    __tasks_add(a,tob) = a<|__tasks1(taskID(tob),tob);
    
    __tasks_keys([]) = [];
    __tasks_keys(el_task|>list_tasks) = taskid(el_task) |> __tasks_keys(list_tasks);

    __tasks_update([],tid,tob) = [];
    taskid(el_task)==tid -> __tasks_update(el_task|>list_tasks,tid,tob) = __tasks1(tid,tob)|>__tasks_update(list_tasks,tid,tob);
    !(taskid(el_task)==tid) -> __tasks_update(el_task|>list_tasks,tid,tob) = el_task|>__tasks_update(list_tasks,tid,tob);

    __tasks_pop([],tid) = [];
    taskid(el_task)==tid -> __tasks_pop(el_task|>list_tasks,tid) = __tasks_pop(list_tasks,tid);
    !(taskid(el_task)==tid) -> __tasks_pop(el_task|>list_tasks,tid) = el_task|>__tasks_pop(list_tasks,tid);

%-----------------
sort __taskFreez = List(Nat);
map __taskFreez_append:__taskFreez # Nat -> __taskFreez;
    __taskFreez_index:__taskFreez # Nat -> Int;
    __taskFreez_index':__taskFreez # Nat # Nat -> Int;
    __taskFreez_pop:__taskFreez # Nat -> __taskFreez;
    __taskFreez_pop':__taskFreez # Nat # Nat -> __taskFreez;
    __taskFreez_get:__taskFreez # Nat -> Int;
    __taskFreez_get':__taskFreez # Nat # Nat -> Int;
var tf:__taskFreez;
    tid:Nat;
    el,n:Nat;

eqn
    __taskFreez_append(tf,tid) = tf<|tid;
% __taskFreez_index'([1], 2, 0)
% __taskFreez_index'([2], 3, 1)
    __taskFreez_index(tf,tid) = __taskFreez_index'(tf,tid,0);
    __taskFreez_index'([],tid,n) = -1;
    head(tf)==tid -> __taskFreez_index'(tf,tid,n) = n;
    head(tf)!=tid -> __taskFreez_index'(tf,tid,n) = __taskFreez_index'(tail(tf),tid,n+1);

    __taskFreez_pop(tf,tid) = __taskFreez_pop'(tf,tid,0);   
    __taskFreez_pop'([],tid,n) = [];
    n==tid -> __taskFreez_pop'(el|>tf,tid,n) = __taskFreez_pop'(tf,tid,n+1);
    !(n==tid) -> __taskFreez_pop'(el|>tf,tid,n)  = el |>__taskFreez_pop'(tf,tid,n+1);

    __taskFreez_get(tf,tid) = __taskFreez_get'(tf,tid,0);   
    __taskFreez_get'([],tid,n) = -1;
    n==tid -> __taskFreez_get'(el|>tf,tid,n) = Nat2Int(el);
    !(n==tid) -> __taskFreez_get'(el|>tf,tid,n)  = __taskFreez_get'(tf,tid,n+1);


%-----------------
%-----------------

sort __idMap1 = struct __idMap1(eid:Nat,etypes:List(eType));

sort __idMap = List(__idMap1);

map
    __idMap_keys:__idMap -> List(Nat);
    __idMap_set: __idMap # Nat # List(eType) -> __idMap;
    __idMap_pop: __idMap # Nat -> List(eType);
    __idMap_rem: __idMap # Nat -> __idMap;
    __idMap_get: __idMap # Nat -> List(eType);


var
    idmap:__idMap;
    el_idmap:__idMap1;
    etypes:List(eType);
    eid,n:Nat;

eqn
    __idMap_keys([]) = [];
    __idMap_keys(el_idmap|>idmap) = eid(el_idmap)|>__idMap_keys(idmap);
    
    __idMap_set(idmap,eid,etypes) = __idMap1(eid,etypes)|>idmap;

    __idMap_pop([],eid) = [];
    (eid(el_idmap)==eid) -> __idMap_pop(el_idmap|>idmap,eid) = etypes(el_idmap);
    !(eid(el_idmap)==eid) -> __idMap_pop(el_idmap|>idmap,eid) = __idMap_pop(idmap,eid);

    __idMap_rem([],eid) = [];
    (eid(el_idmap)==eid) -> __idMap_rem(el_idmap|>idmap,eid) = __idMap_rem(idmap,eid);
    !(eid(el_idmap)==eid) -> __idMap_rem(el_idmap|>idmap,eid) = el_idmap|>__idMap_rem(idmap,eid);

    __idMap_get([],eid) = [];
    eid(el_idmap)==eid -> __idMap_get(el_idmap|>idmap,eid) = etypes(el_idmap);
    !(eid(el_idmap)==eid) -> __idMap_get(el_idmap|>idmap,eid) = __idMap_get(idmap,eid);

%-----------------

sort __typeToId1 = struct __typeToId1(etype:eType,eids:List(Nat));
sort __typeToId = List(__typeToId1);

map __typeToId_addeType:__typeToId # eType -> __typeToId;
    __typeToId_addeid: __typeToId # eType # Nat -> __typeToId;
    __typeToId_rem:__typeToId # eType # Nat -> __typeToId;
    __typeToId_remHelper:List(Nat) # Nat -> List(Nat);
    __typeToId_keys: __typeToId -> List(eType);
    __typeToId_eids: __typeToId # eType -> List(Nat);

var
    ttid:__typeToId;
    ttid_el:__typeToId1;
    etype:eType;
    listTypes:List(eType);
    n,eid,el:Nat;
    list:List(Nat);

eqn
    __typeToId_addeType(ttid,etype) = __typeToId1(etype,[])|>ttid;

    __typeToId_addeid([],etype,eid) = [];
    etype==etype(ttid_el) -> __typeToId_addeid(ttid_el|>ttid,etype,eid) = __typeToId1(etype,eid|>eids(ttid_el))|> __typeToId_addeid(ttid,etype,eid);
    !(etype==etype(ttid_el)) -> __typeToId_addeid(ttid_el|>ttid,etype,eid) = ttid_el|>__typeToId_addeid(ttid,etype,eid);

    __typeToId_remHelper([],eid) = [];
    el==eid -> __typeToId_remHelper(el|>list,eid) = __typeToId_remHelper(list,eid);
    !(el==eid) -> __typeToId_remHelper(el|>list,eid) = el|>__typeToId_remHelper(list,eid);

    __typeToId_rem([],etype,eid) = [];
    etype==etype(ttid_el) -> __typeToId_rem(ttid_el|>ttid,etype,eid) = __typeToId1(etype,__typeToId_remHelper(eids(ttid_el),eid))|>__typeToId_rem(ttid,etype,eid);
    !(etype==etype(ttid_el)) -> __typeToId_rem(ttid_el|>ttid,etype,eid) = ttid_el|>__typeToId_rem(ttid,etype,eid);

    __typeToId_keys([]) = [];
    __typeToId_keys(ttid_el|>ttid) = etype(ttid_el)|>__typeToId_keys(ttid);

    __typeToId_eids([],etype) = [];
    etype==etype(ttid_el) -> __typeToId_eids(ttid_el|>ttid,etype) = eids(ttid_el);
    !(etype==etype(ttid_el)) -> __typeToId_eids(ttid_el|>ttid,etype) = __typeToId_eids(ttid,etype);

%-----------------

sort __maxTasks1 = struct __maxTasks1(eid:Nat,maxTasks:Nat);
sort __maxTasks = List(__maxTasks1);

map __maxTasks_add:__maxTasks # Nat # Nat -> __maxTasks;
    __maxTasks_pop:__maxTasks # Nat -> __maxTasks;
    __maxTasks_get:__maxTasks # Nat -> Nat;

var
  maxTasks:__maxTasks;
  el:__maxTasks1;
  n:Nat;
  eid:Nat;
eqn
    __maxTasks_add(maxTasks,eid,n) = __maxTasks1(eid,n)|>maxTasks;

    __maxTasks_pop([],eid) = [];
    (eid(el)==eid) -> __maxTasks_pop(el|>maxTasks,eid) = __maxTasks_pop(maxTasks,eid);
    !(eid(el)==eid) -> __maxTasks_pop(el|>maxTasks,eid) = el|>__maxTasks_pop(maxTasks,eid);

    __maxTasks_get([],eid) = 0;
    eid(el)==eid -> __maxTasks_get(el|>maxTasks,eid) = maxTasks(el);
    !(eid(el)==eid) -> __maxTasks_get(el|>maxTasks,eid) = __maxTasks_get(maxTasks,eid);
    
%-----------------

sort __execTasks1 = struct __execTasks1(eid:Nat,taskids:List(Nat));
sort __execTasks = List(__execTasks1);

map __execTasks_addeid:__execTasks # Nat -> __execTasks;
    __execTasks_keys:__execTasks -> List(Nat);
    __execTasks_taskids:__execTasks # Nat -> List(Nat);
    __execTasks_pop: __execTasks # Nat -> __execTasks;
    __execTasks_addtaskid:__execTasks # Nat # Nat -> __execTasks;
    __execTasks_remtaskid: __execTasks # Nat # Nat -> __execTasks;
    __execTasks_remHelper:List(Nat) # Nat -> List(Nat);

var
  execTasks:__execTasks;
  et:__execTasks1;
  n,eid,taskid,el:Nat;
  list:List(Nat);
eqn
    __execTasks_addeid(execTasks,eid) = __execTasks1(eid,[])|>execTasks;

    __execTasks_keys([]) = [];
    __execTasks_keys(et|>execTasks) = eid(et)|>__execTasks_keys(execTasks);

    __execTasks_taskids([],eid) = [];
    eid(et)==eid ->  __execTasks_taskids(et|>execTasks,eid) = taskids(et);
    !(eid(et)==eid) -> __execTasks_taskids(et|>execTasks,eid) = __execTasks_taskids(execTasks,eid);

    __execTasks_pop([],eid) = [];
    eid(et)==eid -> __execTasks_pop(et|>execTasks,eid) = __execTasks_pop(execTasks,eid);
    !(eid(et)==eid) -> __execTasks_pop(et|>execTasks,eid) = et|>__execTasks_pop(execTasks,eid);

    __execTasks_addtaskid([],eid,taskid) = [];
    eid(et)==eid -> __execTasks_addtaskid(et|>execTasks,eid,taskid) = __execTasks1(eid(et),taskids(et)<|taskid)|>__execTasks_addtaskid(execTasks,eid,taskid);
    !(eid(et)==eid) -> __execTasks_addtaskid(et|>execTasks,eid,taskid) = et|>__execTasks_addtaskid(execTasks,eid,taskid);
  
    __execTasks_remHelper([],taskid) = [];
    el==taskid -> __execTasks_remHelper(el|>list,taskid) = __execTasks_remHelper(list,taskid);
    !(el==taskid) -> __execTasks_remHelper(el|>list,taskid) = el|>__execTasks_remHelper(list,taskid);

    __execTasks_remtaskid([],eid,taskid) = [];
    eid(et)==eid -> __execTasks_remtaskid(et|>execTasks,eid,taskid) = __execTasks1(eid(et),__execTasks_remHelper(taskids(et),taskid))|>__execTasks_remtaskid(execTasks,eid,taskid);
    !(eid(et)==eid) -> __execTasks_remtaskid(et|>execTasks,eid,taskid) = et|>__execTasks_remtaskid(execTasks,eid,taskid);

%-----------------

sort __taskInExec1 = struct __taskInExec1(taskid:Nat,eid:Nat);
sort __taskInExec = List(__taskInExec1);

map __taskInExec_get:__taskInExec # Nat -> Int;
    __taskInExec_set:__taskInExec # Nat # Nat -> __taskInExec; 
    __taskInExec_pop:__taskInExec # Nat -> __taskInExec;
    __taskInExec_keys:__taskInExec -> List(Nat);
    
var
  tie,list:__taskInExec;
  el:__taskInExec1;
  n,eid,taskid1:Nat;
  
eqn __taskInExec_get([],taskid1) = -1; 
    taskid(el)==taskid1 -> __taskInExec_get(el|>list,taskid1) = Nat2Int(eid(el));
    !(taskid(el)==taskid1) -> __taskInExec_get(el|>list,taskid1) = __taskInExec_get(list,taskid1);
    
    __taskInExec_set(tie,taskid1,eid) = __taskInExec_pop(tie,taskid1)<|__taskInExec1(taskid1,eid);
    
    __taskInExec_pop([],taskid1) = [];
    taskid(el)==taskid1 -> __taskInExec_pop(el|>list,taskid1) = __taskInExec_pop(list,taskid1);
    !(taskid(el)==taskid1) -> __taskInExec_pop(el|>list,taskid1) = el|>__taskInExec_pop(list,taskid1);
    
    __taskInExec_keys([]) = [];
    __taskInExec_keys(el|>list) = taskid(el)|>__taskInExec_keys(list);
    
%-----------------

sort __queues1 = struct __queues1(etype:eType,taskids:List(Nat));
sort __queues = List(__queues1);

map 
    __queues_keys:__queues -> List(eType);
    __queues_taskids:__queues # eType -> List(Nat);
    __queues_insert:__queues # eType # Nat -> __queues;
    __queues_append:__queues # eType # Nat -> __queues;
    __queues_addetype:__queues # eType -> __queues;
    __queues_index:__queues # eType # Nat -> Int; 
    __queues_pop:__queues # eType # Nat -> Int; 
    __queues_delAtPos:__queues # eType # Nat -> __queues;
    __queues_helperPos:List(Nat) # Nat -> Int;
    __queues_helperPos':List(Nat) # Nat # Nat -> Int;
    __queues_delAtPosHelper:List(Nat) # Nat -> List(Nat);
    __queues_delAtPosHelper':List(Nat) # Nat # Nat -> List(Nat);    
var
    list:__queues;
    el:__queues1;
    taskid,n,pos:Nat;
    etype:eType;
    lst:List(Nat);
    lst_el,lst_val:Nat;
eqn
    __queues_keys([]) = [];
    __queues_keys(el|>list) = etype(el)|>__queues_keys(list);
    
    __queues_taskids([],etype) = [];
    etype(el)==etype -> __queues_taskids(el|>list,etype) = taskids(el);
    !(etype(el)==etype) -> __queues_taskids(el|>list,etype) = __queues_taskids(list,etype);
    
    __queues_insert([],etype,taskid) = [];
    etype(el)==etype -> __queues_insert(el|>list,etype,taskid) = __queues1(etype,taskid|>taskids(el))|>__queues_insert(list,etype,taskid);
    !(etype(el)==etype) -> __queues_insert(el|>list,etype,taskid) = el|>__queues_insert(list,etype,taskid);
    
    __queues_append([],etype,taskid) = [];
    etype(el)==etype -> __queues_append(el|>list,etype,taskid) = __queues1(etype,taskids(el)<|taskid)|>__queues_append(list,etype,taskid);
    !(etype(el)==etype) -> __queues_append(el|>list,etype,taskid) = el|>__queues_append(list,etype,taskid);    
    
    __queues_addetype(list,etype) = list<|__queues1(etype,[]) ;
    
    __queues_helperPos(lst,lst_val) = __queues_helperPos'(lst,lst_val,0);
    __queues_helperPos'([],lst_val,n) = -1;
    lst_el==lst_val -> __queues_helperPos'(lst_el|>lst,lst_val,n) = n;
    !(lst_el==lst_val) -> __queues_helperPos'(lst_el|>lst,lst_val,n) = __queues_helperPos'(lst,lst_val,n+1);
    
    
    __queues_index([],etype,taskid) = -1;
    etype(el)==etype -> __queues_index(el|>list,etype,taskid) = __queues_helperPos(taskids(el),taskid);
    !(etype(el)==etype) -> __queues_index(el|>list,etype,taskid) = __queues_index(list,etype,taskid);
    
    __queues_pop([],etype,pos) = -1;
    etype(el)==etype && taskids(el)!=[] -> __queues_pop(el|>list,etype,pos) = Nat2Int(head(taskids(el)));
    etype(el)==etype && taskids(el)==[] -> __queues_pop(el|>list,etype,pos) = -1;
    !(etype(el)==etype) -> __queues_pop(el|>list,etype,pos) = __queues_pop(list,etype,pos);
    
    __queues_delAtPosHelper(lst,pos) = __queues_delAtPosHelper'(lst,pos,0);
    __queues_delAtPosHelper'([],pos,n) = [];
    n==pos -> __queues_delAtPosHelper'(lst_el|>lst,pos,n) = __queues_delAtPosHelper'(lst,pos,n+1);
    !(n==pos) ->__queues_delAtPosHelper'(lst_el|>lst,pos,n) = lst_el|>__queues_delAtPosHelper'(lst,pos,n+1);
    
    __queues_delAtPos([],etype,pos) = [];
    etype(el)==etype -> __queues_delAtPos(el|>list,etype,pos) = __queues1(etype(el),__queues_delAtPosHelper(taskids(el),pos))|> __queues_delAtPos(list,etype,pos);
    !(etype(el)==etype) -> __queues_delAtPos(el|>list,etype,pos) = el|>__queues_delAtPos(list,etype,pos);
        
%-----------------

sort __taskInQueue1 = struct __taskInQueue1(taskid:Nat,etype:eType);
sort __taskInQueue = List(__taskInQueue1);

map
    __taskInQueue_keys:__taskInQueue -> List(Nat);
    __taskInQueue_get:__taskInQueue # Nat -> eType;
    __taskInQueue_set:__taskInQueue # Nat # eType -> __taskInQueue;
    __taskInQueue_del:__taskInQueue # Nat -> __taskInQueue;
var
    tiq:__taskInQueue;
    el_tiq:__taskInQueue1;
    etype:eType;
    taskid,n:Nat;
 
eqn
    __taskInQueue_keys([]) = [];
    __taskInQueue_keys(el_tiq|>tiq) = taskid(el_tiq)|>__taskInQueue_keys(tiq);

    __taskInQueue_get([],taskid) = None;
    taskid(el_tiq)==taskid -> __taskInQueue_get(el_tiq|>tiq,taskid) = etype(el_tiq);
    !(taskid(el_tiq)==taskid) -> __taskInQueue_get(el_tiq|>tiq,taskid) = __taskInQueue_get(tiq,taskid);
    
    __taskInQueue_set(tiq,taskid,etype) = __taskInQueue1(taskid,etype)|> __taskInQueue_del(tiq,taskid);
    
    __taskInQueue_del([],taskid) = [];
    taskid(el_tiq)==taskid -> __taskInQueue_del(el_tiq|>tiq,taskid) = __taskInQueue_del(tiq,taskid);
    !(taskid(el_tiq)==taskid) -> __taskInQueue_del(el_tiq|>tiq,taskid) = el_tiq|>__taskInQueue_del(tiq,taskid);

% %-----------------



map indexOf: List(eType) # eType -> Int;
    indexOf': List(eType) # eType # Nat -> Int;

var list:List(eType);
    etype:eType;
    n:Nat;

eqn
    indexOf(list,etype) = indexOf'(list,etype,0);
    indexOf'([],etype,n) = -1;
    list.n==etype -> indexOf'(list,etype, n) = n;
    list.n!=etype -> indexOf'(list,etype,n) = indexOf'(list,etype,n+1);

%-----------------
% memory processes
proc ExeQueues_mem(id:Nat,queues:__queues,taskInQueue:__taskInQueue) =
  sum taskid:Nat,obj:ClassObject.mth_var_begin(id,ExeQueues,obj,__taskInQueue_get(taskid)).
  mth_var_end(id,ExeQueues,obj,__taskInQueue_get_return(__taskInQueue_get(taskInQueue,taskid)))
    .ExeQueues_mem(id,queues,taskInQueue)
   +
  sum taskid:Nat,obj:ClassObject.mth_var_begin(id,ExeQueues,obj,__taskInQueue_del(taskid)).
    mth_var_end(id,ExeQueues,obj,__taskInQueue_del_return)
    .ExeQueues_mem(id,queues,__taskInQueue_del(taskInQueue,taskid))
   +
  sum etype:eType,taskid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeQueues,obj,__queues_index(etype,taskid)).
  mth_var_end(id,ExeQueues,obj,__queues_index_return(__queues_index(queues,etype,taskid)))
      .ExeQueues_mem(id,queues,taskInQueue)
   +
  sum etype:eType,pos:Nat,obj:ClassObject.mth_var_begin(id,ExeQueues,obj,__queues_delAtPos(etype,pos)).
  mth_var_end(id,ExeQueues,obj,__queues_delAtPos_return)
      .ExeQueues_mem(id,__queues_delAtPos(queues,etype,pos),taskInQueue)
   +
  sum etype:eType,pos:Nat,obj:ClassObject.mth_var_begin(id,ExeQueues,obj,__queues_pop(etype,pos)).
    (__queues_pop(queues,etype,0)!=-1)
     ->  mth_var_end(id,ExeQueues,obj,__queues_pop_return(__queues_pop(queues,etype,0)))
     .ExeQueues_mem(id,__queues_delAtPos(queues,etype,pos),taskInQueue)
    <> 
    mth_var_end(id,ExeQueues,obj,__queues_pop_return(__queues_pop(queues,etype,0)))
    .ExeQueues_mem(id,queues,taskInQueue)
   +    
  sum obj:ClassObject.
  mth_var_begin(id,ExeQueues,obj,__taskInQueue_keys).
  mth_var_end(id,ExeQueues,obj,__taskInQueue_keys_return(__taskInQueue_keys(taskInQueue)))
      .ExeQueues_mem(id,queues,taskInQueue)
   +
  sum obj:ClassObject.
  mth_var_begin(id,ExeQueues,obj,__queues_keys).
  mth_var_end(id,ExeQueues,obj,__queues_keys_return(__queues_keys(queues)))
      .ExeQueues_mem(id,queues,taskInQueue)
   +
  sum etype:eType,obj:ClassObject.
    mth_var_begin(id,ExeQueues,obj,__queues_addetype(etype)).
    mth_var_end(id,ExeQueues,obj,__queues_addetype_return)
      .ExeQueues_mem(id,__queues_addetype(queues,etype),taskInQueue)
   +
  sum etype:eType,taskid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeQueues,obj,__queues_insert(etype,taskid)).
  mth_var_end(id,ExeQueues,obj,__queues_insert_return)
      .ExeQueues_mem(id,__queues_insert(queues,etype,taskid),taskInQueue)
   +
  sum etype:eType,taskid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeQueues,obj,__queues_append(etype,taskid)).
  mth_var_end(id,ExeQueues,obj,__queues_append_return)
      .ExeQueues_mem(id,__queues_append(queues,etype,taskid),taskInQueue)
   +
  sum taskid:Nat,etype:eType,obj:ClassObject.
  mth_var_begin(id,ExeQueues,obj,__taskInQueue_set(taskid,etype)).
  mth_var_end(id,ExeQueues,obj,__taskInQueue_set_return)
      .ExeQueues_mem(id,queues,__taskInQueue_set(taskInQueue,taskid,etype))
;

%-----------
proc ExeState_mem(id:Nat,typeToId:__typeToId,maxTasks:__maxTasks,execTasks:__execTasks,taskInExec:__taskInExec) =
  sum taskid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__taskInExec_get(taskid)).
  mth_var_end(id,ExeState,obj,__taskInExec_get_return(__taskInExec_get(taskInExec,taskid)))
    .ExeState_mem(id,typeToId,maxTasks,execTasks,taskInExec)
    +
  sum eId:Nat,taskid:Nat,obj:ClassObject.
    mth_var_begin(id,ExeState,obj,__execTasks_remtaskid(eId,taskid)).
    mth_var_end(id,ExeState,obj,__execTasks_remtaskid_return)
    .ExeState_mem(id,typeToId,maxTasks,__execTasks_remtaskid(execTasks,eId,taskid),taskInExec)
    +
  sum taskid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__taskInExec_pop(taskid)).
  mth_var_end(id,ExeState,obj,__taskInExec_pop_return)
    .ExeState_mem(id,typeToId,maxTasks,execTasks,__taskInExec_pop(taskInExec,taskid))
    +
  sum eid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__maxTasks_get(eid)).
  mth_var_end(id,ExeState,obj,__maxTasks_get_return(__maxTasks_get(maxTasks,eid)))
    .ExeState_mem(id,typeToId,maxTasks,execTasks,taskInExec)
    +
  sum eid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__execTasks_taskids(eid)).
  mth_var_end(id,ExeState,obj,__execTasks_taskids_return(__execTasks_taskids(execTasks,eid)))
    .ExeState_mem(id,typeToId,maxTasks,execTasks,taskInExec)
    +
  sum taskid:Nat,eid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__taskInExec_set(taskid,eid)).
  mth_var_end(id,ExeState,obj,__taskInExec_set_return)
    .ExeState_mem(id,typeToId,maxTasks,execTasks,__taskInExec_set(taskInExec,taskid,eid))
    +
  sum eid:Nat,taskid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__execTasks_addtaskid(eid,taskid)).
  mth_var_end(id,ExeState,obj,__execTasks_addtaskid_return)
    .ExeState_mem(id,typeToId,maxTasks,__execTasks_addtaskid(execTasks,eid,taskid),taskInExec)
    +
  sum etype:eType,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__typeToId_eids(etype)).
  mth_var_end(id,ExeState,obj,__typeToId_eids_return(__typeToId_eids(typeToId,etype)))
    .ExeState_mem(id,typeToId,maxTasks,execTasks,taskInExec)
    +
  sum obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__typeToId_keys).
  mth_var_end(id,ExeState,obj,__typeToId_keys_return(__typeToId_keys(typeToId)))
    .ExeState_mem(id,typeToId,maxTasks,execTasks,taskInExec)
    +
  sum etype:eType,eid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__typeToId_rem(etype,eid)).
  mth_var_end(id,ExeState,obj,__typeToId_rem_return)
    .ExeState_mem(id,__typeToId_rem(typeToId,etype,eid),maxTasks,execTasks,taskInExec)
    +
  sum eid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__execTasks_pop(eid)).
  mth_var_end(id,ExeState,obj,__execTasks_pop_return)
    .ExeState_mem(id,typeToId,maxTasks,__execTasks_pop(execTasks,eid),taskInExec)
    +
  sum eid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__maxTasks_pop(eid)).
  mth_var_end(id,ExeState,obj,__maxTasks_pop_return)
    .ExeState_mem(id,typeToId,__maxTasks_pop(maxTasks,eid),execTasks,taskInExec)
    +
  sum eid:Nat,maxtasks:Nat,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__maxTasks_add(eid,maxtasks)).
  mth_var_end(id,ExeState,obj,__maxTasks_add_return)
    .ExeState_mem(id,typeToId,__maxTasks_add(maxTasks,eid,maxtasks),execTasks,taskInExec)
    +
  sum obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__execTasks_keys).
  mth_var_end(id,ExeState,obj,__execTasks_keys_return(__execTasks_keys(execTasks)))
    .ExeState_mem(id,typeToId,maxTasks,execTasks,taskInExec)
    +
  sum eid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__execTasks_addeid(eid)).
  mth_var_end(id,ExeState,obj,__execTasks_addeid_return)
    .ExeState_mem(id,typeToId,maxTasks,__execTasks_addeid(execTasks,eid),taskInExec)
    +
  sum etype:eType,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__typeToId_addeType(etype)).
  mth_var_end(id,ExeState,obj,__typeToId_addeType_return)
    .ExeState_mem(id,__typeToId_addeType(typeToId,etype),maxTasks,execTasks,taskInExec)
    +
  sum etype:eType,eid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeState,obj,__typeToId_addeid(etype,eid)).
  mth_var_end(id,ExeState,obj,__typeToId_addeid_return)
    .ExeState_mem(id,__typeToId_addeid(typeToId,etype,eid),maxTasks,execTasks,taskInExec)
;


%-----------
proc ExeDisp_mem(id:Nat,execTypes:__execTypes,tasks:__tasks,freezer:__taskFreez,idMap:__idMap) = 
  sum taskid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__tasks_get(taskid)).
  mth_var_end(id,ExeDisp,obj,__tasks_get_return(__tasks_get(tasks,taskid)))
    .ExeDisp_mem(id,execTypes,tasks,freezer,idMap)
    +
  sum taskid:Nat,obj:ClassObject.mth_var_begin(id,ExeDisp,obj,__taskFreez_check(taskid)).
    (taskid in freezer) -> mth_var_end(id,ExeDisp,obj,__taskFreez_check_return(true)) <> mth_var_end(id,ExeDisp,obj,__taskFreez_check_return(false))
    .ExeDisp_mem(id,execTypes,tasks,freezer,idMap)
    +
  sum taskid:Nat,obj:ClassObject.mth_var_begin(id,ExeDisp,obj,__taskFreez_append(taskid)).
  mth_var_end(id,ExeDisp,obj,__taskFreez_append_return)
    .ExeDisp_mem(id,execTypes,tasks,__taskFreez_append(freezer,taskid),idMap)
    +
  sum taskid:Nat,obj:ClassObject.mth_var_begin(id,ExeDisp,obj,__taskFreez_index(taskid)).
  mth_var_end(id,ExeDisp,obj,__taskFreez_index_return(__taskFreez_index(freezer,taskid)))
    .ExeDisp_mem(id,execTypes,tasks,freezer,idMap)
    +
  sum pos:Nat,obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__taskFreez_pop(pos)).
  mth_var_end(id,ExeDisp,obj,__taskFreez_pop_return)
    .ExeDisp_mem(id,execTypes,tasks,__taskFreez_pop(freezer,pos),idMap)
    +
  sum obj:ClassObject.mth_var_begin(id,ExeDisp,obj,__tasks_keys).
  mth_var_end(id,ExeDisp,obj,__tasks_keys_return(__tasks_keys(tasks)))
    .ExeDisp_mem(id,execTypes,tasks,freezer,idMap)
    +
  sum obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__execTypes_get_eTypes).
  mth_var_end(id,ExeDisp,obj,__execTypes_get_eTypes_return(__execTypes_get_eTypes(execTypes)))
    .ExeDisp_mem(id,execTypes,tasks,freezer,idMap)
    +
  sum obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__execTypes_getExesConnected).
mth_var_end(id,ExeDisp,obj,__execTypes_getExesConnected_return(__execTypes_getExesConnected(execTypes)))
    .ExeDisp_mem(id,execTypes,tasks,freezer,idMap)
    +
  sum taskObj:TaskObject,obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__tasks_add(taskObj)).
  mth_var_end(id,ExeDisp,obj,__tasks_add_return)
    .ExeDisp_mem(id,execTypes,__tasks_add(tasks,taskObj),freezer,idMap)
    +
  sum eid:Nat,etypes:List(eType),obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__idMap_set(eid,etypes)).
  mth_var_end(id,ExeDisp,obj,__idMap_set_return)
    .ExeDisp_mem(id,execTypes,tasks,freezer,__idMap_set(idMap,eid,etypes))
    +
  sum etype:eType,obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__execTypes_add(etype)).
  mth_var_end(id,ExeDisp,obj,__execTypes_add_return)
    .ExeDisp_mem(id,__execTypes_add(execTypes,etype),tasks,freezer,idMap)
    +
  sum etype:eType,obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__execTypes_inc(etype)).
  mth_var_end(id,ExeDisp,obj,__execTypes_inc_return)
    .ExeDisp_mem(id,__execTypes_inc(execTypes,etype),tasks,freezer,idMap)
    +
  sum eid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__idMap_pop(eid)).
  mth_var_end(id,ExeDisp,obj,__idMap_pop_return(__idMap_pop(idMap,eid)))
    .ExeDisp_mem(id,execTypes,tasks,freezer,__idMap_rem(idMap,eid))
    +
  sum etype:eType,obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__execTypes_dec(etype)).
  mth_var_end(id,ExeDisp,obj,__execTypes_dec_return)
    .ExeDisp_mem(id,__execTypes_dec(execTypes,etype),tasks,freezer,idMap)
    +
  sum eid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__idMap_get(eid)).
  mth_var_end(id,ExeDisp,obj,__idMap_get_return(__idMap_get(idMap,eid)))
    .ExeDisp_mem(id,execTypes,tasks,freezer,idMap)
    +
  sum obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__taskFreez_len).
  mth_var_end(id,ExeDisp,obj,__taskFreez_len_return(#freezer))
    .ExeDisp_mem(id,execTypes,tasks,freezer,idMap)
    +
  sum obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__idMap_keys).
  mth_var_end(id,ExeDisp,obj,__idMap_keys_return(__idMap_keys(idMap)))
    .ExeDisp_mem(id,execTypes,tasks,freezer,idMap)
    +
  sum iP:Nat,obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__taskFreez_get(iP)).
  mth_var_end(id,ExeDisp,obj,__taskFreez_get_return(__taskFreez_get(freezer,iP)))
    .ExeDisp_mem(id,execTypes,tasks,freezer,idMap)
    +
  sum taskid:Nat,taskObj:TaskObject,obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__tasks_update(taskid,taskObj)).
  mth_var_end(id,ExeDisp,obj,__tasks_update_return)
    .ExeDisp_mem(id,execTypes,__tasks_update(tasks,taskid,taskObj),freezer,idMap)
    +
  sum taskid:Nat,obj:ClassObject.
  mth_var_begin(id,ExeDisp,obj,__tasks_pop(taskid)).
  mth_var_end(id,ExeDisp,obj,__tasks_pop_return)
    .ExeDisp_mem(id,execTypes,__tasks_pop(tasks,taskid),freezer,idMap)
;

%-----------


% end-memory processes

% ======= END-DATA=============

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth1;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth1;
act mth_begin:Nat#ClassType#ClassObject#Mth1;
act mth_end:Nat#ClassType#ClassObject#Mth1;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth1;
act DISET_call:Nat#ClassType#ClassObject#Mth1;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth2;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth2;
act mth_begin:Nat#ClassType#ClassObject#Mth2;
act mth_end:Nat#ClassType#ClassObject#Mth2;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth2;
act DISET_call:Nat#ClassType#ClassObject#Mth2;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth3;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth3;
act mth_begin:Nat#ClassType#ClassObject#Mth3;
act mth_end:Nat#ClassType#ClassObject#Mth3;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth3;
act DISET_call:Nat#ClassType#ClassObject#Mth3;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth4;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth4;
act mth_begin:Nat#ClassType#ClassObject#Mth4;
act mth_end:Nat#ClassType#ClassObject#Mth4;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth4;
act DISET_call:Nat#ClassType#ClassObject#Mth4;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth5;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth5;
act mth_begin:Nat#ClassType#ClassObject#Mth5;
act mth_end:Nat#ClassType#ClassObject#Mth5;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth5;
act DISET_call:Nat#ClassType#ClassObject#Mth5;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth6;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth6;
act mth_begin:Nat#ClassType#ClassObject#Mth6;
act mth_end:Nat#ClassType#ClassObject#Mth6;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth6;
act DISET_call:Nat#ClassType#ClassObject#Mth6;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth7;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth7;
act mth_begin:Nat#ClassType#ClassObject#Mth7;
act mth_end:Nat#ClassType#ClassObject#Mth7;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth7;
act DISET_call:Nat#ClassType#ClassObject#Mth7;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth8;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth8;
act mth_begin:Nat#ClassType#ClassObject#Mth8;
act mth_end:Nat#ClassType#ClassObject#Mth8;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth8;
act DISET_call:Nat#ClassType#ClassObject#Mth8;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth9;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth9;
act mth_begin:Nat#ClassType#ClassObject#Mth9;
act mth_end:Nat#ClassType#ClassObject#Mth9;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth9;
act DISET_call:Nat#ClassType#ClassObject#Mth9;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth10;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth10;
act mth_begin:Nat#ClassType#ClassObject#Mth10;
act mth_end:Nat#ClassType#ClassObject#Mth10;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth10;
act DISET_call:Nat#ClassType#ClassObject#Mth10;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth11;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth11;
act mth_begin:Nat#ClassType#ClassObject#Mth11;
act mth_end:Nat#ClassType#ClassObject#Mth11;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth11;
act DISET_call:Nat#ClassType#ClassObject#Mth11;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth12;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth12;
act mth_begin:Nat#ClassType#ClassObject#Mth12;
act mth_end:Nat#ClassType#ClassObject#Mth12;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth12;
act DISET_call:Nat#ClassType#ClassObject#Mth12;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth13;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth13;
act mth_begin:Nat#ClassType#ClassObject#Mth13;
act mth_end:Nat#ClassType#ClassObject#Mth13;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth13;
act DISET_call:Nat#ClassType#ClassObject#Mth13;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth14;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth14;
act mth_begin:Nat#ClassType#ClassObject#Mth14;
act mth_end:Nat#ClassType#ClassObject#Mth14;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth14;
act DISET_call:Nat#ClassType#ClassObject#Mth14;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth15;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth15;
act mth_begin:Nat#ClassType#ClassObject#Mth15;
act mth_end:Nat#ClassType#ClassObject#Mth15;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth15;
act DISET_call:Nat#ClassType#ClassObject#Mth15;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth16;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth16;
act mth_begin:Nat#ClassType#ClassObject#Mth16;
act mth_end:Nat#ClassType#ClassObject#Mth16;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth16;
act DISET_call:Nat#ClassType#ClassObject#Mth16;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth17;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth17;
act mth_begin:Nat#ClassType#ClassObject#Mth17;
act mth_end:Nat#ClassType#ClassObject#Mth17;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth17;
act DISET_call:Nat#ClassType#ClassObject#Mth17;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth18;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth18;
act mth_begin:Nat#ClassType#ClassObject#Mth18;
act mth_end:Nat#ClassType#ClassObject#Mth18;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth18;
act DISET_call:Nat#ClassType#ClassObject#Mth18;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth19;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth19;
act mth_begin:Nat#ClassType#ClassObject#Mth19;
act mth_end:Nat#ClassType#ClassObject#Mth19;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth19;
act DISET_call:Nat#ClassType#ClassObject#Mth19;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth20;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth20;
act mth_begin:Nat#ClassType#ClassObject#Mth20;
act mth_end:Nat#ClassType#ClassObject#Mth20;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth20;
act DISET_call:Nat#ClassType#ClassObject#Mth20;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth21;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth21;
act mth_begin:Nat#ClassType#ClassObject#Mth21;
act mth_end:Nat#ClassType#ClassObject#Mth21;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth21;
act DISET_call:Nat#ClassType#ClassObject#Mth21;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth22;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth22;
act mth_begin:Nat#ClassType#ClassObject#Mth22;
act mth_end:Nat#ClassType#ClassObject#Mth22;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth22;
act DISET_call:Nat#ClassType#ClassObject#Mth22;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth23;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth23;
act mth_begin:Nat#ClassType#ClassObject#Mth23;
act mth_end:Nat#ClassType#ClassObject#Mth23;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth23;
act DISET_call:Nat#ClassType#ClassObject#Mth23;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth24;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth24;
act mth_begin:Nat#ClassType#ClassObject#Mth24;
act mth_end:Nat#ClassType#ClassObject#Mth24;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth24;
act DISET_call:Nat#ClassType#ClassObject#Mth24;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth25;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth25;
act mth_begin:Nat#ClassType#ClassObject#Mth25;
act mth_end:Nat#ClassType#ClassObject#Mth25;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth25;
act DISET_call:Nat#ClassType#ClassObject#Mth25;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth26;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth26;
act mth_begin:Nat#ClassType#ClassObject#Mth26;
act mth_end:Nat#ClassType#ClassObject#Mth26;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth26;
act DISET_call:Nat#ClassType#ClassObject#Mth26;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth27;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth27;
act mth_begin:Nat#ClassType#ClassObject#Mth27;
act mth_end:Nat#ClassType#ClassObject#Mth27;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth27;
act DISET_call:Nat#ClassType#ClassObject#Mth27;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth28;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth28;
act mth_begin:Nat#ClassType#ClassObject#Mth28;
act mth_end:Nat#ClassType#ClassObject#Mth28;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth28;
act DISET_call:Nat#ClassType#ClassObject#Mth28;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth29;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth29;
act mth_begin:Nat#ClassType#ClassObject#Mth29;
act mth_end:Nat#ClassType#ClassObject#Mth29;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth29;
act DISET_call:Nat#ClassType#ClassObject#Mth29;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth30;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth30;
act mth_begin:Nat#ClassType#ClassObject#Mth30;
act mth_end:Nat#ClassType#ClassObject#Mth30;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth30;
act DISET_call:Nat#ClassType#ClassObject#Mth30;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth31;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth31;
act mth_begin:Nat#ClassType#ClassObject#Mth31;
act mth_end:Nat#ClassType#ClassObject#Mth31;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth31;
act DISET_call:Nat#ClassType#ClassObject#Mth31;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth32;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth32;
act mth_begin:Nat#ClassType#ClassObject#Mth32;
act mth_end:Nat#ClassType#ClassObject#Mth32;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth32;
act DISET_call:Nat#ClassType#ClassObject#Mth32;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth33;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth33;
act mth_begin:Nat#ClassType#ClassObject#Mth33;
act mth_end:Nat#ClassType#ClassObject#Mth33;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth33;
act DISET_call:Nat#ClassType#ClassObject#Mth33;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth34;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth34;
act mth_begin:Nat#ClassType#ClassObject#Mth34;
act mth_end:Nat#ClassType#ClassObject#Mth34;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth34;
act DISET_call:Nat#ClassType#ClassObject#Mth34;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth35;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth35;
act mth_begin:Nat#ClassType#ClassObject#Mth35;
act mth_end:Nat#ClassType#ClassObject#Mth35;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth35;
act DISET_call:Nat#ClassType#ClassObject#Mth35;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth36;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth36;
act mth_begin:Nat#ClassType#ClassObject#Mth36;
act mth_end:Nat#ClassType#ClassObject#Mth36;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth36;
act DISET_call:Nat#ClassType#ClassObject#Mth36;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth37;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth37;
act mth_begin:Nat#ClassType#ClassObject#Mth37;
act mth_end:Nat#ClassType#ClassObject#Mth37;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth37;
act DISET_call:Nat#ClassType#ClassObject#Mth37;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth38;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth38;
act mth_begin:Nat#ClassType#ClassObject#Mth38;
act mth_end:Nat#ClassType#ClassObject#Mth38;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth38;
act DISET_call:Nat#ClassType#ClassObject#Mth38;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth39;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth39;
act mth_begin:Nat#ClassType#ClassObject#Mth39;
act mth_end:Nat#ClassType#ClassObject#Mth39;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth39;
act DISET_call:Nat#ClassType#ClassObject#Mth39;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth40;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth40;
act mth_begin:Nat#ClassType#ClassObject#Mth40;
act mth_end:Nat#ClassType#ClassObject#Mth40;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth40;
act DISET_call:Nat#ClassType#ClassObject#Mth40;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth41;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth41;
act mth_begin:Nat#ClassType#ClassObject#Mth41;
act mth_end:Nat#ClassType#ClassObject#Mth41;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth41;
act DISET_call:Nat#ClassType#ClassObject#Mth41;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth42;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth42;
act mth_begin:Nat#ClassType#ClassObject#Mth42;
act mth_end:Nat#ClassType#ClassObject#Mth42;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth42;
act DISET_call:Nat#ClassType#ClassObject#Mth42;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth43;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth43;
act mth_begin:Nat#ClassType#ClassObject#Mth43;
act mth_end:Nat#ClassType#ClassObject#Mth43;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth43;
act DISET_call:Nat#ClassType#ClassObject#Mth43;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth44;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth44;
act mth_begin:Nat#ClassType#ClassObject#Mth44;
act mth_end:Nat#ClassType#ClassObject#Mth44;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth44;
act DISET_call:Nat#ClassType#ClassObject#Mth44;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth45;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth45;
act mth_begin:Nat#ClassType#ClassObject#Mth45;
act mth_end:Nat#ClassType#ClassObject#Mth45;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth45;
act DISET_call:Nat#ClassType#ClassObject#Mth45;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth46;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth46;
act mth_begin:Nat#ClassType#ClassObject#Mth46;
act mth_end:Nat#ClassType#ClassObject#Mth46;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth46;
act DISET_call:Nat#ClassType#ClassObject#Mth46;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth47;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth47;
act mth_begin:Nat#ClassType#ClassObject#Mth47;
act mth_end:Nat#ClassType#ClassObject#Mth47;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth47;
act DISET_call:Nat#ClassType#ClassObject#Mth47;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth48;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth48;
act mth_begin:Nat#ClassType#ClassObject#Mth48;
act mth_end:Nat#ClassType#ClassObject#Mth48;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth48;
act DISET_call:Nat#ClassType#ClassObject#Mth48;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth49;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth49;
act mth_begin:Nat#ClassType#ClassObject#Mth49;
act mth_end:Nat#ClassType#ClassObject#Mth49;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth49;
act DISET_call:Nat#ClassType#ClassObject#Mth49;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth50;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth50;
act mth_begin:Nat#ClassType#ClassObject#Mth50;
act mth_end:Nat#ClassType#ClassObject#Mth50;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth50;
act DISET_call:Nat#ClassType#ClassObject#Mth50;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth51;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth51;
act mth_begin:Nat#ClassType#ClassObject#Mth51;
act mth_end:Nat#ClassType#ClassObject#Mth51;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth51;
act DISET_call:Nat#ClassType#ClassObject#Mth51;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth52;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth52;
act mth_begin:Nat#ClassType#ClassObject#Mth52;
act mth_end:Nat#ClassType#ClassObject#Mth52;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth52;
act DISET_call:Nat#ClassType#ClassObject#Mth52;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth53;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth53;
act mth_begin:Nat#ClassType#ClassObject#Mth53;
act mth_end:Nat#ClassType#ClassObject#Mth53;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth53;
act DISET_call:Nat#ClassType#ClassObject#Mth53;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth54;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth54;
act mth_begin:Nat#ClassType#ClassObject#Mth54;
act mth_end:Nat#ClassType#ClassObject#Mth54;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth54;
act DISET_call:Nat#ClassType#ClassObject#Mth54;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth55;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth55;
act mth_begin:Nat#ClassType#ClassObject#Mth55;
act mth_end:Nat#ClassType#ClassObject#Mth55;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth55;
act DISET_call:Nat#ClassType#ClassObject#Mth55;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth56;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth56;
act mth_begin:Nat#ClassType#ClassObject#Mth56;
act mth_end:Nat#ClassType#ClassObject#Mth56;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth56;
act DISET_call:Nat#ClassType#ClassObject#Mth56;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth57;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth57;
act mth_begin:Nat#ClassType#ClassObject#Mth57;
act mth_end:Nat#ClassType#ClassObject#Mth57;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth57;
act DISET_call:Nat#ClassType#ClassObject#Mth57;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth58;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth58;
act mth_begin:Nat#ClassType#ClassObject#Mth58;
act mth_end:Nat#ClassType#ClassObject#Mth58;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth58;
act DISET_call:Nat#ClassType#ClassObject#Mth58;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth59;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth59;
act mth_begin:Nat#ClassType#ClassObject#Mth59;
act mth_end:Nat#ClassType#ClassObject#Mth59;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth59;
act DISET_call:Nat#ClassType#ClassObject#Mth59;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth60;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth60;
act mth_begin:Nat#ClassType#ClassObject#Mth60;
act mth_end:Nat#ClassType#ClassObject#Mth60;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth60;
act DISET_call:Nat#ClassType#ClassObject#Mth60;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth61;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth61;
act mth_begin:Nat#ClassType#ClassObject#Mth61;
act mth_end:Nat#ClassType#ClassObject#Mth61;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth61;
act DISET_call:Nat#ClassType#ClassObject#Mth61;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth62;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth62;
act mth_begin:Nat#ClassType#ClassObject#Mth62;
act mth_end:Nat#ClassType#ClassObject#Mth62;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth62;
act DISET_call:Nat#ClassType#ClassObject#Mth62;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth63;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth63;
act mth_begin:Nat#ClassType#ClassObject#Mth63;
act mth_end:Nat#ClassType#ClassObject#Mth63;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth63;
act DISET_call:Nat#ClassType#ClassObject#Mth63;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth64;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth64;
act mth_begin:Nat#ClassType#ClassObject#Mth64;
act mth_end:Nat#ClassType#ClassObject#Mth64;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth64;
act DISET_call:Nat#ClassType#ClassObject#Mth64;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth65;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth65;
act mth_begin:Nat#ClassType#ClassObject#Mth65;
act mth_end:Nat#ClassType#ClassObject#Mth65;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth65;
act DISET_call:Nat#ClassType#ClassObject#Mth65;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth66;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth66;
act mth_begin:Nat#ClassType#ClassObject#Mth66;
act mth_end:Nat#ClassType#ClassObject#Mth66;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth66;
act DISET_call:Nat#ClassType#ClassObject#Mth66;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth67;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth67;
act mth_begin:Nat#ClassType#ClassObject#Mth67;
act mth_end:Nat#ClassType#ClassObject#Mth67;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth67;
act DISET_call:Nat#ClassType#ClassObject#Mth67;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth68;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth68;
act mth_begin:Nat#ClassType#ClassObject#Mth68;
act mth_end:Nat#ClassType#ClassObject#Mth68;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth68;
act DISET_call:Nat#ClassType#ClassObject#Mth68;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth69;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth69;
act mth_begin:Nat#ClassType#ClassObject#Mth69;
act mth_end:Nat#ClassType#ClassObject#Mth69;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth69;
act DISET_call:Nat#ClassType#ClassObject#Mth69;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth70;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth70;
act mth_begin:Nat#ClassType#ClassObject#Mth70;
act mth_end:Nat#ClassType#ClassObject#Mth70;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth70;
act DISET_call:Nat#ClassType#ClassObject#Mth70;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth71;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth71;
act mth_begin:Nat#ClassType#ClassObject#Mth71;
act mth_end:Nat#ClassType#ClassObject#Mth71;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth71;
act DISET_call:Nat#ClassType#ClassObject#Mth71;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth72;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth72;
act mth_begin:Nat#ClassType#ClassObject#Mth72;
act mth_end:Nat#ClassType#ClassObject#Mth72;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth72;
act DISET_call:Nat#ClassType#ClassObject#Mth72;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth73;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth73;
act mth_begin:Nat#ClassType#ClassObject#Mth73;
act mth_end:Nat#ClassType#ClassObject#Mth73;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth73;
act DISET_call:Nat#ClassType#ClassObject#Mth73;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth74;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth74;
act mth_begin:Nat#ClassType#ClassObject#Mth74;
act mth_end:Nat#ClassType#ClassObject#Mth74;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth74;
act DISET_call:Nat#ClassType#ClassObject#Mth74;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth75;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth75;
act mth_begin:Nat#ClassType#ClassObject#Mth75;
act mth_end:Nat#ClassType#ClassObject#Mth75;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth75;
act DISET_call:Nat#ClassType#ClassObject#Mth75;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth76;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth76;
act mth_begin:Nat#ClassType#ClassObject#Mth76;
act mth_end:Nat#ClassType#ClassObject#Mth76;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth76;
act DISET_call:Nat#ClassType#ClassObject#Mth76;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth77;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth77;
act mth_begin:Nat#ClassType#ClassObject#Mth77;
act mth_end:Nat#ClassType#ClassObject#Mth77;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth77;
act DISET_call:Nat#ClassType#ClassObject#Mth77;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth78;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth78;
act mth_begin:Nat#ClassType#ClassObject#Mth78;
act mth_end:Nat#ClassType#ClassObject#Mth78;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth78;
act DISET_call:Nat#ClassType#ClassObject#Mth78;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth79;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth79;
act mth_begin:Nat#ClassType#ClassObject#Mth79;
act mth_end:Nat#ClassType#ClassObject#Mth79;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth79;
act DISET_call:Nat#ClassType#ClassObject#Mth79;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth80;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth80;
act mth_begin:Nat#ClassType#ClassObject#Mth80;
act mth_end:Nat#ClassType#ClassObject#Mth80;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth80;
act DISET_call:Nat#ClassType#ClassObject#Mth80;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth81;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth81;
act mth_begin:Nat#ClassType#ClassObject#Mth81;
act mth_end:Nat#ClassType#ClassObject#Mth81;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth81;
act DISET_call:Nat#ClassType#ClassObject#Mth81;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth82;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth82;
act mth_begin:Nat#ClassType#ClassObject#Mth82;
act mth_end:Nat#ClassType#ClassObject#Mth82;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth82;
act DISET_call:Nat#ClassType#ClassObject#Mth82;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth83;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth83;
act mth_begin:Nat#ClassType#ClassObject#Mth83;
act mth_end:Nat#ClassType#ClassObject#Mth83;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth83;
act DISET_call:Nat#ClassType#ClassObject#Mth83;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth84;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth84;
act mth_begin:Nat#ClassType#ClassObject#Mth84;
act mth_end:Nat#ClassType#ClassObject#Mth84;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth84;
act DISET_call:Nat#ClassType#ClassObject#Mth84;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth85;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth85;
act mth_begin:Nat#ClassType#ClassObject#Mth85;
act mth_end:Nat#ClassType#ClassObject#Mth85;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth85;
act DISET_call:Nat#ClassType#ClassObject#Mth85;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth86;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth86;
act mth_begin:Nat#ClassType#ClassObject#Mth86;
act mth_end:Nat#ClassType#ClassObject#Mth86;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth86;
act DISET_call:Nat#ClassType#ClassObject#Mth86;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth87;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth87;
act mth_begin:Nat#ClassType#ClassObject#Mth87;
act mth_end:Nat#ClassType#ClassObject#Mth87;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth87;
act DISET_call:Nat#ClassType#ClassObject#Mth87;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth88;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth88;
act mth_begin:Nat#ClassType#ClassObject#Mth88;
act mth_end:Nat#ClassType#ClassObject#Mth88;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth88;
act DISET_call:Nat#ClassType#ClassObject#Mth88;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth89;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth89;
act mth_begin:Nat#ClassType#ClassObject#Mth89;
act mth_end:Nat#ClassType#ClassObject#Mth89;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth89;
act DISET_call:Nat#ClassType#ClassObject#Mth89;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth90;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth90;
act mth_begin:Nat#ClassType#ClassObject#Mth90;
act mth_end:Nat#ClassType#ClassObject#Mth90;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth90;
act DISET_call:Nat#ClassType#ClassObject#Mth90;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth91;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth91;
act mth_begin:Nat#ClassType#ClassObject#Mth91;
act mth_end:Nat#ClassType#ClassObject#Mth91;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth91;
act DISET_call:Nat#ClassType#ClassObject#Mth91;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth92;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth92;
act mth_begin:Nat#ClassType#ClassObject#Mth92;
act mth_end:Nat#ClassType#ClassObject#Mth92;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth92;
act DISET_call:Nat#ClassType#ClassObject#Mth92;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth93;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth93;
act mth_begin:Nat#ClassType#ClassObject#Mth93;
act mth_end:Nat#ClassType#ClassObject#Mth93;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth93;
act DISET_call:Nat#ClassType#ClassObject#Mth93;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth94;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth94;
act mth_begin:Nat#ClassType#ClassObject#Mth94;
act mth_end:Nat#ClassType#ClassObject#Mth94;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth94;
act DISET_call:Nat#ClassType#ClassObject#Mth94;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth95;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth95;
act mth_begin:Nat#ClassType#ClassObject#Mth95;
act mth_end:Nat#ClassType#ClassObject#Mth95;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth95;
act DISET_call:Nat#ClassType#ClassObject#Mth95;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth96;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth96;
act mth_begin:Nat#ClassType#ClassObject#Mth96;
act mth_end:Nat#ClassType#ClassObject#Mth96;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth96;
act DISET_call:Nat#ClassType#ClassObject#Mth96;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth97;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth97;
act mth_begin:Nat#ClassType#ClassObject#Mth97;
act mth_end:Nat#ClassType#ClassObject#Mth97;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth97;
act DISET_call:Nat#ClassType#ClassObject#Mth97;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth98;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth98;
act mth_begin:Nat#ClassType#ClassObject#Mth98;
act mth_end:Nat#ClassType#ClassObject#Mth98;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth98;
act DISET_call:Nat#ClassType#ClassObject#Mth98;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth99;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth99;
act mth_begin:Nat#ClassType#ClassObject#Mth99;
act mth_end:Nat#ClassType#ClassObject#Mth99;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth99;
act DISET_call:Nat#ClassType#ClassObject#Mth99;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth100;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth100;
act mth_begin:Nat#ClassType#ClassObject#Mth100;
act mth_end:Nat#ClassType#ClassObject#Mth100;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth100;
act DISET_call:Nat#ClassType#ClassObject#Mth100;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth101;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth101;
act mth_begin:Nat#ClassType#ClassObject#Mth101;
act mth_end:Nat#ClassType#ClassObject#Mth101;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth101;
act DISET_call:Nat#ClassType#ClassObject#Mth101;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth102;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth102;
act mth_begin:Nat#ClassType#ClassObject#Mth102;
act mth_end:Nat#ClassType#ClassObject#Mth102;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth102;
act DISET_call:Nat#ClassType#ClassObject#Mth102;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth103;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth103;
act mth_begin:Nat#ClassType#ClassObject#Mth103;
act mth_end:Nat#ClassType#ClassObject#Mth103;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth103;
act DISET_call:Nat#ClassType#ClassObject#Mth103;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth104;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth104;
act mth_begin:Nat#ClassType#ClassObject#Mth104;
act mth_end:Nat#ClassType#ClassObject#Mth104;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth104;
act DISET_call:Nat#ClassType#ClassObject#Mth104;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth105;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth105;
act mth_begin:Nat#ClassType#ClassObject#Mth105;
act mth_end:Nat#ClassType#ClassObject#Mth105;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth105;
act DISET_call:Nat#ClassType#ClassObject#Mth105;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth106;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth106;
act mth_begin:Nat#ClassType#ClassObject#Mth106;
act mth_end:Nat#ClassType#ClassObject#Mth106;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth106;
act DISET_call:Nat#ClassType#ClassObject#Mth106;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth107;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth107;
act mth_begin:Nat#ClassType#ClassObject#Mth107;
act mth_end:Nat#ClassType#ClassObject#Mth107;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth107;
act DISET_call:Nat#ClassType#ClassObject#Mth107;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth108;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth108;
act mth_begin:Nat#ClassType#ClassObject#Mth108;
act mth_end:Nat#ClassType#ClassObject#Mth108;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth108;
act DISET_call:Nat#ClassType#ClassObject#Mth108;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth109;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth109;
act mth_begin:Nat#ClassType#ClassObject#Mth109;
act mth_end:Nat#ClassType#ClassObject#Mth109;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth109;
act DISET_call:Nat#ClassType#ClassObject#Mth109;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth110;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth110;
act mth_begin:Nat#ClassType#ClassObject#Mth110;
act mth_end:Nat#ClassType#ClassObject#Mth110;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth110;
act DISET_call:Nat#ClassType#ClassObject#Mth110;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth111;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth111;
act mth_begin:Nat#ClassType#ClassObject#Mth111;
act mth_end:Nat#ClassType#ClassObject#Mth111;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth111;
act DISET_call:Nat#ClassType#ClassObject#Mth111;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth112;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth112;
act mth_begin:Nat#ClassType#ClassObject#Mth112;
act mth_end:Nat#ClassType#ClassObject#Mth112;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth112;
act DISET_call:Nat#ClassType#ClassObject#Mth112;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth113;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth113;
act mth_begin:Nat#ClassType#ClassObject#Mth113;
act mth_end:Nat#ClassType#ClassObject#Mth113;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth113;
act DISET_call:Nat#ClassType#ClassObject#Mth113;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth114;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth114;
act mth_begin:Nat#ClassType#ClassObject#Mth114;
act mth_end:Nat#ClassType#ClassObject#Mth114;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth114;
act DISET_call:Nat#ClassType#ClassObject#Mth114;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth115;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth115;
act mth_begin:Nat#ClassType#ClassObject#Mth115;
act mth_end:Nat#ClassType#ClassObject#Mth115;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth115;
act DISET_call:Nat#ClassType#ClassObject#Mth115;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth116;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth116;
act mth_begin:Nat#ClassType#ClassObject#Mth116;
act mth_end:Nat#ClassType#ClassObject#Mth116;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth116;
act DISET_call:Nat#ClassType#ClassObject#Mth116;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth117;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth117;
act mth_begin:Nat#ClassType#ClassObject#Mth117;
act mth_end:Nat#ClassType#ClassObject#Mth117;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth117;
act DISET_call:Nat#ClassType#ClassObject#Mth117;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth118;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth118;
act mth_begin:Nat#ClassType#ClassObject#Mth118;
act mth_end:Nat#ClassType#ClassObject#Mth118;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth118;
act DISET_call:Nat#ClassType#ClassObject#Mth118;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth119;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth119;
act mth_begin:Nat#ClassType#ClassObject#Mth119;
act mth_end:Nat#ClassType#ClassObject#Mth119;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth119;
act DISET_call:Nat#ClassType#ClassObject#Mth119;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth120;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth120;
act mth_begin:Nat#ClassType#ClassObject#Mth120;
act mth_end:Nat#ClassType#ClassObject#Mth120;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth120;
act DISET_call:Nat#ClassType#ClassObject#Mth120;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth121;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth121;
act mth_begin:Nat#ClassType#ClassObject#Mth121;
act mth_end:Nat#ClassType#ClassObject#Mth121;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth121;
act DISET_call:Nat#ClassType#ClassObject#Mth121;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth122;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth122;
act mth_begin:Nat#ClassType#ClassObject#Mth122;
act mth_end:Nat#ClassType#ClassObject#Mth122;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth122;
act DISET_call:Nat#ClassType#ClassObject#Mth122;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth123;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth123;
act mth_begin:Nat#ClassType#ClassObject#Mth123;
act mth_end:Nat#ClassType#ClassObject#Mth123;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth123;
act DISET_call:Nat#ClassType#ClassObject#Mth123;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth124;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth124;
act mth_begin:Nat#ClassType#ClassObject#Mth124;
act mth_end:Nat#ClassType#ClassObject#Mth124;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth124;
act DISET_call:Nat#ClassType#ClassObject#Mth124;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth125;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth125;
act mth_begin:Nat#ClassType#ClassObject#Mth125;
act mth_end:Nat#ClassType#ClassObject#Mth125;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth125;
act DISET_call:Nat#ClassType#ClassObject#Mth125;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth126;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth126;
act mth_begin:Nat#ClassType#ClassObject#Mth126;
act mth_end:Nat#ClassType#ClassObject#Mth126;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth126;
act DISET_call:Nat#ClassType#ClassObject#Mth126;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth127;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth127;
act mth_begin:Nat#ClassType#ClassObject#Mth127;
act mth_end:Nat#ClassType#ClassObject#Mth127;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth127;
act DISET_call:Nat#ClassType#ClassObject#Mth127;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth128;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth128;
act mth_begin:Nat#ClassType#ClassObject#Mth128;
act mth_end:Nat#ClassType#ClassObject#Mth128;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth128;
act DISET_call:Nat#ClassType#ClassObject#Mth128;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth129;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth129;
act mth_begin:Nat#ClassType#ClassObject#Mth129;
act mth_end:Nat#ClassType#ClassObject#Mth129;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth129;
act DISET_call:Nat#ClassType#ClassObject#Mth129;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth130;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth130;
act mth_begin:Nat#ClassType#ClassObject#Mth130;
act mth_end:Nat#ClassType#ClassObject#Mth130;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth130;
act DISET_call:Nat#ClassType#ClassObject#Mth130;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth131;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth131;
act mth_begin:Nat#ClassType#ClassObject#Mth131;
act mth_end:Nat#ClassType#ClassObject#Mth131;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth131;
act DISET_call:Nat#ClassType#ClassObject#Mth131;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth132;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth132;
act mth_begin:Nat#ClassType#ClassObject#Mth132;
act mth_end:Nat#ClassType#ClassObject#Mth132;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth132;
act DISET_call:Nat#ClassType#ClassObject#Mth132;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth133;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth133;
act mth_begin:Nat#ClassType#ClassObject#Mth133;
act mth_end:Nat#ClassType#ClassObject#Mth133;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth133;
act DISET_call:Nat#ClassType#ClassObject#Mth133;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth134;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth134;
act mth_begin:Nat#ClassType#ClassObject#Mth134;
act mth_end:Nat#ClassType#ClassObject#Mth134;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth134;
act DISET_call:Nat#ClassType#ClassObject#Mth134;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth135;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth135;
act mth_begin:Nat#ClassType#ClassObject#Mth135;
act mth_end:Nat#ClassType#ClassObject#Mth135;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth135;
act DISET_call:Nat#ClassType#ClassObject#Mth135;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth136;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth136;
act mth_begin:Nat#ClassType#ClassObject#Mth136;
act mth_end:Nat#ClassType#ClassObject#Mth136;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth136;
act DISET_call:Nat#ClassType#ClassObject#Mth136;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth137;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth137;
act mth_begin:Nat#ClassType#ClassObject#Mth137;
act mth_end:Nat#ClassType#ClassObject#Mth137;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth137;
act DISET_call:Nat#ClassType#ClassObject#Mth137;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth138;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth138;
act mth_begin:Nat#ClassType#ClassObject#Mth138;
act mth_end:Nat#ClassType#ClassObject#Mth138;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth138;
act DISET_call:Nat#ClassType#ClassObject#Mth138;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth139;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth139;
act mth_begin:Nat#ClassType#ClassObject#Mth139;
act mth_end:Nat#ClassType#ClassObject#Mth139;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth139;
act DISET_call:Nat#ClassType#ClassObject#Mth139;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth140;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth140;
act mth_begin:Nat#ClassType#ClassObject#Mth140;
act mth_end:Nat#ClassType#ClassObject#Mth140;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth140;
act DISET_call:Nat#ClassType#ClassObject#Mth140;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth141;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth141;
act mth_begin:Nat#ClassType#ClassObject#Mth141;
act mth_end:Nat#ClassType#ClassObject#Mth141;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth141;
act DISET_call:Nat#ClassType#ClassObject#Mth141;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth142;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth142;
act mth_begin:Nat#ClassType#ClassObject#Mth142;
act mth_end:Nat#ClassType#ClassObject#Mth142;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth142;
act DISET_call:Nat#ClassType#ClassObject#Mth142;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth143;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth143;
act mth_begin:Nat#ClassType#ClassObject#Mth143;
act mth_end:Nat#ClassType#ClassObject#Mth143;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth143;
act DISET_call:Nat#ClassType#ClassObject#Mth143;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth144;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth144;
act mth_begin:Nat#ClassType#ClassObject#Mth144;
act mth_end:Nat#ClassType#ClassObject#Mth144;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth144;
act DISET_call:Nat#ClassType#ClassObject#Mth144;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth145;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth145;
act mth_begin:Nat#ClassType#ClassObject#Mth145;
act mth_end:Nat#ClassType#ClassObject#Mth145;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth145;
act DISET_call:Nat#ClassType#ClassObject#Mth145;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth146;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth146;
act mth_begin:Nat#ClassType#ClassObject#Mth146;
act mth_end:Nat#ClassType#ClassObject#Mth146;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth146;
act DISET_call:Nat#ClassType#ClassObject#Mth146;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth147;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth147;
act mth_begin:Nat#ClassType#ClassObject#Mth147;
act mth_end:Nat#ClassType#ClassObject#Mth147;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth147;
act DISET_call:Nat#ClassType#ClassObject#Mth147;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth148;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth148;
act mth_begin:Nat#ClassType#ClassObject#Mth148;
act mth_end:Nat#ClassType#ClassObject#Mth148;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth148;
act DISET_call:Nat#ClassType#ClassObject#Mth148;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth149;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth149;
act mth_begin:Nat#ClassType#ClassObject#Mth149;
act mth_end:Nat#ClassType#ClassObject#Mth149;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth149;
act DISET_call:Nat#ClassType#ClassObject#Mth149;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth150;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth150;
act mth_begin:Nat#ClassType#ClassObject#Mth150;
act mth_end:Nat#ClassType#ClassObject#Mth150;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth150;
act DISET_call:Nat#ClassType#ClassObject#Mth150;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth151;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth151;
act mth_begin:Nat#ClassType#ClassObject#Mth151;
act mth_end:Nat#ClassType#ClassObject#Mth151;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth151;
act DISET_call:Nat#ClassType#ClassObject#Mth151;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth152;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth152;
act mth_begin:Nat#ClassType#ClassObject#Mth152;
act mth_end:Nat#ClassType#ClassObject#Mth152;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth152;
act DISET_call:Nat#ClassType#ClassObject#Mth152;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth153;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth153;
act mth_begin:Nat#ClassType#ClassObject#Mth153;
act mth_end:Nat#ClassType#ClassObject#Mth153;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth153;
act DISET_call:Nat#ClassType#ClassObject#Mth153;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth154;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth154;
act mth_begin:Nat#ClassType#ClassObject#Mth154;
act mth_end:Nat#ClassType#ClassObject#Mth154;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth154;
act DISET_call:Nat#ClassType#ClassObject#Mth154;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth155;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth155;
act mth_begin:Nat#ClassType#ClassObject#Mth155;
act mth_end:Nat#ClassType#ClassObject#Mth155;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth155;
act DISET_call:Nat#ClassType#ClassObject#Mth155;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth156;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth156;
act mth_begin:Nat#ClassType#ClassObject#Mth156;
act mth_end:Nat#ClassType#ClassObject#Mth156;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth156;
act DISET_call:Nat#ClassType#ClassObject#Mth156;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth157;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth157;
act mth_begin:Nat#ClassType#ClassObject#Mth157;
act mth_end:Nat#ClassType#ClassObject#Mth157;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth157;
act DISET_call:Nat#ClassType#ClassObject#Mth157;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth158;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth158;
act mth_begin:Nat#ClassType#ClassObject#Mth158;
act mth_end:Nat#ClassType#ClassObject#Mth158;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth158;
act DISET_call:Nat#ClassType#ClassObject#Mth158;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth159;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth159;
act mth_begin:Nat#ClassType#ClassObject#Mth159;
act mth_end:Nat#ClassType#ClassObject#Mth159;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth159;
act DISET_call:Nat#ClassType#ClassObject#Mth159;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth160;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth160;
act mth_begin:Nat#ClassType#ClassObject#Mth160;
act mth_end:Nat#ClassType#ClassObject#Mth160;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth160;
act DISET_call:Nat#ClassType#ClassObject#Mth160;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth161;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth161;
act mth_begin:Nat#ClassType#ClassObject#Mth161;
act mth_end:Nat#ClassType#ClassObject#Mth161;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth161;
act DISET_call:Nat#ClassType#ClassObject#Mth161;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth162;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth162;
act mth_begin:Nat#ClassType#ClassObject#Mth162;
act mth_end:Nat#ClassType#ClassObject#Mth162;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth162;
act DISET_call:Nat#ClassType#ClassObject#Mth162;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth163;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth163;
act mth_begin:Nat#ClassType#ClassObject#Mth163;
act mth_end:Nat#ClassType#ClassObject#Mth163;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth163;
act DISET_call:Nat#ClassType#ClassObject#Mth163;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth164;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth164;
act mth_begin:Nat#ClassType#ClassObject#Mth164;
act mth_end:Nat#ClassType#ClassObject#Mth164;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth164;
act DISET_call:Nat#ClassType#ClassObject#Mth164;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth165;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth165;
act mth_begin:Nat#ClassType#ClassObject#Mth165;
act mth_end:Nat#ClassType#ClassObject#Mth165;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth165;
act DISET_call:Nat#ClassType#ClassObject#Mth165;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth166;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth166;
act mth_begin:Nat#ClassType#ClassObject#Mth166;
act mth_end:Nat#ClassType#ClassObject#Mth166;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth166;
act DISET_call:Nat#ClassType#ClassObject#Mth166;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth167;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth167;
act mth_begin:Nat#ClassType#ClassObject#Mth167;
act mth_end:Nat#ClassType#ClassObject#Mth167;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth167;
act DISET_call:Nat#ClassType#ClassObject#Mth167;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth168;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth168;
act mth_begin:Nat#ClassType#ClassObject#Mth168;
act mth_end:Nat#ClassType#ClassObject#Mth168;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth168;
act DISET_call:Nat#ClassType#ClassObject#Mth168;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth169;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth169;
act mth_begin:Nat#ClassType#ClassObject#Mth169;
act mth_end:Nat#ClassType#ClassObject#Mth169;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth169;
act DISET_call:Nat#ClassType#ClassObject#Mth169;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth170;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth170;
act mth_begin:Nat#ClassType#ClassObject#Mth170;
act mth_end:Nat#ClassType#ClassObject#Mth170;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth170;
act DISET_call:Nat#ClassType#ClassObject#Mth170;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth171;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth171;
act mth_begin:Nat#ClassType#ClassObject#Mth171;
act mth_end:Nat#ClassType#ClassObject#Mth171;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth171;
act DISET_call:Nat#ClassType#ClassObject#Mth171;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth172;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth172;
act mth_begin:Nat#ClassType#ClassObject#Mth172;
act mth_end:Nat#ClassType#ClassObject#Mth172;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth172;
act DISET_call:Nat#ClassType#ClassObject#Mth172;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth173;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth173;
act mth_begin:Nat#ClassType#ClassObject#Mth173;
act mth_end:Nat#ClassType#ClassObject#Mth173;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth173;
act DISET_call:Nat#ClassType#ClassObject#Mth173;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth174;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth174;
act mth_begin:Nat#ClassType#ClassObject#Mth174;
act mth_end:Nat#ClassType#ClassObject#Mth174;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth174;
act DISET_call:Nat#ClassType#ClassObject#Mth174;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth175;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth175;
act mth_begin:Nat#ClassType#ClassObject#Mth175;
act mth_end:Nat#ClassType#ClassObject#Mth175;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth175;
act DISET_call:Nat#ClassType#ClassObject#Mth175;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth176;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth176;
act mth_begin:Nat#ClassType#ClassObject#Mth176;
act mth_end:Nat#ClassType#ClassObject#Mth176;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth176;
act DISET_call:Nat#ClassType#ClassObject#Mth176;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth177;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth177;
act mth_begin:Nat#ClassType#ClassObject#Mth177;
act mth_end:Nat#ClassType#ClassObject#Mth177;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth177;
act DISET_call:Nat#ClassType#ClassObject#Mth177;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth178;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth178;
act mth_begin:Nat#ClassType#ClassObject#Mth178;
act mth_end:Nat#ClassType#ClassObject#Mth178;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth178;
act DISET_call:Nat#ClassType#ClassObject#Mth178;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth179;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth179;
act mth_begin:Nat#ClassType#ClassObject#Mth179;
act mth_end:Nat#ClassType#ClassObject#Mth179;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth179;
act DISET_call:Nat#ClassType#ClassObject#Mth179;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth180;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth180;
act mth_begin:Nat#ClassType#ClassObject#Mth180;
act mth_end:Nat#ClassType#ClassObject#Mth180;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth180;
act DISET_call:Nat#ClassType#ClassObject#Mth180;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth181;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth181;
act mth_begin:Nat#ClassType#ClassObject#Mth181;
act mth_end:Nat#ClassType#ClassObject#Mth181;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth181;
act DISET_call:Nat#ClassType#ClassObject#Mth181;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth182;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth182;
act mth_begin:Nat#ClassType#ClassObject#Mth182;
act mth_end:Nat#ClassType#ClassObject#Mth182;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth182;
act DISET_call:Nat#ClassType#ClassObject#Mth182;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth183;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth183;
act mth_begin:Nat#ClassType#ClassObject#Mth183;
act mth_end:Nat#ClassType#ClassObject#Mth183;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth183;
act DISET_call:Nat#ClassType#ClassObject#Mth183;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth184;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth184;
act mth_begin:Nat#ClassType#ClassObject#Mth184;
act mth_end:Nat#ClassType#ClassObject#Mth184;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth184;
act DISET_call:Nat#ClassType#ClassObject#Mth184;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth185;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth185;
act mth_begin:Nat#ClassType#ClassObject#Mth185;
act mth_end:Nat#ClassType#ClassObject#Mth185;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth185;
act DISET_call:Nat#ClassType#ClassObject#Mth185;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth186;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth186;
act mth_begin:Nat#ClassType#ClassObject#Mth186;
act mth_end:Nat#ClassType#ClassObject#Mth186;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth186;
act DISET_call:Nat#ClassType#ClassObject#Mth186;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth187;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth187;
act mth_begin:Nat#ClassType#ClassObject#Mth187;
act mth_end:Nat#ClassType#ClassObject#Mth187;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth187;
act DISET_call:Nat#ClassType#ClassObject#Mth187;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth188;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth188;
act mth_begin:Nat#ClassType#ClassObject#Mth188;
act mth_end:Nat#ClassType#ClassObject#Mth188;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth188;
act DISET_call:Nat#ClassType#ClassObject#Mth188;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth189;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth189;
act mth_begin:Nat#ClassType#ClassObject#Mth189;
act mth_end:Nat#ClassType#ClassObject#Mth189;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth189;
act DISET_call:Nat#ClassType#ClassObject#Mth189;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth190;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth190;
act mth_begin:Nat#ClassType#ClassObject#Mth190;
act mth_end:Nat#ClassType#ClassObject#Mth190;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth190;
act DISET_call:Nat#ClassType#ClassObject#Mth190;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth191;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth191;
act mth_begin:Nat#ClassType#ClassObject#Mth191;
act mth_end:Nat#ClassType#ClassObject#Mth191;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth191;
act DISET_call:Nat#ClassType#ClassObject#Mth191;


act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth192;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth192;
act mth_begin:Nat#ClassType#ClassObject#Mth192;
act mth_end:Nat#ClassType#ClassObject#Mth192;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth192;
act DISET_call:Nat#ClassType#ClassObject#Mth192;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth193;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth193;
act mth_begin:Nat#ClassType#ClassObject#Mth193;
act mth_end:Nat#ClassType#ClassObject#Mth193;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth193;
act DISET_call:Nat#ClassType#ClassObject#Mth193;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth194;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth194;
act mth_begin:Nat#ClassType#ClassObject#Mth194;
act mth_end:Nat#ClassType#ClassObject#Mth194;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth194;
act DISET_call:Nat#ClassType#ClassObject#Mth194;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth195;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth195;
act mth_begin:Nat#ClassType#ClassObject#Mth195;
act mth_end:Nat#ClassType#ClassObject#Mth195;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth195;
act DISET_call:Nat#ClassType#ClassObject#Mth195;

act mth_call_begin,mth_var_begin:Nat#ClassType#ClassObject#Mth196;
act mth_call_end,mth_var_end:Nat#ClassType#ClassObject#Mth196;
act mth_begin:Nat#ClassType#ClassObject#Mth196;
act mth_end:Nat#ClassType#ClassObject#Mth196;
act DISET_call_send, DISET_call_receive:Nat#ClassType#ClassObject#Mth196;
act DISET_call:Nat#ClassType#ClassObject#Mth196;




















act internal;
%--------DATA TRANSFORMATIONS
% -----------------
map minorStatus2eType:MinorStatus->eType;
%----------------------------
var minor:MinorStatus;
eqn
	minorStatus2eType(minor) = if(minor==JobPath,JobPath,
		  if(minor==JobSanity,JobSanity,
		    if(minor==JobScheduling,JobScheduling,
		      if(minor==InputData,InputData,None
			))));

%-----------DONE server---
proc ExeDisp_remTask(id:Nat) =
(
    
    sum taskId:Nat,obj:ClassObject.mth_var_begin(id,ExeDisp,obj,remTaskDisp(taskId)).
    mth_call_begin(id,ExeDisp,obj,__tasks_pop(taskId)).
    mth_call_end(id,ExeDisp,obj,__tasks_pop_return). 
    mth_call_begin(id,ExeState,__states, getExeTask(taskId)). 
    sum eId:Nat.mth_call_end(id,ExeState,__states,getExeTask_return(eId)).
    
    ( mth_call_begin(id,ExeQueues,__queues,delTask(taskId)).
      mth_call_end(id,ExeQueues,__queues,delTask_return).
      mth_call_begin(id,ExeState,__states,remTask(taskId,0)). % eid=0 fixed! to represent eId=None
      sum result:Bool.mth_call_end(id,ExeState,__states,remTask_return(result)).
      mth_call_begin(id,ExeDisp,obj,__taskFreez_index(taskId)).
      sum ind:Int.mth_call_end(id,ExeDisp,obj,__taskFreez_index_return(ind)).
      ((ind>0) -> (
		  mth_call_begin(id,ExeDisp,obj,__taskFreez_pop(Int2Nat(ind))).
		  mth_call_end(id,ExeDisp,obj,__taskFreez_pop_return)
		    ) <> internal).
      ((eId>0) -> 
      mth_call_begin(id,ExeDisp,obj,__sndTask2Exe(eId,[],true)).
      sum reply:Reply,tid:Nat.mth_call_end(id,ExeDisp,obj,__sndTask2Exe_return(reply,tid)) % fixed [] for eTypes=false;checkIdle=true is ok
      .mth_var_end(id,ExeDisp,obj,remTaskDisp_return(reply)) 
      <> mth_var_end(id,ExeDisp,obj,remTaskDisp_return(OK))
      )
    )

)
. ExeDisp_remTask(id)
;
  
%-----------DONE-server------------
proc ExeState_getExeTask(id:Nat) = 

(
	sum taskId:Nat,obj:ClassObject.mth_var_begin(id,ExeState,obj,getExeTask(taskId)).
	  mth_call_begin(id,ExeState,obj,__taskInExec_get(taskId)).
	  sum eid:Int.mth_call_end(id,ExeState,obj,__taskInExec_get_return(eid)).
	  (eid>0) -> mth_var_end(id,ExeState,obj,getExeTask_return(Int2Nat(eid)))
	    <>
		    mth_var_end(id,ExeState,obj,getExeTask_return(0)) % represents NONE

)
. ExeState_getExeTask(id)
;

%-----------DONE server-----------
proc ExeQueues_delTask(id:Nat) = 
(
    sum taskId:Nat,obj:ClassObject. mth_var_begin(id,ExeQueues,obj,delTask(taskId)).
    mth_call_begin(id,ExeQueues,obj,__taskInQueue_get(taskId)).
    sum etype:eType.mth_call_end(id,ExeQueues,obj,__taskInQueue_get_return(etype)).
    
      mth_call_begin(id,ExeQueues,obj,__taskInQueue_del(taskId)).
      mth_call_end(id,ExeQueues,obj,__taskInQueue_del_return).
      
      mth_call_begin(id,ExeQueues,obj,__queues_index(etype,taskId)).
      sum iPos:Int.mth_call_end(id,ExeQueues,obj,__queues_index_return(iPos)).
      ((iPos!=-1) -> 
	  mth_call_begin(id,ExeQueues,obj,__queues_delAtPos(etype,Int2Nat(iPos))).
	  mth_call_end(id,ExeQueues,obj,__queues_delAtPos_return)
	  <> internal)
    .mth_var_end(id,ExeQueues,obj,delTask_return)

)
.ExeQueues_delTask(id)
;
%-----------DONE server-------
proc ExeState_remTask(id:Nat) = 
(
    sum taskId:Nat,eId:Nat,obj:ClassObject.mth_var_begin(id,ExeState,obj,remTask(taskId,eId)).
    (
	    mth_call_begin(id,ExeState,obj,__taskInExec_get(taskId)). 
	    sum eId:Int.mth_call_end(id,ExeState,obj,__taskInExec_get_return(eId)).
	    (eId>0)->
	      (
	      mth_call_begin(id,ExeState,obj,__execTasks_remtaskid(Int2Nat(eId),taskId)).
	      mth_call_end(id,ExeState,obj,__execTasks_remtaskid_return).
	      mth_call_begin(id,ExeState,obj,__taskInExec_pop(taskId)).
	      mth_call_end(id,ExeState,obj,__taskInExec_pop_return).
	      mth_var_end(id,ExeState,obj,remTask_return(true))
		)
		<> 
	      (
	      mth_call_begin(id,ExeState,obj,__taskInExec_pop(taskId)).
	      mth_call_end(id,ExeState,obj,__taskInExec_pop_return).
	      mth_var_end(id,ExeState,obj,remTask_return(false))
	      )

      )
)
.ExeState_remTask(id)
;

%-----------DONE server-----
proc ExeDisp___sndTask2Exe(id:Nat) = 
(
    sum eId:Nat,eTypes:List(eType),checkIdle:Bool,obj:ClassObject.
    mth_var_begin(id,ExeDisp,obj,__sndTask2Exe(eId,eTypes,checkIdle)). 
    mth_call_begin(id,ExeState,__states,freeSlots(eId)). 
    sum noSlots:Nat.mth_call_end(id,ExeState,__states,freeSlots_return(noSlots)).
    (checkIdle && noSlots==0) ->
      mth_var_end(id,ExeDisp,obj,__sndTask2Exe_return(OK,0)) <> % taskid=0 for no task 
	    (
	      (eTypes==[]) -> 
		  (
		    mth_call_begin(id,ExeDisp,obj,__idMap_get(eId)).
		    sum eTypes:List(eType).mth_call_end(id,ExeDisp,obj,__idMap_get_return(eTypes)).
		    (eTypes==[]) -> mth_var_end(id,ExeDisp,obj,__sndTask2Exe_return(ERROR,0)) <>
		      (
			mth_call_begin(id,ExeQueues,__queues,popTask(eTypes)).
			sum taskId:Nat,eType:eType.mth_call_end(id,ExeQueues,__queues,popTask_return(taskId,eType)).
		      (taskId==0) ->
		      mth_var_end(id,ExeDisp,obj,__sndTask2Exe_return(OK,0)) <> % no more tasks!
			(
			mth_call_begin(id,ExeState,__states,addTask(eId,taskId)).
			mth_call_end(id,ExeState,__states,addTask_return).
			mth_call_begin(id,ExeDisp,obj,__msgTask2Exe(taskId,eId,eType)). 
			sum reply:Reply.mth_call_end(id,ExeDisp,obj,__msgTask2Exe_return(reply)).
			(reply!=OK) ->
			mth_call_begin(id,ExeQueues,__queues,pushTask(eType,taskId,true)). % ahead=true in call!
			mth_call_end(id,ExeQueues,__queues,pushTask_return).
			mth_call_begin(id,ExeState,__states,remTask(taskId,0)).  % eid=0 fixed for eid==None!
			sum result:Bool.mth_call_end(id,ExeState,__states,remTask_return(result)).
			mth_var_end(id,ExeDisp,obj,__sndTask2Exe_return(reply,0))
			<>  mth_var_end(id,ExeDisp,obj,__sndTask2Exe_return(OK,taskId))
			)
		      )
		  ) <> 
		  (

			mth_call_begin(id,ExeQueues,__queues,popTask(eTypes)).
			sum taskId:Nat,eType:eType.mth_call_end(id,ExeQueues,__queues,popTask_return(taskId,eType)).
		      (taskId==0) ->
		      mth_var_end(id,ExeDisp,obj,__sndTask2Exe_return(OK,0)) <> % no more tasks!
			(
			mth_call_begin(id,ExeState,__states,addTask(eId,taskId)).
			mth_call_end(id,ExeState,__states,addTask_return).
			mth_call_begin(id,ExeDisp,obj,__msgTask2Exe(taskId,eId,eType)). 
			sum reply:Reply.mth_call_end(id,ExeDisp,obj,__msgTask2Exe_return(reply)).
			(reply!=OK) ->
			mth_call_begin(id,ExeQueues,__queues,pushTask(eType,taskId,true)). % ahead=true in call!
			mth_call_end(id,ExeQueues,__queues,pushTask_return).
			mth_call_begin(id,ExeState,__states,remTask(taskId,0)).  % eid=0 fixed for eid==None!
			sum result:Bool.mth_call_end(id,ExeState,__states,remTask_return(result)).
			mth_var_end(id,ExeDisp,obj,__sndTask2Exe_return(reply,0))
			<>  mth_var_end(id,ExeDisp,obj,__sndTask2Exe_return(OK,taskId))
			)

		   )
	    )

)
.ExeDisp___sndTask2Exe(id)
;

%-----------server----------
ExeState_freeSlots(id:Nat) = 
(
    sum eId:Nat,obj:ClassObject.mth_var_begin(id,ExeState,obj,freeSlots(eId)).
      mth_call_begin(id,ExeState,obj,__maxTasks_get(eId)).
      sum maxtasks:Nat.mth_call_end(id,ExeState,obj,__maxTasks_get_return(maxtasks)).
      mth_call_begin(id,ExeState,obj,__execTasks_taskids(eId)).
      sum taskids:List(Nat).mth_call_end(id,ExeState,obj,__execTasks_taskids_return(taskids)).
      (maxtasks==0) -> mth_var_end(id,ExeState,obj,freeSlots_return(0))
	    <>
		  mth_var_end(id,ExeState,obj,freeSlots_return(Int2Nat(maxtasks-#taskids)))
)
.ExeState_freeSlots(id)
;

%-----------DONE server---------
ExeQueues_popTask(id:Nat) = 
(
    sum eTypes:List(eType),obj:ClassObject.mth_var_begin(id,ExeQueues,obj,popTask(eTypes)). 
    loop_popTask(id,obj,eTypes)
)
.ExeQueues_popTask(id)
;

proc loop_popTask(id:Nat,obj:ClassObject,eTypes:List(eType)) = 
  (eTypes!=[]) ->
    mth_call_begin(id,ExeQueues,obj,__queues_pop(head(eTypes),0)).
    sum taskid:Int.mth_call_end(id,ExeQueues,obj,__queues_pop_return(taskid)).
    ((taskid!=-1) ->
      mth_call_begin(id,ExeQueues,obj,__taskInQueue_del(Int2Nat(taskid))).
      mth_call_end(id,ExeQueues,obj,__taskInQueue_del_return).
      mth_var_end(id,ExeQueues,obj,popTask_return(Int2Nat(taskid),head(eTypes)))
      <>
      loop_popTask(id,obj,tail(eTypes))
      )
    <>
%     internal
    mth_var_end(id,ExeQueues,obj,popTask_return(0,None))
;

%-----------DONE-server-----------
ExeState_addTask(id:Nat) = 
(
sum eId:Nat,taskId:Nat,obj:ClassObject.
    mth_var_begin(id,ExeState,obj,addTask(eId,taskId)).
  mth_call_begin(id,ExeState,obj,__taskInExec_set(taskId,eId)).
  mth_call_end(id,ExeState,obj,__taskInExec_set_return).
  mth_call_begin(id,ExeState,obj,__execTasks_addtaskid(eId,taskId)).
  mth_call_end(id,ExeState,obj,__execTasks_addtaskid_return).
  mth_var_end(id,ExeState,obj,addTask_return)
)
.ExeState_addTask(id)
;

%-----------server----------
proc ExeDisp___msgTask2Exe(id:Nat) =
(
    sum taskId:Nat,eId:Nat,eType:eType,obj:ClassObject.
      mth_var_begin(id,ExeDisp,obj,__msgTask2Exe(taskId,eId,eType)). 
    mth_call_begin(id,ExeDisp,obj,__tasks_get(taskId)).
    sum taskObj:TaskObject.mth_call_end(id,ExeDisp,obj,__tasks_get_return(taskObj)).
    (taskObj==NullObj) -> mth_var_end(id,ExeDisp,obj,__msgTask2Exe_return(ERROR))
     <>
      mth_call_begin(id,MindCallbacks,__cbHolder,cbSendTask(taskId,taskObj,eId,eType)).
      sum reply:Reply.mth_call_end(id,MindCallbacks,__cbHolder,cbSendTask_return(reply)).
      (reply==OK) -> 
      mth_var_end(id,ExeDisp,obj,__msgTask2Exe_return(OK)) 
      <>
      mth_var_end(id,ExeDisp,obj,__msgTask2Exe_return(ERROR))
)
.ExeDisp___msgTask2Exe(id)
;

%-----------server----------
proc ExeQueues_pushTask(id:Nat) = 
(
    sum eType:eType,taskId:Nat,ahead:Bool,obj:ClassObject.
	mth_var_begin(id,ExeQueues,obj,pushTask(eType,taskId,ahead)). 
      mth_call_begin(id,ExeQueues,obj,__taskInQueue_keys).
      sum taskids:List(Nat).mth_call_end(id,ExeQueues,obj,__taskInQueue_keys_return(taskids)).
      (taskId in taskids) -> mth_var_end(id,ExeQueues,obj,pushTask_return)
      <>
      (
	mth_call_begin(id,ExeQueues,obj,__queues_keys).
	sum etypes:List(eType).mth_call_end(id,ExeQueues,obj,__queues_keys_return(etypes)).
	(!(eType in etypes) ->
	    mth_call_begin(id,ExeQueues,obj,__queues_addetype(eType)).
	    mth_call_end(id,ExeQueues,obj,__queues_addetype_return)
	    <>
	    internal
	 )   
	.(
	  (ahead) -> mth_call_begin(id,ExeQueues,obj,__queues_insert(eType,taskId)).
		      mth_call_end(id,ExeQueues,obj,__queues_insert_return)
	    <>
		  mth_call_begin(id,ExeQueues,obj,__queues_append(eType,taskId)).
		  mth_call_end(id,ExeQueues,obj,__queues_append_return)
         )
      ).
	mth_call_begin(id,ExeQueues,obj,__taskInQueue_set(taskId,eType)).
	mth_call_end(id,ExeQueues,obj,__taskInQueue_set_return).
	mth_var_end(id,ExeQueues,obj,pushTask_return)
)
.ExeQueues_pushTask(id)
;

%-----------DONE server----------
proc MindCallbacks_cbSendTask(id:Nat) = 
(
  sum taskId:Nat,taskObj:TaskObject,eId:Nat,eType:eType,obj:ClassObject. 
      mth_var_begin(id,MindCallbacks,obj,cbSendTask(taskId,taskObj,eId,eType)). 
  (
  mth_var_end(id,MindCallbacks,obj,cbSendTask_return(OK)).
  DISET_call_send(id,MindCluster,mindCluster,msg(ProcessTask,eId, taskObj))
  +
  mth_var_end(id,MindCallbacks,obj,cbSendTask_return(ERROR))

  )
)
.MindCallbacks_cbSendTask(id)
;


%-----------DONE server---
proc ExeDisp___fillExes(id:Nat) = 
(
  sum etype:eType,defrozeIfNeeded:Bool,obj:ClassObject.
    mth_var_begin(id,ExeDisp,obj,__fillExes(etype,defrozeIfNeeded)).
  (defrozeIfNeeded ->
   mth_call_begin(id,ExeDisp,obj,__unfreezeTasks(etype)).
   mth_call_end(id,ExeDisp,obj,__unfreezeTasks_return)
   <> internal
  ).
  mth_call_begin(id,ExeState,__states,getIdleExe(etype)).
  sum eId:Nat.mth_call_end(id,ExeState,__states,getIdleExe_return(eId))
  .loop_fillExes(id,obj,eId,etype).
  mth_var_end(id,ExeDisp,obj,__fillExes_return)
).ExeDisp___fillExes(id)
;

%-----------DONE server---
proc ExeDisp___unfreezeTasks(id:Nat) =
  sum etype:eType,obj:ClassObject.
    mth_var_begin(id,ExeDisp,obj,__unfreezeTasks(etype)).
  loop___unfreezeTasks(id,obj,0,etype)
%   mth_var_end(id,__unfreezeTasks_return)
.ExeDisp___unfreezeTasks(id)
;

proc loop___unfreezeTasks(id:Nat,obj:ClassObject,iP:Nat,etype:eType) = 
  mth_call_begin(id,ExeDisp,obj,__taskFreez_len).
  sum len:Nat.mth_call_end(id,ExeDisp,obj,__taskFreez_len_return(len)).
  (iP<len) ->
    (
      mth_call_begin(id,ExeDisp,obj,__taskFreez_get(iP)).
      sum taskid:Int.mth_call_end(id,ExeDisp,obj,__taskFreez_get_return(taskid)).
      (taskid==-1) -> mth_var_end(id,ExeDisp,obj,__unfreezeTasks_return)
      <>
      (
	mth_call_begin(id,ExeDisp,obj,__tasks_get(Int2Nat(taskid))).
	sum eTask:TaskObject.mth_call_end(id,ExeDisp,obj,__tasks_get_return(eTask)).
	(eTask==NullObj) -> mth_call_begin(id,ExeDisp,obj,__taskFreez_pop(iP)).
			      mth_call_end(id,ExeDisp,obj,__taskFreez_pop_return).
			    loop___unfreezeTasks(id,obj,iP,etype)
	  <>
	  ((etype!=None && !(etype==eType(eTask))) -> loop___unfreezeTasks(id,obj,succ(iP),etype)
	    <>
	      (
	      mth_call_begin(id,ExeDisp,obj,__taskFreez_pop(iP)).
	      mth_call_end(id,ExeDisp,obj,__taskFreez_pop_return).
	      mth_call_begin(id,ExeDisp,obj,__dispatchTask(Int2Nat(taskid),false)). 
	      sum reply:Reply.mth_call_end(id,ExeDisp,obj,__dispatchTask_return(reply)).
	      loop___unfreezeTasks(id,obj,iP,etype)
	      )
	    )
      )
    )
    <>  mth_var_end(id,ExeDisp,obj,__unfreezeTasks_return)
;

%----------- DONE server---
proc ExeDisp___dispatchTask(id:Nat) =
 (
    sum taskid:Nat,defrozeIfNeeded:Bool,obj:ClassObject.
      mth_var_begin(id,ExeDisp,obj,__dispatchTask(taskid,defrozeIfNeeded)).
    mth_call_begin(id,ExeState,__states,getExeTask(taskid)). 
    sum eid:Nat.mth_call_end(id,ExeState,__states,getExeTask_return(eid)).
  (
    (eid>0) ->
      mth_var_end(id,ExeDisp,obj,__dispatchTask_return(OK))
      <>
      (
	    mth_call_begin(id,ExeDisp,obj,__remFromFreez(taskid)). 
	    sum result:Bool.mth_call_end(id,ExeDisp,obj,__remFromFreez_return(result)).
	    mth_call_begin(id,ExeDisp,obj,__getNxtExe(taskid)). % OK
	    sum reply:Reply,etype:eType.mth_call_end(id,ExeDisp,obj,__getNxtExe_return(reply,etype)). % OK
	    (reply!=OK) ->
	      (
		% if self.__freezeOnFailedDispatch <-- model as nondeterministic choice? YES, done!
		mth_call_begin(id,ExeDisp,obj,__freezeTask(taskid,etype)).  % OK
		sum result:Bool.mth_call_end(id,ExeDisp,obj,__freezeTask_return(result)).
		((result) -> mth_var_end(id,ExeDisp,obj,__dispatchTask_return(OK)) 
			    <> mth_var_end(id,ExeDisp,obj,__dispatchTask_return(reply)))
		+ % model as nondeterministic choice, both choices have a return statement so it_returns ok
		mth_call_begin(id,ExeDisp,obj,getTask(taskid)). % OK
		sum taskObj:TaskObject.mth_call_end(id,ExeDisp,obj,getTask_return(taskObj)).
		mth_call_begin(id,ExeDisp,obj,remTaskDisp(taskid)).
		sum reply1:Reply.mth_call_end(id,ExeDisp,obj,remTaskDisp_return(reply1)).
		mth_var_end(id,ExeDisp,obj,__dispatchTask_return(ERROR))
	    ) 
	    <>
	     (
	      (etype==None) ->
		(
		  mth_call_begin(id,ExeDisp,obj,remTaskDisp(taskid)).
		  sum reply2:Reply.mth_call_end(id,ExeDisp,obj,remTaskDisp_return(reply2)).
		  mth_var_end(id,ExeDisp,obj,__dispatchTask_return(reply2))
		) 
		<>
		(
		  mth_call_begin(id,ExeDisp,obj,__execTypes_get_eTypes).
		  sum exectypes:List(eType).mth_call_end(id,ExeDisp,obj,__execTypes_get_eTypes_return(exectypes)).
		  (!(etype in exectypes) ->
		    % nondeterministic choice again, freeze task or rem task, and return from mth in both cases!
		    (
		    mth_call_begin(id,ExeDisp,obj,__freezeTask(taskid,etype)).
		    sum result1:Bool.mth_call_end(id,ExeDisp,obj,__freezeTask_return(result1)).
		    mth_var_end(id,ExeDisp,obj,__dispatchTask_return(OK))
		    +
		    mth_call_begin(id,ExeDisp,obj,remTaskDisp(taskid)).
		    sum reply1:Reply.mth_call_end(id,ExeDisp,obj,remTaskDisp_return(reply1)).
		    mth_var_end(id,ExeDisp,obj,__dispatchTask_return(reply1))
		    )
		    <> (
			mth_call_begin(id,ExeQueues,__queues,pushTask(etype,taskid,false)). 
			mth_call_end(id,ExeQueues,__queues, pushTask_return).
			mth_call_begin(id,ExeDisp,obj,__fillExes(etype,defrozeIfNeeded)).
			mth_call_end(id,ExeDisp,obj,__fillExes_return).
			mth_var_end(id,ExeDisp,obj,__dispatchTask_return(OK))
			)
		  )
	      )
	    )  
      )
    )
).ExeDisp___dispatchTask(id)
;

%-----------DONE server---
proc ExeDisp___getNxtExe(id:Nat) =
 (
    sum taskid:Nat,obj:ClassObject.mth_var_begin(id,ExeDisp,obj,__getNxtExe(taskid)).
    mth_call_begin(id,ExeDisp,obj,__tasks_get(taskid)).
    sum taskObj:TaskObject.mth_call_end(id,ExeDisp,obj,__tasks_get_return(taskObj)).
    (taskObj==NullObj) -> mth_var_end(id,ExeDisp,obj,__getNxtExe_return(ERROR,None))
	<>
      (
      mth_call_begin(id,MindCallbacks,__cbHolder,cbDispatch(taskid, taskObj,optimizationChain(taskObj))).
      sum reply:Reply,etype:eType.
	  mth_call_end(id,MindCallbacks,__cbHolder,cbDispatch_return(reply,etype)).
      (reply!=OK) -> mth_var_end(id,ExeDisp,obj,__getNxtExe_return(ERROR,None))
	<>
	mth_call_begin(id,ExeDisp,obj, __tasks_update(taskid,taskObj(taskID(taskObj),optimizationChain(taskObj),etype,status(taskObj)))).
	mth_call_end(id,ExeDisp,obj,__tasks_update_return).
	mth_var_end(id,ExeDisp,obj,__getNxtExe_return(OK,etype))
      )
  ).ExeDisp___getNxtExe(id)
;

%-----------DONE server---
proc ExeDisp_getTask(id:Nat) =
  sum taskid:Nat,obj:ClassObject.mth_var_begin(id,ExeDisp,obj,getTask(taskid)).
  mth_call_begin(id,ExeDisp,obj,__tasks_get(taskid))
  .sum taskObj:TaskObject.mth_call_end(id,ExeDisp,obj,__tasks_get_return(taskObj)).
  mth_var_end(id,ExeDisp,obj,getTask_return(taskObj))
.ExeDisp_getTask(id)
;

%-----------DONE server--- 
proc ExeDisp___freezeTask(id:Nat) =
 (
      sum taskid:Nat,eType:eType,obj:ClassObject.
      mth_var_begin(id,ExeDisp,obj,__freezeTask(taskid,eType)).
	mth_call_begin(id,ExeDisp,obj,__taskFreez_check(taskid)).
	sum isIn:Bool.mth_call_end(id,ExeDisp,obj,__taskFreez_check_return(isIn)).
	isIn -> mth_var_end(id,ExeDisp,obj,__freezeTask_return(false)) <>
	(
	  mth_call_begin(id,ExeDisp,obj,__tasks_get(taskid))
	  .sum taskObj:TaskObject.mth_call_end(id,ExeDisp,obj,__tasks_get_return(taskObj)).
	  (taskObj==NullObj) -> mth_var_end(id,ExeDisp,obj,__freezeTask_return(false)) <>
	    (
	      mth_call_begin(id,ExeDisp,obj,__taskFreez_append(taskid)).
	      mth_call_end(id,ExeDisp,obj,__taskFreez_append_return).
	      mth_var_end(id,ExeDisp,obj,__freezeTask_return(true))

	      +
		% if not isFrozen <-- modeled as a nondeterministic choice, after 10 retries
	      mth_call_begin(id,ExeDisp,obj,remTaskDisp(taskid)).
	      sum reply:Reply.mth_call_end(id,ExeDisp,obj,remTaskDisp_return(reply)).
% 	      mth_call_begin(id,cbTaskError(taskid,taskObj)).
% 	      mth_call_end(id,cbTaskError_return).
	      mth_var_end(id,ExeDisp,obj,__freezeTask_return(false))
	    )
	)
  )
.ExeDisp___freezeTask(id)
;

%-----------DONE server---
proc MindCallbacks_cbDispatch(id:Nat) = 
  sum taskid:Nat,taskObj:TaskObject, exedPath:List(eType),obj:ClassObject.
    mth_var_begin(id, MindCallbacks,obj,cbDispatch(taskid,taskObj,exedPath)).
    mth_call_begin(id,OptimizationMindHandler,MindHandler, exec_dispatch(taskid,taskObj,exedPath)).
    sum reply:Reply,nextExe:eType.
    mth_call_end(id,OptimizationMindHandler,MindHandler,exec_dispatch_return(reply,nextExe)).
  mth_var_end(id,MindCallbacks,obj, cbDispatch_return(reply,nextExe))
.MindCallbacks_cbDispatch(id)
;

%-----------CHECK server---
proc OptimizationMindHandler_exec_dispatch(id:Nat) = 
  (
      sum jid:Nat,jobState:TaskObject,pathExecuted:List(eType),obj:ClassObject.
      mth_var_begin(id, OptimizationMindHandler,obj,exec_dispatch(jid,jobState,pathExecuted)).

      (status(status(jobState))==Received) -> 
	    mth_var_end(id,OptimizationMindHandler,obj,exec_dispatch_return(OK,JobPath))
	  <>
	(status(status(jobState))!=Checking) -> 
	  mth_var_end(id,OptimizationMindHandler,obj,exec_dispatch_return(OK,None)) 
	<>
	(minorStatus(status(jobState)) in optimizationChain(jobState)) ->
	    mth_var_end(id,OptimizationMindHandler,obj,exec_dispatch_return(OK,minorStatus2eType(minorStatus(status(jobState)))))
	    <>
	         mth_var_end(id,OptimizationMindHandler,obj,exec_dispatch_return(ERROR,None))
     
  )

.OptimizationMindHandler_exec_dispatch(id)
;
 

%-----------DONE server---
proc ExeDisp___remFromFreez(id:Nat) = 
  (
      sum taskid:Nat,obj:ClassObject.
	mth_var_begin(id,ExeDisp,obj,__remFromFreez(taskid)).
	mth_call_begin(id,ExeDisp,obj,__taskFreez_index(taskid)).
	sum iP:Int.mth_call_end(id,ExeDisp,obj,__taskFreez_index_return(iP)).
	(iP==-1) -> mth_var_end(id,ExeDisp,obj,__remFromFreez_return(false))
	<>
	(
	  mth_call_begin(id,ExeDisp,obj,__taskFreez_pop(Int2Nat(iP))).
	  mth_call_end(id,ExeDisp,obj,__taskFreez_pop_return).
	  mth_call_begin(id,ExeDisp,obj,__tasks_get(taskid)).
	  sum taskObj:TaskObject.mth_call_end(id,ExeDisp,obj,__tasks_get_return(taskObj)).
	  (taskObj==NullObj) -> mth_var_begin(id,ExeDisp,obj,__remFromFreez_return(false))
	    <>
	  mth_var_end(id,ExeDisp,obj,__remFromFreez_return(true))
	)
  )
.ExeDisp___remFromFreez(id)
;

%-----------DONE server---
proc ExeState_getIdleExe(id:Nat) =
  sum etype:eType,obj:ClassObject.
    mth_var_begin(id,ExeState,obj,getIdleExe(etype)).
    mth_call_begin(id,ExeState,obj,__typeToId_eids(etype)).
    sum eids:List(Nat).mth_call_end(id,ExeState,obj,__typeToId_eids_return(eids)).
    loop_getIdleExe(id,obj,eids)
.ExeState_getIdleExe(id)
;

proc loop_getIdleExe(id:Nat,obj:ClassObject,eids:List(Nat)) =
  (
  (eids!=[]) ->
      (
      mth_call_begin(id,ExeState,obj,freeSlots(head(eids))).
      sum fs:Nat.mth_call_end(id,ExeState,obj,freeSlots_return(fs)).
      
      (fs>0) -> mth_var_end(id,ExeState,obj,getIdleExe_return(head(eids))) 
	<> loop_getIdleExe(id,obj,tail(eids))
      )
      <>
      mth_var_end(id,ExeState,obj,getIdleExe_return(0)) % None!
   )
;

%-----------DONE server---
proc loop_fillExes(id:Nat,obj:ClassObject,eId:Nat,etype:eType) = 
    (
    (eId>0) ->
       mth_call_begin(id,ExeDisp,obj,__sndTask2Exe(eId,[etype],false)).
       sum reply:Reply,tid:Nat.mth_call_end(id,ExeDisp,obj,__sndTask2Exe_return(reply,tid)).
       (!(tid==0) -> 
       mth_call_begin(id,ExeState,__states,getIdleExe(etype)).
       sum eId:Nat.mth_call_end(id,ExeState,__states,getIdleExe_return(eId))
      .loop_fillExes(id,obj,eId,etype)
      <> internal ) 
	<> internal
    )
;


%-----------DONE server---
proc OptimizationMindHandler_msg_OptimizeJobs(id:Nat) = 
  (sum jids:List(Nat),obj:ClassObject.
  DISET_call_receive(id,OptimizationMindHandler,obj,msg1(OptimizeJobs,jids)). 
  loop_msg_OptimizeJobs(id,obj,jids)
  ).OptimizationMindHandler_msg_OptimizeJobs(id)
;

%-----------DONE server---
proc loop_msg_OptimizeJobs(id:Nat,obj:ClassObject,jids:List(Nat)) =
  (jids!=[]) ->
    mth_call_begin(id,OptimizationMindHandler,obj,forgetTask(head(jids))).
    mth_call_end(id,OptimizationMindHandler,obj,forgetTask_return).
    mth_call_begin(id,OptimizationMindHandler,obj,exeTask(head(jids),taskObj(head(jids),[JobPath,JobSanity,JobScheduling],JobPath,statusBundle(Received,JobAccepted)))).
    sum reply:Reply.mth_call_end(id,OptimizationMindHandler,obj,exeTask_return(reply))
    
    .loop_msg_OptimizeJobs(id,obj,tail(jids))

  <> 
  internal
;

%-----------DONE server---
proc OptimizationMindHandler_msg_TaskDone(id:Nat) =
  (
      sum eId:Nat,taskObj:TaskObject,obj:ClassObject.
      DISET_call_receive(id,OptimizationMindHandler,obj,msg(TaskDone,eId, taskObj)). 
	(
	  mth_call_begin(id,ExeDisp,__eDispatch,taskProcd(eId,taskID(taskObj),taskObj)). 
	  sum reply1:Reply.mth_call_end(id,ExeDisp,__eDispatch,taskProcd_return(reply1))
	)
  ).OptimizationMindHandler_msg_TaskDone(id)
;

%-----------DONE server---
proc OptimizationMindHandler_msg_TaskError(id:Nat) =
  (
      sum eId:Nat,taskObj:TaskObject,obj:ClassObject.
      DISET_call_receive(id,OptimizationMindHandler,obj,msg(TaskError,eId, taskObj)).
	(
	  mth_call_begin(id,ExeDisp,__eDispatch,remTaskDisp(taskID(taskObj))).
	  sum reply:Reply.mth_call_end(id,ExeDisp,__eDispatch,remTaskDisp_return(reply))
	)
  ).OptimizationMindHandler_msg_TaskError(id)
;


%-----------DONE server---
proc OptimizationMindHandler_msg_TaskFreeze(id:Nat) =
  (
    sum eId:Nat,taskObj:TaskObject,obj:ClassObject.
      DISET_call_receive(id,OptimizationMindHandler,obj,msg(TaskFreeze,eId, taskObj)).
      (
	mth_call_begin(id,ExeDisp,__eDispatch,freezeTask(eId,taskID(taskObj),taskObj)).
	sum reply1:Reply.mth_call_end(id,ExeDisp,__eDispatch,freezeTask_return(reply1))
      )
  ).OptimizationMindHandler_msg_TaskFreeze(id)
;


%-----------DONE server---
proc OptimizationMindHandler_msg_ExeError(id:Nat) =
  sum eId:Nat,taskObj:TaskObject,obj:ClassObject.
    DISET_call_receive(id,OptimizationMindHandler,obj,msg(ExeError,eId, taskObj)).
    mth_call_begin(id,ExeDisp,__eDispatch,remExe(eId)).
    mth_call_end(id,ExeDisp,__eDispatch,remExe_return)
.OptimizationMindHandler_msg_ExeError(id)
;


proc ExeDisp_freezeTask(id:Nat) = 
  (
    sum eid:Nat,taskid:Nat,taskObj:TaskObject,obj:ClassObject.
    mth_var_begin(id,ExeDisp,obj,freezeTask(eid,taskid,taskObj)).
      mth_call_begin(id,ExeDisp,obj,__taskReceived(taskid,eid)).
      sum reply:Reply,eType:eType.mth_call_end(id,ExeDisp,obj,__taskReceived_return(reply,eType)).
      (reply!=OK) -> mth_var_end(id,ExeDisp,obj,freezeTask_return(reply))
      <>
      (
	(eType==None) ->  
	  mth_call_begin(id,ExeDisp,obj,__sndTask2Exe(eid,[],false)).
	  sum reply:Reply,tid:Nat.
	    mth_call_end(id,ExeDisp,obj,__sndTask2Exe_return(reply,tid)).
	  mth_var_end(id,ExeDisp,obj,freezeTask_return(OK))
	<>
	(
	    mth_call_begin(id,ExeDisp,obj,__sndTask2Exe(eid,[],false)).
	    sum reply:Reply,tid:Nat.
	      mth_call_end(id,ExeDisp,obj,__sndTask2Exe_return(reply,tid)).
	    mth_var_end(id,ExeDisp,obj,freezeTask_return(ERROR))
	    +
	    mth_call_begin(id,ExeDisp,obj,__freezeTask(taskid,eType)).
	    sum result:Bool.
	      mth_call_end(id,ExeDisp,obj,__freezeTask_return(result)).
	    mth_call_begin(id,ExeDisp,obj,__sndTask2Exe(eid,[eType],false)).
	    sum reply:Reply,tid:Nat.
	      mth_call_end(id,ExeDisp,obj,__sndTask2Exe_return(reply,tid)).
	    mth_var_end(id,ExeDisp,obj,freezeTask_return(OK))
	)
      )
  ).ExeDisp_freezeTask(id)
;

%-----------DONE server---
proc ExeDisp_taskProcd(id:Nat) = 
  (
    sum eId:Nat,taskId:Nat,taskObj:TaskObject,obj:ClassObject.
      mth_var_begin(id,ExeDisp,obj,taskProcd(eId,taskId,taskObj)).
      mth_call_begin(id,ExeDisp,obj,__taskReceived(taskId,eId)).
      sum reply:Reply,eType:eType.
	mth_call_end(id,ExeDisp,obj,__taskReceived_return(reply,eType)).
     (
      (reply!=OK) -> mth_var_end(id,ExeDisp,obj,taskProcd_return(reply)) 
      <>
      (
	(eType==None) -> 
	    ( 
	      mth_call_begin(id,ExeDisp,obj,__sndTask2Exe(eId,[],false)).
	      sum reply:Reply,tid:Nat.
		mth_call_end(id,ExeDisp,obj,__sndTask2Exe_return(reply,tid)).
	      mth_var_end(id,ExeDisp,obj,taskProcd_return(OK))  
	    )
	      <>
	      (
		mth_call_begin(id,MindCallbacks,__cbHolder,cbTaskProcd(taskId,taskObj,eType)).
		sum reply1:Reply.mth_call_end(id,MindCallbacks,__cbHolder,cbTaskProcd_return(reply1)).
		(
		 (reply1!=OK) -> 
		      ( 
		      mth_call_begin(id,ExeDisp,obj,__sndTask2Exe(eId,[],false)).
		      sum reply:Reply,tid:Nat.
			mth_call_end(id,ExeDisp,obj,__sndTask2Exe_return(reply,tid)).
		      mth_call_begin(id,ExeDisp,obj,remTaskDisp(taskId)).
		      sum reply2:Reply.
			mth_call_end(id,ExeDisp,obj,remTaskDisp_return(reply2))
		      .mth_var_end(id,ExeDisp,obj,taskProcd_return(reply1))
		      )
			<>
			(
			  mth_call_begin(id,ExeDisp,obj,__tasks_update(taskId,taskObj)).
			  mth_call_end(id,ExeDisp,obj,__tasks_update_return).
			  mth_call_begin(id,ExeDisp,obj,__dispatchTask(taskId,true)).
			  sum reply2:Reply.
			    mth_call_end(id,ExeDisp,obj,__dispatchTask_return(reply2)).
			  mth_call_begin(id,ExeDisp,obj,__sndTask2Exe(eId,[eType],false)).
			  sum reply:Reply,tid:Nat.
			    mth_call_end(id,ExeDisp,obj,__sndTask2Exe_return(reply,tid)).
			  mth_var_end(id,ExeDisp,obj,taskProcd_return(reply2))
			)

		 )
	      )
       )
      )
  ).ExeDisp_taskProcd(id)
;

%-----------DONE server---
proc MindCallbacks_cbTaskProcd(id:Nat) = 
  (
    sum taskid:Nat,taskObj:TaskObject,etype:eType,obj:ClassObject.
      mth_var_begin(id,MindCallbacks,obj,cbTaskProcd(taskid,taskObj,etype)).
    (
    mth_var_end(id,MindCallbacks,obj,cbTaskProcd_return(OK))
    +
    mth_var_end(id,MindCallbacks,obj,cbTaskProcd_return(ERROR))
    )
  ).MindCallbacks_cbTaskProcd(id)
;




%-----------DONE server---
proc ExeDisp___taskReceived(id:Nat) =
(
  sum taskid:Nat,eid:Nat,obj:ClassObject.
    mth_var_begin(id,ExeDisp,obj,__taskReceived(taskid,eid)).
    mth_call_begin(id,ExeDisp,obj,__tasks_get(taskid)).
    sum taskObj:TaskObject.mth_call_end(id,ExeDisp,obj,__tasks_get_return(taskObj)).
    (taskObj==NullObj) -> mth_var_end(id,ExeDisp,obj,__taskReceived_return(ERROR,None))
    <>
    (
        mth_call_begin(id,ExeState,__states,remTask(taskid,eid)).
	sum result:Bool.mth_call_end(id,ExeState,__states,remTask_return(result)).
        (!result) -> mth_var_end(id,ExeDisp,obj,__taskReceived_return(OK,None)) <>
	(
	  mth_call_begin(id,ExeDisp,obj,__idMap_get(eid)).
	  sum etypes:List(eType).mth_call_end(id,ExeDisp,obj,__idMap_get_return(etypes)).
	  !(eType(taskObj) in etypes) ->
	        mth_call_begin(id,ExeDisp,obj,remExe(eid)).
		mth_call_end(id,ExeDisp,obj,remExe_return).
		mth_call_begin(id,ExeDisp,obj,__dispatchTask(taskid,true)).
		sum reply:Reply.
		  mth_call_end(id,ExeDisp,obj,__dispatchTask_return(reply)).
		mth_var_end(id,ExeDisp,obj,__taskReceived_return(ERROR,None))
		<>
		 mth_var_end(id,ExeDisp,obj,__taskReceived_return(OK,eType(taskObj)))
	)
    )
).ExeDisp___taskReceived(id)
;

%-----------DONE server---
proc ExeDisp_remExe(id:Nat) =
(
  sum eid:Nat,obj:ClassObject.mth_var_begin(id,ExeDisp,obj,remExe(eid)).
    mth_call_begin(id,ExeDisp,obj,__idMap_keys).
    sum eids:List(Nat).
      mth_call_end(id,ExeDisp,obj,__idMap_keys_return(eids)).
    !(eid in eids) -> mth_var_end(id,ExeDisp,obj,remExe_return)
      <>
      (
	mth_call_begin(id,ExeDisp,obj,__idMap_pop(eid)).
	sum eTypes:List(eType).mth_call_end(id,ExeDisp,obj,__idMap_pop_return(eTypes)).
	loop_remExe4(id,obj,eTypes).
	mth_call_begin(id,ExeState,__states,remExeStates(eid)).
	sum tasksInExec:List(Nat).
	  mth_call_end(id,ExeState,__states,remExeStates_return(tasksInExec)).
	loop_remExe(id,obj,tasksInExec).
	mth_call_begin(id,MindCallbacks,__cbHolder,cbDisconectExe(eid)).
	mth_call_end(id,MindCallbacks,__cbHolder,cbDisconectExe_return).
	loop_remExe1(id,obj,eTypes).
	mth_var_end(id,ExeDisp,obj,remExe_return)
      )
).ExeDisp_remExe(id)
;

proc MindCluster___processTask(id:Nat) = 
(
  sum eId:Nat,taskObj:TaskObject,obj:ClassObject.
    DISET_call_receive(id,MindCluster,obj,msg(ProcessTask,eId, taskObj)). 
    (
    DISET_call_send(id,OptimizationMindHandler,MindHandler,msg(ExeError,eId,taskObj))
    +
    DISET_call_send(id,OptimizationMindHandler,MindHandler,msg(TaskError,eId,taskObj))
    +
    DISET_call_send(id,OptimizationMindHandler,MindHandler,msg(TaskFreeze,eId,taskObj))
    +
    ( (eType(taskObj)==JobPath) ->
      
      DISET_call_send(id,OptimizationMindHandler,MindHandler,msg(TaskDone,eId,taskObj(taskID(taskObj),optimizationChain(taskObj),JobPath,statusBundle(Checking,JobSanity))))
     <>
      (eType(taskObj)==JobSanity) ->
      DISET_call_send(id,OptimizationMindHandler,MindHandler,msg(TaskDone,eId,taskObj(taskID(taskObj),optimizationChain(taskObj),JobSanity,statusBundle(Checking,JobScheduling))))
     <>
     (eType(taskObj)==JobScheduling) ->
      DISET_call_send(id,OptimizationMindHandler,MindHandler,msg(TaskDone,eId,taskObj(taskID(taskObj),optimizationChain(taskObj),JobScheduling,statusBundle(Waiting,PilotAgentSubmission))))
     <>
      DISET_call_send(id,OptimizationMindHandler,MindHandler,msg(TaskError,eId,taskObj(taskID(taskObj),optimizationChain(taskObj),eType(taskObj),statusBundle(Failed,FailedMinor))))
    
    )
    )
)
. MindCluster___processTask(id)
;

%-----------DONE server---
proc loop_remExe(id:Nat,obj:ClassObject,tasksInExec:List(Nat)) =
  (tasksInExec!=[]) ->
    ( 
	mth_call_begin(id,ExeDisp,obj,__tasks_get(head(tasksInExec))).
	sum taskObj:TaskObject.mth_call_end(id,ExeDisp,obj,__tasks_get_return(taskObj)).
	(taskObj!=NullObj && eType(taskObj)!=None) ->
	  mth_call_begin(id,ExeQueues,__queues,pushTask(eType(taskObj),head(tasksInExec),true)). 
	  mth_call_end(id,ExeQueues,__queues,pushTask_return)
	 <>
	mth_call_begin(id,ExeDisp,obj,__dispatchTask(head(tasksInExec),true)).
	sum reply:Reply.mth_call_end(id,ExeDisp,obj,__dispatchTask_return(reply))
    ).loop_remExe(id,obj,tail(tasksInExec))
  <> internal
;

proc loop_remExe1(id:Nat,obj:ClassObject,eTypes:List(eType)) =
  (eTypes!=[]) ->
   mth_call_begin(id,ExeDisp,obj,__fillExes(head(eTypes),true)).
   mth_call_end(id,ExeDisp,obj,__fillExes_return)
   .loop_remExe1(id,obj,tail(eTypes))
  <> internal
;

proc loop_remExe4(id:Nat,obj:ClassObject,eTypes:List(eType)) =
  (eTypes!=[]) ->
    mth_call_begin(id,ExeDisp,obj,__execTypes_dec(head(eTypes))).
      mth_call_end(id,ExeDisp,obj,__execTypes_dec_return).
    loop_remExe4(id,obj,tail(eTypes))
  <> internal
;

%-----------DONE server---
proc MindCallbacks_cbDisconectExe(id:Nat) =
  (
  sum trid:Nat,obj:ClassObject.
    mth_var_begin(id,MindCallbacks,obj,cbDisconectExe(trid)).
  mth_call_begin(id,OptimizationMindHandler,MindHandler,exec_exeDisconnected(trid)).
  mth_call_end(id,OptimizationMindHandler,MindHandler,exec_exeDisconnected_return).
  mth_var_end(id,MindCallbacks,obj,cbDisconectExe_return)
  )
  .MindCallbacks_cbDisconectExe(id)
;

%-----------CHECK server---
proc OptimizationMindHandler_exec_exeDisconnected(id:Nat) =
  (
  sum trid:Nat,obj:ClassObject.mth_var_begin(id,OptimizationMindHandler,obj,exec_exeDisconnected(trid)).
  mth_var_end(id,OptimizationMindHandler,obj,exec_exeDisconnected_return)
  )
.OptimizationMindHandler_exec_exeDisconnected(id)
;
 
%-----------DONE server---
proc ExeState_remExe(id:Nat) =
(
      sum eid:Nat,obj:ClassObject.
	mth_var_begin(id,ExeState,obj,remExeStates(eid)).
      mth_call_begin(id,ExeState,obj,__typeToId_keys).
      sum etypes:List(eType).mth_call_end(id,ExeState,obj,__typeToId_keys_return(etypes)).
      loop_remExe2(id,obj,etypes,eid).
      mth_call_begin(id,ExeState,obj,__execTasks_taskids(eid)).
      sum taskids:List(Nat).mth_call_end(id,ExeState,obj,__execTasks_taskids_return(taskids)).
      loop_remExe3(id,obj,taskids).
      mth_call_begin(id,ExeState,obj,__execTasks_pop(eid)).
      mth_call_end(id,ExeState,obj,__execTasks_pop_return).
      mth_call_begin(id,ExeState,obj,__maxTasks_pop(eid)).
      mth_call_end(id,ExeState,obj,__maxTasks_pop_return).
    mth_var_end(id,ExeState,obj,remExeStates_return(taskids)) 
).ExeState_remExe(id)
;

proc loop_remExe2(id:Nat,obj:ClassObject,etypes:List(eType),eid:Nat) =
  (etypes!=[]) -> mth_call_begin(id,ExeState,obj,__typeToId_rem(head(etypes),eid)).
		  mth_call_end(id,ExeState,obj,__typeToId_rem_return).
		  loop_remExe2(id,obj,tail(etypes),eid)
		  <>
		  internal
;

proc loop_remExe3(id:Nat,obj:ClassObject,taskids:List(Nat)) = 
  (taskids!=[]) -> mth_call_begin(id,ExeState,obj,__taskInExec_pop(head(taskids))).
		    mth_call_end(id,ExeState,obj,__taskInExec_pop_return).
		loop_remExe3(id,obj,tail(taskids))
		<>
		internal
;

%-----------DONE server---
proc OptimizationMindHandler_exeTask(id:Nat) = 
  (
    sum taskid:Nat,taskObj:TaskObject,obj:ClassObject.
      mth_var_begin(id,OptimizationMindHandler,obj,exeTask(taskid,taskObj)).
    mth_call_begin(id,ExeDisp,__eDispatch,addTaskDisp(taskid,taskObj)).
    sum reply:Reply.mth_call_end(id,ExeDisp,__eDispatch,addTaskDisp_return(reply)).
    mth_var_end(id,OptimizationMindHandler,obj,exeTask_return(reply))
  )
  .OptimizationMindHandler_exeTask(id)
;


%-----------DONE server---
proc ExeDisp_addTask(id:Nat) = 
(
    sum taskid:Nat,taskObj:TaskObject,obj:ClassObject.
      mth_var_begin(id,ExeDisp,obj,addTaskDisp(taskid,taskObj)).
    mth_call_begin(id,ExeDisp,obj,__addTaskIfNew(taskid,taskObj)).
    sum result:Bool.mth_call_end(id,ExeDisp,obj,__addTaskIfNew_return(result)).
    (!result) -> 
	mth_call_begin(id,ExeDisp,obj,__unfreezeTasks(None)).
	mth_call_end(id,ExeDisp,obj,__unfreezeTasks_return).
	mth_var_end(id,ExeDisp,obj,addTaskDisp_return(OK))
      <>
	mth_call_begin(id,ExeDisp,obj,__dispatchTask(taskid,true)).
	sum reply:Reply.mth_call_end(id,ExeDisp,obj,__dispatchTask_return(reply)).
	mth_var_end(id,ExeDisp,obj,addTaskDisp_return(reply))
).ExeDisp_addTask(id)
;


proc ExeDisp___addTaskIfNew(id:Nat) = 
 (
  sum taskid:Nat,taskObj:TaskObject,obj:ClassObject.
    mth_var_begin(id,ExeDisp,obj,__addTaskIfNew(taskid,taskObj)).
    mth_call_begin(id,ExeDisp,obj,__tasks_keys).
    sum taskids:List(Nat).mth_call_end(id,ExeDisp,obj,__tasks_keys_return(taskids)).
    (taskid in taskids) -> mth_var_end(id,ExeDisp,obj,__addTaskIfNew_return(false))
    <>
    (
      mth_call_begin(id,ExeDisp,obj,__tasks_add(taskObj)).
	mth_call_end(id,ExeDisp,obj,__tasks_add_return).
      mth_var_end(id,ExeDisp,obj,__addTaskIfNew_return(true))
    )
  ).ExeDisp___addTaskIfNew(id)
;

%-----------DONE server---
proc JobManagerHandler_submitJob(id:Nat) =
  mth_begin(id,JobManagerHandler,JobManager,submitJob([22])).
  mth_call_begin(id,JobManagerHandler,JobManager,__sendNewJobsToMind([22])).
  mth_call_end(id,JobManagerHandler,JobManager,__sendNewJobsToMind_return).
  mth_end(id,JobManagerHandler,JobManager,submitJob_return).
  mth_begin(id,JobManagerHandler,JobManager,submitJob([333,444])).
  mth_call_begin(id,JobManagerHandler,JobManager,__sendNewJobsToMind([333,444])).
  mth_call_end(id,JobManagerHandler,JobManager,__sendNewJobsToMind_return).
  mth_end(id,JobManagerHandler,JobManager,submitJob_return)
;


%-----------DONE server---
proc JobManagerHandler___sendNewJobsToMind(id:Nat) = 
  (
    sum jobIDs:List(Nat),obj:ClassObject.
      mth_var_begin(id,JobManagerHandler,obj,__sendNewJobsToMind(jobIDs)).
    DISET_call_send(id,OptimizationMindHandler,MindHandler,msg1(OptimizeJobs,jobIDs)).
    mth_var_end(id,JobManagerHandler,obj,__sendNewJobsToMind_return)
  )
  .JobManagerHandler___sendNewJobsToMind(id)
;

%-----------CHECK server---
proc JobManagerHandler_killJob(id:Nat) = % THIS SHOULD CAUSE RACE CONDITIONS
  sum jobID:Nat,obj:ClassObject.
    mth_var_begin(id,JobManagerHandler,obj,killJob(jobID)).
%   mth_call_begin(id,db_setStatus(jobID,statusBundle(Killed,MarkedForTermination))).
%   mth_call_end(id,db_setStatus_return).
  mth_var_end(id,JobManagerHandler,obj,killJob_return)
;


%-----------CHECK server---
proc JobManager_resetJob(id:Nat) = 
  sum jobID:Nat,obj:ClassObject.
    mth_var_begin(id,JobManagerHandler,obj,resetJobAPI(jobID)).	
  DISET_call_send(id,OptimizationMindHandler,MindHandler,msg1(OptimizeJobs,[jobID])).
  mth_var_end(id,JobManagerHandler,obj,resetJobAPI_return)
;


%-----------DONE server---
proc OptimizationMindHandler_forgetTask(id:Nat) = 
( 
 sum taskid:Nat,obj:ClassObject.
  mth_var_begin(id,OptimizationMindHandler,obj,forgetTask(taskid)).
	mth_call_begin(id,ExeDisp,__eDispatch,remTaskDisp(taskid)).
	sum reply:Reply.
	 mth_call_end(id,ExeDisp,__eDispatch,remTaskDisp_return(reply)).
  mth_var_end(id,OptimizationMindHandler,obj,forgetTask_return)
)
.OptimizationMindHandler_forgetTask(id)
;

%-----------DONE server---
proc OptimizationMindHandler_conn_connected(id:Nat) = 
  (
    mth_begin(id,OptimizationMindHandler,MindHandler,conn_connected(1,[JobPath,JobSanity,JobScheduling],1)).
    mth_call_begin(id,ExeDisp,__eDispatch,addExe(11,[JobPath,JobSanity,JobScheduling],1)).

    mth_call_end(id,ExeDisp,__eDispatch,addExe_return).
    mth_call_begin(id,OptimizationMindHandler,MindHandler,exec_exeConnected(11,[JobPath,JobSanity,JobScheduling])).

    sum reply:Reply.mth_call_end(id,OptimizationMindHandler,MindHandler,exec_exeConnected_return(reply)).
    mth_end(id,OptimizationMindHandler,MindHandler,conn_connected_return(reply))
  )
;

%-----------DONE server---
proc OptimizationMindHandler_conn_drop(id:Nat) = 
(
  sum trid:Nat,obj:ClassObject.
    mth_var_begin(id,OptimizationMindHandler,obj,conn_drop(trid)).
  mth_call_begin(id,ExeDisp,__eDispatch,remExe(trid)).
  mth_call_end(id,ExeDisp,__eDispatch,remExe_return).
  mth_var_end(id,OptimizationMindHandler,obj,conn_drop_return)
)
.OptimizationMindHandler_conn_drop(id)
;

%-----------DONE server---
proc ExeDisp_addExe(id:Nat) =
(  
    sum eid:Nat,eTypes:List(eType),maxTasks:Nat,obj:ClassObject.
      mth_var_begin(id,ExeDisp,obj,addExe(eid,eTypes,maxTasks)).
      mth_call_begin(id,ExeDisp,obj,__idMap_keys).
      sum eids:List(Nat).mth_call_end(id,ExeDisp,obj,__idMap_keys_return(eids)).
      (eid in eids) -> mth_var_end(id,ExeDisp,obj,addExe_return) <>
      (
	mth_call_begin(id,ExeDisp,obj,__idMap_set(eid,eTypes)).
	  mth_call_end(id,ExeDisp,obj,__idMap_set_return).
	mth_call_begin(id,ExeState,__states,addExeState(eid,eTypes,maxTasks)).
	mth_call_end(id,ExeState,__states,addExeState_return).
	loop_addExe(id,obj,eTypes).
	loop_addExe2(id,obj,eTypes).
	mth_var_end(id,ExeDisp,obj,addExe_return)
      )
).ExeDisp_addExe(id)
;

%-----------DONE server---
proc loop_addExe(id:Nat,obj:ClassObject,eTypes:List(eType)) =
  (eTypes!=[]) ->
   mth_call_begin(id,ExeDisp,obj,__execTypes_get_eTypes).
   sum etypes:List(eType).mth_call_end(id,ExeDisp,obj,__execTypes_get_eTypes_return(etypes)).
   (!(head(eTypes) in etypes) -> 
	(
	  mth_call_begin(id,ExeDisp,obj,__execTypes_add(head(eTypes))).
	  mth_call_end(id,ExeDisp,obj,__execTypes_add_return).
	  mth_call_begin(id,ExeDisp,obj,__execTypes_inc(head(eTypes))).
	  mth_call_end(id,ExeDisp,obj,__execTypes_inc_return)
	)
      <> internal)
   .loop_addExe(id,obj,tail(eTypes))
  <> internal
;

proc loop_addExe2(id:Nat,obj:ClassObject,eTypes:List(eType)) =
(eTypes!=[]) ->
  (
   mth_call_begin(id,ExeDisp,obj,__fillExes(head(eTypes),true)).
   mth_call_end(id,ExeDisp,obj,__fillExes_return)
   .loop_addExe2(id,obj,tail(eTypes))
   ) <> internal
;


%-----------DONE server---
proc ExeState_addExe(id:Nat) = 
  (
    sum eid:Nat,eTypes:List(eType),maxTasks:Nat,obj:ClassObject.
      mth_var_begin(id,ExeState,obj,addExeState(eid,eTypes,maxTasks)). 
      mth_call_begin(id,ExeState,obj,__maxTasks_add(eid,max(1,maxTasks))).
      mth_call_end(id,ExeState,obj,__maxTasks_add_return).
      mth_call_begin(id,ExeState,obj,__execTasks_keys).
      sum eids:List(Nat).mth_call_end(id,ExeState,obj,__execTasks_keys_return(eids)).
      (!(eid in eids) -> 
	  mth_call_begin(id,ExeState,obj,__execTasks_addeid(eid)).
	  mth_call_end(id,ExeState,obj,__execTasks_addeid_return) 
	  <> internal)
    .loop_addExe1(id,obj,eTypes,eid)
    .mth_var_end(id,ExeState,obj,addExeState_return)
  )
  .ExeState_addExe(id)
;

proc loop_addExe1(id:Nat,obj:ClassObject,etypes:List(eType),eid:Nat) = 
  (etypes!=[]) -> 
  (
    mth_call_begin(id,ExeState,obj,__typeToId_keys).
    sum etypes1:List(eType).mth_call_end(id,ExeState,obj,__typeToId_keys_return(etypes1)).
    (!(head(etypes) in etypes1) -> mth_call_begin(id,ExeState,obj,__typeToId_addeType(head(etypes))).
    mth_call_end(id,ExeState,obj,__typeToId_addeType_return)
			      <> internal)
	.mth_call_begin(id,ExeState,obj,__typeToId_addeid(head(etypes),eid))
	.mth_call_end(id,ExeState,obj,__typeToId_addeid_return)
	.loop_addExe1(id,obj,tail(etypes),eid)
  ) <> internal
;

%-----------CHECK server---
proc OptimizationMindHandler_exec_exeConnected(id:Nat) =
  (
      sum trid:Nat,eTypes:List(eType),obj:ClassObject.
      mth_var_begin(id,OptimizationMindHandler,obj,exec_exeConnected(trid,eTypes)).
      mth_call_begin(id,OptimizationMindHandler,obj,__loadJobs(eTypes)).
      sum reply:Reply.
	mth_call_end(id,OptimizationMindHandler,obj,__loadJobs_return(reply)).
      mth_var_end(id,OptimizationMindHandler,obj,exec_exeConnected_return(reply))
  )
  .OptimizationMindHandler_exec_exeConnected(id)
;

%-----------CHECK server---
% !! this is also periodic: result = ThreadScheduler.gThreadScheduler.addPeriodicTask( period, cls.__loadJobs )
proc OptimizationMindHandler___loadJobs(id:Nat) = 
  (
      sum etypes:List(eType),obj:ClassObject.
	mth_var_begin(id,OptimizationMindHandler,obj,__loadJobs(etypes)).
      (
      (etypes==[]) ->
	  ( 
	  mth_call_begin(id,OptimizationMindHandler,obj,getExesConnected).
	  sum etypes:List(eType).
	    mth_call_end(id,OptimizationMindHandler,obj,getExesConnected_return(etypes)) 
	  ) <> 
	internal) .
      (etypes==[]) -> mth_var_end(id,OptimizationMindHandler,obj,__loadJobs_return(OK)) 
	<> 
	(
	  mth_call_begin(id,OptimizationMindHandler,obj,getTaskIds).	
	  sum knownJids:List(Nat).mth_call_end(id,OptimizationMindHandler,obj,getTaskIds_return(knownJids)).
	  loop___loadJobs(id,obj,[],knownJids). % THIS IS FIXED, CHANGE!!! THAT IS, UNCOMMENT BELOW
% 	  loop___loadJobs(id,[555,666],knownJids). % THIS IS FIXED, CHANGE!!! THAT IS, UNCOMMENT BELOW
% 	  mth_call_begin(id,getTaskIds).
% 	  sum knownJids:List(Nat).mth_call_end(id,getTaskIds_return(knownJids)).
% 	  loop___loadJobs(id,[],knownJids).
% 	  loop___loadJobs(id,[555,666],knownJids).

	  mth_var_end(id,OptimizationMindHandler,obj,__loadJobs_return(OK))
	)
  )
  .OptimizationMindHandler___loadJobs(id)
;

proc loop___loadJobs(id:Nat,obj:ClassObject,jidList:List(Nat),knownJids:List(Nat)) =
  (jidList!=[]) ->
   (
     (!(head(jidList) in knownJids) -> 
      (
	mth_call_begin(id,OptimizationMindHandler,obj,exeTask(head(jidList),taskObj(head(jidList),[JobPath,JobSanity,JobScheduling],JobPath,statusBundle(Received,JobAccepted)))). % cls.exeTask( jid, CachedJobState( jid ) ) <-- CachedJobState = true <- fixed!
	sum reply:Reply.mth_call_end(id,OptimizationMindHandler,obj,exeTask_return(reply))
    ) <> internal)
  .loop___loadJobs(id,obj,tail(jidList),knownJids)
  )
   <> 
  internal
;


%-----------DONE server---
proc ExeDisp_getTaskIds(id:Nat) =
  sum obj:ClassObject.mth_var_begin(id,ExeDisp,obj,getTaskIds).
    mth_call_begin(id,ExeDisp,obj,__tasks_keys).
    sum taskids:List(Nat).mth_call_end(id,ExeDisp,obj,__tasks_keys_return(taskids)).
  mth_var_end(id,ExeDisp,obj,getTaskIds_return(taskids))
.ExeDisp_getTaskIds(id);

%-----------DONE server---
proc ExeDisp_getExesConnected(id:Nat) =
  sum obj:ClassObject.mth_var_begin(id,ExeDisp,obj,getExesConnected).
    mth_call_begin(id,ExeDisp,obj,__execTypes_getExesConnected).
    sum etypes:List(eType).
      mth_call_end(id,ExeDisp,obj,__execTypes_getExesConnected_return(etypes)).
  mth_var_end(id,ExeDisp,obj,getExesConnected_return(etypes))
.ExeDisp_getExesConnected(id);

%-----------DONE server---
proc ExeDisp___doPeriodicStuff(id:Nat) =
%   mth_var_begin(id,__doPeriodicStuff).
  % __eDispatch1 instance because this runs in a separate thread
    mth_call_begin(id,ExeDisp,__eDispatch1,__unfreezeTasks(None)).
    mth_call_end(id,ExeDisp,__eDispatch1,__unfreezeTasks_return).
%     mth_call_begin(id,ExeDisp,__eDispatch1,__execTypes_get_eTypes).
%     sum etypes:List(eType).
%     mth_call_end(id,ExeDisp,__eDispatch1,__execTypes_get_eTypes_return(etypes)).
%     loop___doPeriodicStuff(id,etypes).
%   mth_var_end(id,__doPeriodicStuff_return) 
% .
ExeDisp___doPeriodicStuff(id);

%-----------DONE server---
% proc loop___doPeriodicStuff(id:Nat,etypes:List(eType)) = 
%   (etypes!=[]) -> (
% 		  mth_call_begin(id,ExeDisp,__eDispatch1,__fillExes(head(etypes),true)). 
% 		  mth_call_end(id,ExeDisp,__eDispatch1,__fillExes_return).
% 		  loop___doPeriodicStuff(id,tail(etypes))
% 		  )
% 		  <>
% 		  internal
% ;


proc mthsP(id:Nat) = 
    		ExeState_mem(id,[],[],[],[]) ||
		ExeQueues_mem(id,[],[]) ||
		ExeDisp_mem(id,[],[],[],[]) ||
% 		ExeDisp_mem(id,[],
% 		[__tasks1(333,taskObj(333,[JobPath,JobSanity],JobPath,statusBundle(Received,JobAccepted))),
% 		__tasks1(444,taskObj(444,[JobPath,JobSanity],JobPath,statusBundle(Received,JobAccepted)))]
% 		,[333,444],[]) ||

		ExeDisp_remTask(id) || 
		ExeState_getExeTask(id) ||
		ExeState_remTask(id) ||
		ExeState_addTask(id) ||
		ExeState_freeSlots(id) ||
		ExeState_getIdleExe(id) ||
		ExeState_addExe(id) ||

		ExeQueues_delTask(id) ||
		ExeQueues_popTask(id) ||
		ExeQueues_pushTask(id) ||

		ExeDisp___msgTask2Exe(id) ||
		ExeDisp_addTask(id) ||
		ExeDisp___addTaskIfNew(id) ||
		ExeDisp___fillExes(id) ||
		ExeDisp___dispatchTask(id) ||
		ExeDisp___unfreezeTasks(id) ||
		ExeDisp___remFromFreez(id) ||
		ExeDisp___getNxtExe(id) ||
		ExeDisp_getTask(id) ||
		ExeDisp___freezeTask(id) ||
		ExeDisp_freezeTask(id) ||
		ExeDisp___taskReceived(id) ||
		ExeDisp_addExe(id) ||
		ExeDisp___sndTask2Exe(id) ||
		ExeDisp_taskProcd(id) ||
		ExeDisp___doPeriodicStuff(id) ||
		ExeDisp_getExesConnected(id) ||
		ExeDisp_getTaskIds(id) ||

		MindCallbacks_cbDispatch(id) ||
		MindCallbacks_cbSendTask(id) ||
		MindCallbacks_cbTaskProcd(id) ||

		MindCluster___processTask(id) ||

		JobManagerHandler_submitJob(id) ||
		JobManagerHandler___sendNewJobsToMind(id) ||
		JobManagerHandler_killJob(id) ||
		JobManager_resetJob(id) ||

		OptimizationMindHandler_forgetTask(id) || %OK
		OptimizationMindHandler_conn_drop(id) || %OK
		OptimizationMindHandler_conn_connected(id) || %ОК
		OptimizationMindHandler_msg_TaskError(id) || %OK
		OptimizationMindHandler_msg_TaskFreeze(id) || %OK
		OptimizationMindHandler_msg_ExeError(id) || %OK
		OptimizationMindHandler___loadJobs(id) ||
		OptimizationMindHandler_exec_exeConnected(id) ||
		OptimizationMindHandler_exeTask(id) || %OK
		OptimizationMindHandler_exec_dispatch(id) ||
		OptimizationMindHandler_msg_OptimizeJobs(id) ||
		OptimizationMindHandler_msg_TaskDone(id) %OK


;

% proc P(id:Nat) = 
%     mth_call_begin(id,__remFromFreez(1)) 
%    .sum result:Bool.mth_call_end(id,__remFromFreez_return(result))
% ;
% 
proc All(id:Nat) = 
mthsP(id);

init hide ({internal},
 allow({internal,mth_begin,mth_end, DISET_call
% ,mth_begin|mth_begin,mth_begin|mth_end,mth_end|mth_end
% ,mth_begin|mth_begin,mth_begin|mth_end
%,mth_end|mth_end
%     block({mth_call_begin,mth_call_end,mth_var_begin,mth_var_end,DISET_call_send,DISET_call_receive
%  block({mth_var_begin,mth_var_end,mth_call_begin,mth_call_end,DISET_call_receive,DISET_call_send
},
comm({
mth_call_begin|mth_var_begin->
mth_begin,
mth_call_end|mth_var_end->
mth_end,
DISET_call_send|DISET_call_receive->
DISET_call
}, 
				All(1)

)));

