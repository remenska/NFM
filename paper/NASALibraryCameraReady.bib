@comment{x-kbibtex-personnameformatting=<%l><, %f>}

@inproceedings{conf/ifm/PickinJ04,
	added-at = "2011-07-06T00:00:00.000+0200",
	author = "Pickin, Simon and J{\'e}z{\'e}quel, Jean-Marc",
	booktitle = "{IFM}",
	crossref = "conf/ifm/2004",
	editor = "Boiten, Eerke A. and Derrick, John and Smith, Graeme",
	interhash = "83b7af5981720be0033a528ba42dc7d1",
	intrahash = "2a79d4328165ce4a7d9dc1570906ef4d",
	isbn = "3-540-21377-5",
	keywords = "dblp",
	pages = "481--500",
	publisher = "Springer",
	series = "{Lecture Notes in Computer Science}",
	timestamp = "2011-07-06T00:00:00.000+0200",
	title = "{Using UML Sequence Diagrams as the Basis for a Formal Test Description Language.}",
	url = "http://dblp.uni-trier.de/db/conf/ifm/ifm2004.html#PickinJ04; http://dx.doi.org/10.1007/978-3-540-24756-2_26; http://www.bibsonomy.org/bibtex/22a79d4328165ce4a7d9dc1570906ef4d/dblp",
	volume = 2999,
	year = 2004
}

@article{ProcessesWithData,
	author = "Groote, J.F. and Willemse, T.A.C.",
	journal = "SCP",
	pages = "251--273",
	title = "{Model-checking processes with data}",
	volume = "56",
	year = "2005"
}

@inproceedings{GaravelLMS11,
	author = "Garavel, Hubert and Lang, Fr{\'e}d{\'e}ric and Mateescu, Radu and Serwe, Wendelin",
	bibsource = "DBLP, http://dblp.uni-trier.de",
	booktitle = "{TACAS '11}",
	title = "{CADP 2010: A {T}oolbox for the {C}onstruction and {A}nalysis of {D}istributed {P}rocesses}"
}

@article{lazuar2010tool,
	author = "Laz\u{a}r, C.L. and Laz\u{a}r, I. and P{\^a}rv, B. and Motogna, S. and Czibula, I.G.",
	journal = "Int. J. of Computers, Communications \& Control",
	number = "5",
	title = "{Tool Support for f{UML} Models}",
	volume = "5",
	year = "2010"
}

@inproceedings{Diskin06mappings,
	author = "Diskin, Zinovy and Dingel, Juergen",
	booktitle = "{In Proc. {MODELS}'06}",
	publisher = "Springer",
	title = "{Mappings, maps and tables: Towards formal semantics for associations in UML2}"
}

@article{fUML,
	citeulike-article-id = "4195102",
	citeulike-linkout-0 = "http://www.omg.org/docs/ad/08-03-09.pdf",
	citeulike-linkout-1 = "http://www.omg.org/spec/FUML/1.0/Beta1/",
	keywords = "2008; model-theory; mof; omg-standard; uml; uml-executable",
	posted-at = "2009-03-19 13:45:42",
	priority = "2",
	title = "{Semantics of a Foundational Subset for Executable UML Models (FUML)}",
	url = "http://www.omg.org/docs/ad/08-03-09.pdf",
	year = "2008"
}

@inproceedings{Broy:2006:USS:1762828.1762881,
	acmid = "1762881",
	author = "Broy, Manfred and Crane, Michelle L. and Dingel, Juergen and Hartman, Alan and Rumpe, Bernhard and Selic, Bran",
	booktitle = "{Proc. {MoDELS}'06}",
	keywords = "UML; formal semantics",
	location = "Genoa, Italy",
	publisher = "Springer-Verlag",
	title = "{2nd {UML} 2 {S}emantics {S}ymposium: {F}ormal {S}emantics for UML}"
}

@incollection{knapp_07_model,
	abstract = "{The UML\&nbsp;2.0 integrates a dialect of High-Level Message Sequence Charts (HMSCs) for interaction modelling. We describe a translation of UML\&nbsp;2.0 interactions into automata for model checking whether an interaction can be satisfied by a given set of message exchanging UML state machines. The translation supports basic interactions, state invariants, strict and weak sequencing, alternatives, ignores, and loops as well as forbidden interaction fragments. The translation is integrated into the UML model checking tool Hugo/RT.}",
	author = "Knapp, Alexander and Wuttke, Jochen",
	citeulike-article-id = "2942432",
	citeulike-linkout-0 = "http://dx.doi.org/10.1007/978-3-540-69489-2\_6",
	citeulike-linkout-1 = "http://dx.doi.org/10.1007/978-3-540-69489-2\_6",
	doi = "10.1007/978-3-540-69489-2_6",
	journal = "Models in Software Engineering",
	keywords = "2007; _to\_download; model\_checking; statecharts; uml",
	pages = "42--51",
	posted-at = "2008-06-30 01:31:21",
	priority = "2",
	title = "{Model Checking of UML 2.0 Interactions}",
	url = "http://dx.doi.org/10.1007/978-3-540-69489-2\_6",
	year = "2007"
}

@book{DIRAC_ReliableDataMaangement,
	author = "Smith, A.C. and Tsaregorodtsev, A.",
	booktitle = "{Proc. CHEP}",
	publisher = "Proc. CHEP 2007",
	title = "{{DIRAC}: Reliable Data Management for {LHC}b}"
}

@techreport{UMLSpec15,
	address = "Needham, MA, USA",
	author = "(OMG), Object Management Group",
	title = "{Unified Modelling Language Specification version 1.5 }",
	year = "2003"
}

@techreport{UML20,
	author = "OMG",
	series = "{ptc/03-08-02}",
	title = "{UML 2.0 Superstructure Specification }",
	year = "2004"
}

@misc{Micskei_uml2.0,
	author = "Micskei, Zolt{\'a}n and Waeselynck, H{\'e}l{\`e}ne",
	title = "{UML 2.0 Sequence Diagrams ' Semantics}",
	year = ""
}

@url{UML2.4,
	author = "OMG",
	note = "http://www.omg.org/spec",
	title = "{UML {S}pecifications}",
	url = "http://www.omg.org/spec"
}

@url{UML2.4_superstructure,
	author = "OMG",
	note = "http://www.omg.org/spec/UML/2.4/Superstructure",
	number = "ptc/2010-11-14",
	title = "{UML2.4 Superstructure Specification$\break$}",
	url = "http://www.omg.org/spec/UML/2.4/Superstructure/Beta2/PDF"
}

@url{UML2.4_infrastructure,
	author = "OMG",
	number = "ptc/2010-11-16",
	title = "{UML 2.4 Infrastructure Specification}",
	url = "http://www.omg.org/spec/UML/2.4/Infrastructure/Beta2/PDF"
}

@misc{Engels01rule-basedspecification,
	abstract = "this paper, we discuss the issue of consistency of behavioral models in the UML and present techniques for specifying and analyzing consistency. Using meta-model rules we transform elements of UML models intoasemantic domain. Then, consistency constraints can by speci ed and validated using the language and the tools of the semantic domain. This general methodology is exempli ed by the problem of protocol statechart inheritance",
	author = "Engels, Gregor and Heckel, Reiko and K{\"u}ster, Jochen Malte",
	title = "{Rule-based Specification of Behavioral Consistency Based on the UML Meta-Model}",
	year = "2001"
}

@inproceedings{Ho:1999:UEU:519308.786893,
	abstract = "Advanced users often find themselves restricted by the limited facilities of most UML CASE tools when they want to do complex manipulations of UML model. E.g. apply design patterns, generate code for simulation and validation etc. In this paper, we describe UMLAUT, a freely available UML transformation framework, for manipulating UML models. These manipulations are expressed as algebraic compositions of reified elementary transformations. They are thus open to extensions through inheritance and aggregation. To illustrate the interest of our approach, we show how the model of an UML distributed application can be automatically transformed into a labeled transition system validated using advanced protocol validation technology.",
	acmid = "786893",
	address = "Washington, DC, USA",
	author = "Ho, Wai Ming and J{\'e}z{\'e}quel, Jean-Marc and Guennec, Alain Le and Pennaneac'h, Fran\c{c}ois",
	booktitle = "{Proceedings of the 14th IEEE international conference on Automated software engineering}",
	isbn = "0-7695-0415-9",
	keywords = "UML Tools; Model Transformation; Formal techniques; Validation Tools; Object-Orientation; Functional Programming",
	pages = "275--",
	publisher = "IEEE Computer Society",
	series = "{ASE '99}",
	title = "{UMLAUT: An Extendible UML Transformation Framework}",
	url = "http://dl.acm.org/citation.cfm?id=519308.786893",
	year = "1999"
}

@article{DBLP:journals/tse/Milicev02,
	abstract = "One of the most important features of modeling tools is generationof output. The output may be documentation, source code, net list, orany other presentation of the system being constructed. The process ofoutput generation may be considered as automatic creation of a targetmodel from a model in the source modeling domain. This translation doesnot need to be accomplished in a single step. Instead, a tool maygenerate multiple intermediate models as other views to the system.These models may be used either as better descriptions of the system, oras a descent down the abstraction levels of the user-defined model,gradually leading to the desired implementation. If the modeling domainshave their metamodels defined in terms of object-oriented concepts, themodels consist of instances of the abstractions from the metamodels andlinks between them. A new technique for specifying the mapping betweendifferent modeling domains is proposed in the paper. It uses UML objectdiagrams that show the instances and links of the target model thatshould be created during automatic translations. The diagrams areextended with the proposed concepts of conditional, repetitive,parameterized, and polymorphic model creation, implemented by thestandard UML extensibility mechanisms. Several examples from differentengineering domains are provided, illustrating the applicability andbenefits of the approach. The first experimental results show that thespecifications may lead to better reuse and shorter production time whendeveloping customized output generators",
	author = "Milicev, Dragan",
	bibsource = "DBLP, http://dblp.uni-trier.de",
	journal = "IEEE Trans. Software Eng.",
	number = "4",
	pages = "413--430",
	title = "{Automatic Model Transformations Using Extended UML Object Diagrams in Modeling Environments}",
	url = "http://doi.ieeecomputersociety.org/10.1109/TSE.2002.995438",
	volume = "28",
	year = "2002"
}

@inproceedings{Akehurst:2002:RAD:647246.719619,
	abstract = "Metamodelling is becoming a standard way of defining languages such as the UML. A language definition distinguishes between concrete syntax, abstract syntax and semantics domain. It is possible to define all three using a metamodelling approach, but it is less clear how to define the transformations between them. This paper proposes an approach which uses metamodelling patterns that capture the essence of mathematical relations. It shows how these patterns can be used to define both the relationship between concrete syntax and abstract syntax, and between abstract syntax and semantics domain, for a fragment of UML. A goal of the approach is to provide a complete specification of a language from which intelligent tools can be generated. The extent to which the approach meets this goal is discussed in the paper.",
	acmid = "719619",
	address = "London, UK, UK",
	author = "Akehurst, D. H. and Kent, Stuart",
	booktitle = "{Proceedings of the 5th International Conference on The Unified Modeling Language}",
	isbn = "3-540-44254-5",
	numpages = "16",
	pages = "243--258",
	publisher = "Springer-Verlag",
	series = "{UML '02}",
	title = "{A Relational Approach to Defining Transformations in a Metamodel}",
	url = "http://dl.acm.org/citation.cfm?id=647246.719619",
	year = "2002"
}

@inproceedings{Csertan:2002:VVA:786769.787011,
	abstract = "The VIATRA (VIsual Automated model TRAnsformations) framework is the core of a transformation-based veri-fication and validation environment for improving the quality of systems designed using the Unified Modeling Language by automatically checking consistency, completeness, and dependability requirements. In the current paper, we present an overview of (i) the major design goals and decisions, (ii) the underlying formal methodology based on metamodeling and graph transformation (iii) the software architecture based upon the XMI standard, (iv) and several benchmark applications of the VIATRA framework.",
	acmid = "787011",
	address = "Washington, DC, USA",
	author = "Csert{\'a}n, Gy{\"o}rgy and Huszerl, G{\'a}bor and Majzik, Istv{\'a}n and Pap, Zsigmond and Pataricza, Andr{\'a}s and Varr{\'o}, D{\'a}niel",
	booktitle = "{Proceedings of the 17th IEEE international conference on Automated software engineering}",
	isbn = "0-7695-1736-6",
	pages = "267--",
	publisher = "IEEE Computer Society",
	series = "{ASE '02}",
	title = {{VIATRA " Visual Automated Transformations for Formal Verification and Validation of UML Models}},
	url = "http://dl.acm.org/citation.cfm?id=786769.787011",
	year = "2002"
}

@article{Varro:2002:DAT:607029.607034,
	abstract = "The design process of complex systems requires a precise checking of the functional and dependability attributes of the target design. The growing complexity of systems necessitates the use of formal methods, as the exhaustiveness of checks performed by the traditional simulation and testing is insufficient.For this reason, the mathematical models of various formal verification tools are automatically derived from UML-diagrams of the model by mathematical transformations guaranteeing a complete consistency between the target design and the models of verification and validation tools.In the current paper, a general framework for an automated model transformation system is presented. The method starts from a uniform visual description and a formal proof concept of the particular transformations by integrating the powerful computational paradigm of graph transformation, planner algorithms of artificial intelligence, and various concepts of computer engineering.",
	acmid = "607034",
	address = "Amsterdam, The Netherlands, The Netherlands",
	author = "Varr{\'o}, D{\'a}niel and Varr{\'o}, Gergely and Pataricza, Andr{\'a}s",
	doi = "10.1016/S0167-6423(02)00039-4",
	issn = "0167-6423",
	issue_date = "August 2002",
	journal = "Sci. Comput. Program.",
	keywords = "MOF; UML; dependability; graph transformation; model transformation; planner algorithms; system verification; validation; visual languages",
	month = aug,
	number = "2",
	numpages = "23",
	pages = "205--227",
	publisher = "Elsevier North-Holland, Inc.",
	title = "{Designing the automatic transformation of visual languages}",
	url = "http://dx.doi.org/10.1016/S0167-6423(02)00039-4",
	volume = "44",
	year = "2002"
}

@inproceedings{Pickin02systemtest,
	abstract = {The object-oriented software development process is increasingly used for the construction of both centralised and distributed systems. As yet, however, formal V\&V techniques have not found much use in the object-oriented context, in spite of the fact that some are now mature enough to be exercised in real world applications. In this paper, we investigate the use of formal validation in a UML-based development process. We present a method and a tool for automated synthesis of test cases from generic test scenarios and a design model of the application, remaining entirely within the UML framework. The underlying "on the fly" test synthesis algorithms are based on the input/output labelled transition formalism, which is particularly appropriate for modelling applications which may involve asynchronous communication. We illustrate the system test synthesis process using an Air Traffic Control software case study.},
	author = "Pickin, Simon and others",
	booktitle = "{In Proc. FORTE{\rq}02}",
	pages = "97--113",
	publisher = "Springer-Verlag",
	title = "{System Test Synthesis from UML Models of Distributed Software}",
	year = "2002"
}

@misc{Younsi_fromuml,
	abstract = "A main challenge in software development process is to bring error detection to first phases of the software life cycle. The Verification and Validation (V\&V) of UML diagrams is of interest in a number of applications such as detecting flaws at the design phase for software security, where it is crucial to detect security flaws before they can be exploited. In this paper, we propose an approach using a transformation tool to create a PROMELA code based model from UML interactions expressed in sequence diagram to use in SPIN model checker to simulate the execution and to verify properties written in Linear Temporal Logic (LTL). Graph transformation is used as an approach of model transformation to propose a graph grammar for the translation using AToM3 tool. Key words UML2.0, Sequence diagram, Graph transformation,",
	author = "Younsi, Nadia and Amirat, Abdelkrim and Menasria, Ahcene",
	title = "{From UML 2.0 Sequence Diagrams to PROMELA code by Graph Transformation Using AToM 3}"
}

@inproceedings{10.1109/APSEC.2005.7,
	abstract = "The lack of a precise semantics for UML activity diagrams makes the reasoning on models constructed using such diagrams infeasible. However, such diagrams are widely used in domains that require a certain degree of confidence. Due to economical interests, the business domain is one of these. To enhance confidence level of UML activity diagrams, this paper provides a formal definition of their syntax and semantics. The main interest of our approach is that we chose UML activity diagrams, which are recognized to be more tractable by engineers, and we extend them with timing constraints. We outline the translation of our semantics into the PROMELA input language of the SPIN model checker which can be used to check several properties.",
	author = "Guelfi, Nicolas and Mammar, Amel",
	booktitle = "{Proc. APSEC '05}",
	doi = "10.1109/APSEC.2005.7",
	pages = "283--290",
	title = "{A Formal Semantics of Timed Activity Diagrams and its PROMELA Translation}"
}

@article{latella:statechartchecking,
	abstract = "{Statechart Diagrams provide a graphical notation for describing dynamic aspects of system behaviour within the Unified Modelling Language (UML). In this paper we present a translation from a subset of UML Statechart Diagrams - covering essential aspects of both concurrent behaviour, like sequentialisation, parallelism, non-determinism and priority, and state refinement - into PROMELA, the specification language of the SPIN model checker. SPIN is one of the most advanced analysis and verification tools available nowadays. Our translation allows for the automatic verification of UML Statechart Diagrams. The translation is simple, proven correct, and promising in terms of state space representation efficiency.}",
	author = "Latella, Diego and Majzik, Istvan and Massink, Mieke",
	citeulike-article-id = "887462",
	citeulike-linkout-0 = "http://dx.doi.org/10.1007/s001659970003",
	citeulike-linkout-1 = "http://www.springerlink.com/content/r0hp11xyl6lc7w3l",
	day = "21",
	doi = "10.1007/s001659970003",
	issn = "0934-5043",
	journal = "Formal Aspects of Computing",
	keywords = "model\_checking; statecharts; uml",
	month = dec,
	number = "6",
	pages = "637--664",
	posted-at = "2010-12-14 23:55:11",
	priority = "2",
	publisher = "Springer London",
	title = "{Automatic Verification of a Behavioural Subset of UML Statechart Diagrams Using the SPIN Model-checker}",
	url = "http://dx.doi.org/10.1007/s001659970003",
	volume = "11",
	year = "1999"
}

@article{Lima:2009:FVV:1630177.1630462,
	abstract = "A major challenge in software development process is to advance error detection to early phases of the software life cycle. For this purpose, the Verification and Validation (V\&V) of UML diagrams play a very important role in detecting flaws at the design phase. It has a distinct importance for software security, where it is crucial to detect security flaws before they can be exploited. This paper presents a formal V\&V technique for one of the most popular UML diagrams: sequence diagrams. The proposed approach creates a PROMELA-based model from UML interactions expressed in sequence diagrams, and uses SPIN model checker to simulate the execution and to verify properties written in Linear Temporal Logic (LTL). The whole technique is implemented as an Eclipse plugin, which hides the model-checking formalism from the user. The main contribution of this work is to provide an efficient mechanism to be able to track the execution state of an interaction, which allows designers to write relevant properties involving send/receive events and source/destination of messages using LTL. Another important contribution is the definition of the PROMELA structure that provides a precise semantics of most of the newly UML 2.0 introduced combined fragments, allowing the execution of complex interactions. Finally, we illustrate the benefits of our approach through a security-related case study in a real world scenario.",
	acmid = "1630462",
	address = "Amsterdam, The Netherlands, The Netherlands",
	author = "Lima, V. and Talhi, C. and Mouheb, D. and Debbabi, M. and Wang, L. and Pourzandi, Makan",
	doi = "10.1016/j.entcs.2009.09.064",
	issn = "1571-0661",
	issue_date = "October, 2009",
	journal = "Electron. Notes Theor. Comput. Sci.",
	keywords = "Linea Temporal Logic; Model Checking; Sequence Diagrams; UML Design; Verification and Validation",
	month = oct,
	numpages = "18",
	pages = "143--160",
	publisher = "Elsevier Science Publishers B. V.",
	title = "{Formal Verification and Validation of UML 2.0 Sequence Diagrams using Source and Destination of Messages}",
	url = "http://dx.doi.org/10.1016/j.entcs.2009.09.064",
	volume = "254",
	year = "2009"
}

@inproceedings{inpJuDuJuLaPo06a,
	abstract = "This paper presents a technique to model check UML speci\&\#64257;cations by translating UML models to the model checker SPIN. Our models consist of active UML classes, whose behavior is de\&\#64257;ned by hierarchical state machines. The intended application is to \&\#64257;nd errors in protocols communicating using asynchronous message passing. Compared to previous efforts using a similar approach, our novel points are the following. First, we consider a subset of UML that in our opinion is expressive enough for protocol models but allows a simpler translation to SPIN than existing work. Preliminary analysis of simple industrial models support our conclusions on the expressivity of our UML subset. Second, we present a powerful action language that is still amenable to automatic analysis. The action language is used to specify the effects of transitions, which may include dynamic creation of new objects. Finally, we discuss an even simpler SPIN translation for \&\#64258;attened UML state machines and compare it to the translation that supports hierarchy.",
	author = "Jussila, Toni and others",
	booktitle = "{Proc. MoDeVa '06}",
	title = "{Model Checking Dynamic and Hierarchical UML State Machines}",
	year = "2006"
}

@inproceedings{Whittle:2002:TSM:647246.719610,
	acmid = "719610",
	author = "Whittle, Jon",
	booktitle = "{Proc. UML '02}",
	numpages = "16",
	pages = "227--242",
	title = "{Transformations and Software Modeling Languages: Automating Transformations in UML}",
	url = "http://dl.acm.org/citation.cfm?id=647246.719610",
	year = "2002"
}

@inproceedings{Aleman&al2000,
	added-at = "2007-09-25T21:44:52.000+0200",
	author = "{J.L.F. Alem{\'a}n} and Toval, A. and Hoyos, J.R.",
	biburl = "http://www.bibsonomy.org/bibtex/2bf6c09e506d09343eb33ade7d78e95bb/tommens",
	booktitle = "{Proc. Workshop Models, Environments and Tools for Requirements Engineering (MENHIR)}",
	description = "software evolution bibliography",
	interhash = "a99a69d182886ecc53f4b543c99a9d36",
	intrahash = "bf6c09e506d09343eb33ade7d78e95bb",
	keywords = "UML",
	note = "Universidad de Granada, Spain",
	timestamp = "2007-09-25T21:44:52.000+0200",
	title = "{Rigorously Transforming {U}{M}{L} Class Diagrams}",
	year = 2000
}

@url{XMI_Spec,
	abstract = "latest version 2.4.1",
	author = "OMG",
	note = "http://www.omg.org/spec/XMI",
	title = "{XML Metadata Interchange Specification}"
}

@url{MOF,
	author = "OMG",
	note = "http://www.omg.org/spec/MOF/2.4.1",
	number = "formal/2011-08-07",
	title = "{Meta Object Facility Specification}",
	url = "http://www.omg.org/spec/MOF/2.4.1"
}

@inproceedings{Kovse:2002:GXU:645789.667641,
	abstract = "XML-based Metadata Interchange (XMI) is an interchange format for metadata defined in terms of the MOF standard. In addition to supporting the exchange of complete models, XMI supports the exchange of models in differential form. Our paper builds on this feature to examine the possibility of XMI-based generic transformations of UML models. A generic transformation can be configured to generate (via XSLT) a specialized transformation that will be used to transform a UML model. The approach promotes model reuse, speeds up the modeling process and can be used to assure that only predefined semantics (as specialized by an agent) is included in the transformed model",
	acmid = "667641",
	address = "London, UK, UK",
	author = "Kovse, Jernej and H{\"a}rder, Theo",
	booktitle = "{Proceedings of the 8th International Conference on Object-Oriented. Information Systems}",
	isbn = "3-540-44087-9",
	numpages = "7",
	pages = "192--198",
	publisher = "Springer-Verlag",
	series = "{OOIS '02}",
	title = "{Generic XMI-Based UML Model Transformations}",
	url = "http://dl.acm.org/citation.cfm?id=645789.667641",
	year = "2002"
}

@inproceedings{Demuth01experimentswith,
	abstract = "The eXtensible Markup Language (XML) and its related technologies provide a promising tool for the implementation of transformations of UML models, not only for research prototypes but also for the interaction of different commercial CASE tools. We report on our experiments with XML query and transformation languages in the context of object-oriented software development. Especially we use the XML Metadata Interchange Format (XMI) as a tool for the transformation of object-oriented models. We outline XMI based scenarios in the forward and reverse engineering of different applications. As an example, we show how XMI and a standardized XML query/transformation language such as XSLT can be used for the generation of SQL database schemas based on UML models, and for design recovery from legacy code.",
	author = "Demuth, Birgit and Hussmann, Heinrich and Obermaier, Sven",
	booktitle = "{In Workshop on Transformations in UML. 2001}",
	title = "{Experiments With XMI Based Transformations of Software Models}",
	year = "2001"
}

@inproceedings{Keienburg01usingxml/xmi,
	abstract = "Software components developed with modern tools and middleware infrastructures undergo considerable reprogramming before they become reusable. Tools and methodologies are needed to cope with the evolution of software components. We present some basic concepts and architectures to handle the impacts of the evolution of UML models. With the proposed concepts a infrastructure to support model evolution, data schema migration, and data instance migration based on UML models can be realized. To describe the evolution path we use XML/XMI files.",
	author = "Keienburg, Frank and Rausch, Andreas",
	booktitle = "{In the Proc. of the 34th Annual Hawaii International Conference on System Sciences (HICSS-34), Maui}",
	pages = "3--6",
	publisher = "IEEE Computer Society",
	title = "{Using XML/XMI for Tool Supported Evolution of UML Models}",
	year = "2001"
}

@inproceedings{Woodside:2007:ASD:1768017.1768028,
	abstract = "The extraction of a performance model from an annotated software design is largely a matter of taking maximum advantage of the annotations. A serious issue is the fact that a design document directed to producing a product may not be the most convenient for annotation for any given evaluation; there may be a problem to capture the necessary information within the context of the document, without modifying it to clarify the performance concern. Sometimes such a clarification can be of value, but in general we do not wish to disturb the design, just to add the evaluation information. Approaches to using the SPT/MARTE annotations to capture important performance features are described in this paper. Features include completions of the design such as platform operations, composition of component submodels, four uses of state machine definitions, and four ways to describe communications costs and delays. The relationship of the annotated design model to the different kinds of performance model is also addressed.",
	acmid = "1768028",
	address = "Berlin, Heidelberg",
	author = "Woodside, Murray",
	booktitle = "{Proceedings of the 7th international conference on Formal methods for performance evaluation}",
	isbn = "978-3-540-72482-7",
	location = "Bertinoro, Italy",
	numpages = "39",
	pages = "429--467",
	publisher = "Springer-Verlag",
	series = "{SFM'07}",
	title = "{From annotated software designs (UML SPT/MARTE) to model formalisms}",
	url = "http://dl.acm.org/citation.cfm?id=1768017.1768028",
	year = "2007"
}

@inproceedings{Baumgrass:2011:DRE:1998441.1998445,
	abstract = "Scenario-driven role engineering is a systematic approach to engineer and maintain RBAC models. Such as every engineering process, this approach heavily depends on human factors and many of the corresponding engineering tasks must be conducted manually. However, based on the experiences we gained from our projects and case studies, we identified several tasks in role engineering that are monotonous, time-consuming, and can get tedious if conducted manually. These tasks include the derivation of candidate RBAC artifacts from business processes and scenario models. In this paper, we present an approach to automatically derive role engineering artifacts from process and scenario models. While our general approach is independent from a specific document format, we especially discuss the derivation of role engineering artifacts from UML activity models, UML interaction models, and BPMN collaboration models. In particular, we use the XMI (XML Metadata Interchange) representation of these models as a tool- and vendor-independent format to identify and automatically derive different role engineering artifacts.",
	acmid = "1998445",
	address = "New York, NY, USA",
	author = "Baumgrass, Anne and Strembeck, Mark and Rinderle-Ma, Stefanie",
	booktitle = "{Proceedings of the 16th ACM symposium on Access control models and technologies}",
	doi = "10.1145/1998441.1998445",
	isbn = "978-1-4503-0688-1",
	keywords = "BPMN; RBAC; UML; XMI; role engineering",
	location = "Innsbruck, Austria",
	numpages = "10",
	pages = "11--20",
	publisher = "ACM",
	series = "{SACMAT '11}",
	title = "{Deriving role engineering artifacts from business processes and scenario models}",
	url = "http://doi.acm.org/10.1145/1998441.1998445",
	year = "2011"
}

@inproceedings{Garousi:2005:CFA:2162897.2162914,
	abstract = "This article presents a control flow analysis methodology based on UML 2.0 sequence diagrams (SD). In contrast to the conventional code-based control flow analysis techniques, this technique can be used earlier in software development life cycle, when the UML design model of a system becomes available. Among many applications, this technique can be used in SD-based test techniques, model comprehension and model execution in the context of MDA. Based on the well-defined UML 2.0 activity diagrams, we propose an extended activity diagram metamodel, referred to as Concurrent Control Flow Graph (CCFG), to support control flow analysis of UML 2.0 sequence diagrams. Our strategy in this article is to define an OCL-based mapping in a formal and verifiable form as consistency rules between a SD and a CCFG, so as to ensure the completeness of the rules and the CCFG metamodel with respect to our control flow analysis purpose and allow their verification. Completeness here means if the CCFG metamodel has all classes and associations needed, and the rules are adequate with respect to our purpose. Furthermore, we define Concurrent Control Flow Paths, which are a generalization of the conventional Control Flow Path concept. The control flow analysis technique is applied to an example SD to demonstrate the feasibility of the approach.",
	acmid = "2162914",
	address = "Berlin, Heidelberg",
	author = "Garousi, Vahid and Briand, Lionel C. and Labiche, Yvan",
	booktitle = "{Proceedings of the First European conference on Model Driven Architecture: foundations and Applications}",
	doi = "10.1007/11581741_13",
	isbn = "3-540-30026-0, 978-3-540-30026-7",
	location = "Nuremberg, Germany",
	numpages = "15",
	pages = "160--174",
	publisher = "Springer-Verlag",
	series = "{ECMDA-FA'05}",
	title = "{Control flow analysis of UML 2.0 sequence diagrams}",
	url = "http://dx.doi.org/10.1007/11581741_13",
	year = "2005"
}

@inproceedings{Bernardi:2002:USD:584369.584376,
	abstract = {In this paper we study the use of Sequence Diagrams and Statecharts of the Unified Modeling Language (UML) for the validation and the performance evaluation of systems. We assume that the system is specified as a set of Statecharts and that Sequence Diagrams are used to represent "executions of interest". UML lacks a formal semantics and hence it is not possible to apply, directly, mathematical techniques on UML models for system validation. To reach this goal we propose an automatic translation of Statecharts and Sequence Diagrams into Generalized Stochastic Petri Nets, and a composition of the resulting net models suitable for reaching a given analysis goal. The translation into Petri nets is based on the abstract syntax of the UML Collaborations and of the State Machines packages (from which Sequence Diagrams and Statecharts are derived) and the construction of the complete model heavily uses compositionality.},
	acmid = "584376",
	author = "Bernardi, Simona and Donatelli, Susanna and Merseguer, Jos{\'e}",
	booktitle = "{Proc. WOSP '02}",
	doi = "10.1145/584369.584376",
	keywords = "GSPN; UML; compositionality; modeling",
	numpages = "11",
	title = "{From UML {S}equence {D}iagrams and {S}tatecharts to {A}nalysable {P}etri {N}et {M}odels}",
	url = "http://doi.acm.org/10.1145/584369.584376"
}

@inproceedings{Lopez-Grao:2004:UAD:974044.974048,
	abstract = "Over the last decade, the relevance of performance evaluation in the early stages of the software development life-cycle has been steadily rising. We honestly believe that the integration of formal models in the software engineering process is a must, in order to enable the application of wellknown, powerful analysis techniques to software models. In previous papers the authors have stated a proposal for SPE, dealing with several UML diagram types. The proposal for malizes their semantics, and provides a method to translate them into (analyzable) GSPN models. This paper focuses on activity diagrams, which had not been dealt with so far. They will be incorporated in our SPE method, enhancing its expressivity by refining abstraction levels in the statechart diagrams. Performance requirements will be annotated according to the UML profile for schedulability, performance and time. Last but not least, our CASE tool prototype will be introduced. This tool deals with every model element from activity diagrams and ensures an automatic translation from ADs into GSPNs strictly following the process related in this paper.",
	acmid = "974048",
	author = "L{\'o}pez-Grao, Juan Pablo and others",
	booktitle = "{Proc. WOSP '04}",
	doi = "10.1145/974044.974048",
	keywords = "CASE tool; Generalized Stochastic Petri nets; UML; UML Profile for schedulability performance and time specification; activity diagrams; compositionality; software performance",
	numpages = "12",
	title = "{From UML activity diagrams to Stochastic Petri nets: application to software performance engineering}",
	url = "http://doi.acm.org/10.1145/974044.974048"
}

@inproceedings{Petriu:2002:AUP:647810.737982,
	abstract = "The Object Management Group (OMG) is in the process of defining a UML Profile for Schedulability, Performance and Time that will enable the construction of models for making quantitative predictions regarding these characteristics. The paper proposes a graph-grammar based method for transforming automatically a UML model annotated with performance information into a Layered Queueing Network (LQN) performance model. The input to our transformation algorithm is an XML file that contains the UML model in XML format according to the standard XMI interface. The output is the corresponding LQN model description file, which can be read directly by existing LQN solvers. The LQN model structure is generated from the high-level software architecture and from deployment diagrams indicating the allocation of software components to hardware devices. The LQN model parameters are obtained from detailed models of key performance scenarios, represented as UML interaction or activity diagrams.",
	acmid = "737982",
	author = "Petriu, Dorina and Shen, Hui",
	booktitle = "{Proc. TOOLS'02}",
	numpages = "19",
	title = "{Applying the UML Performance Profile: Graph Grammar-Based Derivation of LQN Models from UML Specifications}",
	url = "http://dl.acm.org/citation.cfm?id=647810.737982"
}

@inproceedings{csduml2003,
	abstract = "When designing safety critical applications in UML, the system models are frequently projected into various mathematical domains (such as Petri nets, transition systems, process algebras, etc.) to carry out a formal analysis of the system under design by \emph{automatic model transformations}. Automation surely increases the quality of such transformations as errors manually implanted into transformation programs during implementation are eliminated; however, conceptual flaws in transformation design still remain undetected. In this paper, we present a model-level, modeling language independent and highly automated technique to formally verify by model checking that a model transformation from an arbitrary well-formed model instance of the source modeling language into its target equivalent preserves (language specific) dynamic consistency properties. We demonstrate the feasibility of our approach on a complex mathematical model transformation from UML statecharts to Petri nets.",
	author = "Varr{\'o}, D{\'a}niel and Pataricza, Andr{\'a}s",
	booktitle = "{CSDUML 2003: Critical Systems Development in UML; Proceedings of the UML{\textquoteright}03 Workshop}",
	editor = "J{\"u}rjens, Jan and Rumpe, Bernhard and France, Robert and Fernandez, Eduardo B.",
	month = "September",
	number = "TUM-I0323",
	organization = "Technische Universit{\"a}t M{\"u}nchen",
	pages = "63{\textendash}78",
	publisher = "Technische Universit{\"a}t M{\"u}nchen",
	series = "{Technical Report}",
	title = "{Automated Formal Verification of Model Transformations}",
	url = "http://www.inf.mit.bme.hu/FTSRG/Publications/varro/2003/csduml2003_vp.pdf",
	year = "2003"
}

@article{New1,
	abstract = "For automation of many software engineering tasks such as program analysis, testing, and coverage analysis, it is necessary to construct a control flow graph. With the advancement of UML, software practitioners advocate to construct control flow graph from some of the UML design artifacts. UML 2.x supports the modeling of control flow information in interaction diagram by means of message sequences and different types of fragments like alt, opt, break, loop, and so forth. Leading UML modeling tools, namely MagicDraw, IBM's Rational, and so forth export models in XMI format. Construction of control flow graph from the XMI representation of an interaction diagram is not straightforward as model elements of interaction diagram are captured in XMI by means of values of attributes of multiple tagged elements and correlations among these tagged elements is not explicitly specified. This paper proposes an approach for construction of control flow graph from XMI representation of UML 2.x interaction diagram. A prototype tool based on our approach has been developed which can be plugged in any computer-aided software engineering tool.",
	author = "Kundu, Debasish and Samanta, Debasis and Mall, Rajib",
	journal = "ISRN Software Engineering",
	number = "265235",
	title = "{An Approach to Convert XMI Representation of UML 2.x Interaction Diagram into Control Flow Graph}",
	year = "2012"
}

@inproceedings{Bandyopadhyay:2009:TIG:1547558.1548197,
	abstract = "We propose a novel testing approach that combines information from UML sequence models and state machine models. Current approaches that rely solely on sequence models do not consider the effects of the message path under test on the states of the participating objects. Dinh-Trong et al. proposed an approach to test input generation using information from class and sequence models.We extend their Variable Assignment Graph (VAG) based approach to include information from state machine models. The extended VAG (EVAG) produces multiple execution paths representing the effects of the messages on the states of their target objects.We performed mutation analysis on the implementation of a video store system to demonstrate that our test inputs are more effective than those that cover only sequence diagram paths.",
	acmid = "1548197",
	author = "Bandyopadhyay, Aritra and Ghosh, Sudipto",
	booktitle = "{Proc. ICST '09}",
	doi = "10.1109/ICST.2009.23",
	keywords = "class models; model-based testing; sequence models; state machine models; test input generation",
	numpages = "10",
	publisher = "IEEE Computer Society",
	title = "{Test Input Generation Using UML Sequence and State Machines Models}",
	url = "http://dx.doi.org/10.1109/ICST.2009.23"
}

@inproceedings{Fraikin:2002:STB:786769.787022,
	abstract = "In this paper we present a concept for automated testing of object-oriented applications and a tool called SeDiTeC that implements these concepts for Java applications. SeDiTeC uses UML sequence diagrams, that are complemented by test case data sets consisting of parameters and return values for the method calls, as test specification and therefore can easily be integrated into the development process as soon as the design phase starts. SeDiTeC supports specification of several test case data sets for each sequence diagram as well as to combine several sequence diagrams to so-called combined sequence diagrams thus reducing the number of diagrams needed. For classes and their methods whose behavior is specified in sequence diagrams and the corresponding test case data sets SeDiTeC can automatically generate test stubs thus enabling testing right from the beginning of the implementation phase. Validation is not restricted to comparing the test case data sets with the observed data, but can also include validation of pre- and postcondition",
	acmid = "787022",
	author = "Fraikin, Falk and Leonhardt, Thomas",
	booktitle = "{Proc. ASE '02}",
	isbn = "0-7695-1736-6",
	publisher = "IEEE Computer Society",
	title = {{SeDiTeC " Testing Based on Sequence Diagrams}},
	url = "http://dl.acm.org/citation.cfm?id=786769.787022"
}

@inproceedings{Dinh-Trong:2006:SAG:1190616.1191226,
	abstract = "Practical model validation techniques are needed for model driven development (MDD) techniques to succeed. This paper presents an approach to generating inputs to test UML design models that are produced in the detailed design phase of an MDD project. A symbolic execution based approach is used to derive test input constraints from the paths of a Variable Assignment Graph, which integrates information from UML class and sequence diagrams. The constraints are solved using Alloy, a configuration constraint solver, to obtain the test inputs. The results of a pilot study carried out to explore the fault detection capability of the test inputs are reported.",
	acmid = "1191226",
	author = "Dinh-Trong, Trung T. and Ghosh, Sudipto and France, Robert B.",
	booktitle = "{Proc. ISSRE '06}",
	doi = "10.1109/ISSRE.2006.10",
	numpages = "10",
	pages = "95--104",
	title = "{A Systematic Approach to Generate Inputs to Test UML Design Models}",
	url = "http://dx.doi.org/10.1109/ISSRE.2006.10",
	year = "2006"
}

@article{journals/isse/Sibertin-BlancHT08,
	abstract = "Sequence Diagrams (SDs) are one of the most popular elements of the UML notation to model the dynamics of systems. However, the graphical representation of basic SDs suffers from an inherent ambiguity that has led to different definitions in UML 1.x and in UML 2.0. This ambiguity paves the way for the consideration of several semantics for basic SDs. The paper studies four of these semantics and shows to what extent their differences for a given SD (that is the amount of ambiguity of this diagram) comes from its structural properties (linearity, local control and local causality). The fulfilment of these properties can serve as a measure of the ambiguity of a SD, and thus the attention to be paid at its validation.",
	added-at = "2009-07-27T00:00:00.000+0200",
	author = "Sibertin-Blanc, Christophe and Hameurlain, Nabil and Tahir, Omar",
	date = "2009-07-27",
	description = "dblp",
	interhash = "05c5dd4b4c50c5212210adf59aa94d8f",
	intrahash = "c0bbc946fbd221a86dd5446dc17c9fc6",
	journal = "ISSE",
	keywords = "dblp",
	number = 3,
	pages = "275--284",
	timestamp = "2009-07-27T00:00:00.000+0200",
	title = "{Ambiguity and structural properties of basic sequence diagrams.}",
	url = "http://dblp.uni-trier.de/db/journals/isse/isse4.html#Sibertin-BlancHT08; http://dx.doi.org/10.1007/s11334-008-0063-2; http://www.bibsonomy.org/bibtex/2c0bbc946fbd221a86dd5446dc17c9fc6/dblp",
	volume = 4,
	year = 2008
}

@book{process_algebra,
	author = "Baeten, J.C.M and Basten, T. and Reniers, M.A.",
	publisher = "Cambridge University Press",
	title = "{Process Algebra: Equational Theories of Communicating Processes}",
	year = "2009"
}

@inproceedings{FormalLanguagemCRL2,
	author = "Groote, J.F. and others",
	booktitle = "{Proc. MMOSS'06}",
	title = "{The Formal Specification Language m{CRL2}}"
}

@article{mCRL2Toolset,
	author = "Groote, J.F. and Keiren, J. and Stappers, F.P.M. and Wesselink, J.W. and Willemse, T.A.C.",
	journal = "SPE",
	pages = "143--153",
	title = "{Experiences in developing the m{CRL2} toolset}",
	volume = "41",
	year = "2011"
}

@article{DBLP:journals/tse/DistefanoSP11,
	author = "Distefano, Salvatore and Scarpa, Marco and Puliafito, Antonio",
	bibsource = "DBLP, http://dblp.uni-trier.de",
	journal = "IEEE Trans. Software Eng.",
	number = "1",
	pages = "65--79",
	title = "{From UML to Petri Nets: The PCM-Based Methodology}",
	url = "http://doi.ieeecomputersociety.org/10.1109/TSE.2010.10",
	volume = "37",
	year = "2011"
}

@inproceedings{Tribastone:2008:AEP:1383559.1383569,
	acmid = "1383569",
	author = "Tribastone, Mirco and Gilmore, Stephen",
	booktitle = "{Proc. WOSP '08}",
	doi = "10.1145/1383559.1383569",
	keywords = "marte; pepa; uml",
	numpages = "12",
	title = "{Automatic {E}xtraction of PEPA {P}erformance {M}odels from UML {A}ctivity {D}iagrams {A}nnotated with the MARTE {P}rofile}",
	url = "http://doi.acm.org/10.1145/1383559.1383569"
}

@article{journals/corr/abs-1202-0414,
	added-at = "2012-10-10T00:00:00.000+0200",
	author = "Sbeity, Ihab and Brenner, Leonardo and Dbouk, Mohamed",
	interhash = "4af24f615bff62cb4e344878be21fe4f",
	intrahash = "b1a8fcb25686603d29562424e334174a",
	journal = "CoRR",
	keywords = "dblp",
	timestamp = "2012-10-10T00:00:00.000+0200",
	title = "{Generating a Performance Stochastic Model from UML Specifications}",
	url = "http://dblp.uni-trier.de/db/journals/corr/corr1202.html#abs-1202-0414; http://arxiv.org/abs/1202.0414; http://www.bibsonomy.org/bibtex/2b1a8fcb25686603d29562424e334174a/dblp",
	volume = "abs/1202.0414",
	year = 2012
}

@article{10.1109/ECBS.2006.17,
	address = "Los Alamitos, CA, USA",
	author = "Alawneh, Luay and Debbabi, Mourad and Jarraya, Yosr and Soeanu, Andrei and Hassayne, Fawzi",
	doi = "10.1109/ECBS.2006.17",
	isbn = "0-7695-2546-6",
	journal = "Engineering of Computer-Based Systems, IEEE International Conference on the",
	pages = "409--418",
	publisher = "IEEE Computer Society",
	title = "{A Unified Approach for Verification and Validation of Systems and Software Engineering Models}",
	volume = "0",
	year = "2006"
}

@inproceedings{Tribastone:2008:ATU:1446304.1447447,
	acmid = "1447447",
	author = "Tribastone, Mirco and Gilmore, Stephen",
	booktitle = "{Proc. QEST '08}",
	doi = "10.1109/QEST.2008.18",
	keywords = "UML; Sequence Diagram; PEPA",
	numpages = "10",
	pages = "205--214",
	title = "{Automatic Translation of UML Sequence Diagrams into PEPA Models}",
	url = "http://dx.doi.org/10.1109/QEST.2008.18",
	year = "2008"
}

@inproceedings{CMS_LHC,
	author = "Hwong, Y.-L. and Kusters, V.J.J. and Willemse, T.A.C.",
	booktitle = "{Proc. FSEN}",
	publisher = "Springer-Verlag",
	title = "{Analysing the Control Software of the {C}ompact {M}uon {S}olenoid Experiment at the {L}arge {H}adron {C}ollider}",
	year = "2011"
}

@book{DIRAC_CommGridSolution,
	author = "Tsaregorodtsev, A. and others",
	series = "{Proc. CHEP'07}",
	title = "{{DIRAC}: A Community {G}rid Solution}"
}

@inproceedings{Cao:2006:TMV:1169227.1169783,
	acmid = "1169783",
	author = "Cao, Honghua and Ying, Shi and Du, Dehui",
	booktitle = "{Proc. CIT '06}",
	doi = "10.1109/CIT.2006.185",
	publisher = "IEEE Computer Society",
	title = "{Towards Model-based Verification of BPEL with Model Checking}",
	url = "http://dx.doi.org/10.1109/CIT.2006.185",
	year = "2006"
}

@misc{E_business,
	author = "Guelfi, Nicolas and Mammar, Amel",
	institution = "Software Engineering Competence Center",
	number = "TR-SE2C-04-10",
	school = "University of Luxembourg",
	title = "{A {F}ormal {A}pproach for the {V}erification of {E}-{B}usiness {P}rocesses with {P}romela}",
	year = "2004"
}

@inproceedings{Siveroni:2008:PSS:1371602.1371879,
	acmid = "1371879",
	author = "Siveroni, Igor and Zisman, Andrea and Spanoudakis, George",
	booktitle = "{Proc. ARES '08}",
	doi = "10.1109/ARES.2008.194",
	isbn = "978-0-7695-3102-1",
	keywords = "Model Checking; Spin; Static Verification; UML",
	numpages = "8",
	publisher = "IEEE Computer Society",
	title = "{Property Specification and Static Verification of UML Models}",
	url = "http://dx.doi.org/10.1109/ARES.2008.194",
	year = "2008"
}

@misc{MDA01,
	author = "Omg",
	citeulike-article-id = "2857448",
	citeulike-linkout-0 = "http://www.omg.org/docs/ormsc/01-07-01.pdf",
	comment = "White paper",
	howpublished = "\\url{http://www.omg.org/docs/ormsc/01-07-01.pdf}",
	month = jul,
	posted-at = "2008-06-02 16:46:06",
	priority = "2",
	title = "{Model Driven Architecture - A Technical Perspective}",
	url = "http://www.omg.org/docs/ormsc/01-07-01.pdf",
	year = "2001"
}

@proceedings{Sarma,
	author = "Sarma, Monalisa and Kundu, Debasish and Mall, Rajib",
	booktitle = "{Proc. ADCOM '07}",
	publisher = "IEEE Computer Society",
	title = "{Automatic test case generation from UML sequence diagram}"
}

@inproceedings{Rasch:2005:CVS:2144745.2144752,
	acmid = "2144752",
	address = "Berlin, Heidelberg",
	author = "Rasch, Holger and Wehrheim, Heike",
	booktitle = "{Proc. FMOODS'05}",
	doi = "10.1007/11494881_5",
	isbn = "3-540-26181-8, 978-3-540-26181-0",
	location = "Athens, Greece",
	numpages = "16",
	pages = "67--82",
	publisher = "Springer-Verlag",
	title = "{Checking the {V}alidity of {S}cenarios in UML {M}odels}",
	url = "http://dx.doi.org/10.1007/11494881_5",
	year = "2005"
}

@inproceedings{Hansen:2010:AVE:2188418.2188435,
	acmid = "2188435",
	address = "Berlin, Heidelberg",
	author = "Hansen, Helle and others",
	booktitle = "{Proc. FMCO'10}",
	doi = "10.1007/978-3-642-25271-6_12",
	isbn = "978-3-642-25270-9",
	location = "Graz, Austria",
	numpages = "26",
	pages = "225--250",
	publisher = "Springer-Verlag",
	title = "{Automated {V}erification of {E}xecutable UML {M}odels}",
	url = "http://dx.doi.org/10.1007/978-3-642-25271-6_12",
	year = "2011"
}

@article{pokozy-korenblat_04_toward,
	added-at = "2009-02-11T22:19:07.000+0100",
	author = "Korenblat, Katerina P. and Priami, Corrado",
	booktitle = "{Proceedings of the Workshop on the Compositional Verification of UML Models (CVUML)}",
	citeulike-article-id = "2504063",
	doi = "10.1016/j.entcs.2004.09.007",
	interhash = "6394edc0b858bdd74d02bfee41a9b4f0",
	intrahash = "379d2875222eddd5cc6cb37ac1dd9da3",
	journal = "Electronic Notes in Theoretical Computer Science",
	keywords = "2004 statecharts uml",
	posted-at = "2008-03-10 18:35:32",
	priority = "2",
	title = "{Toward Extracting pi-calculus from UML Sequence and State Diagrams}",
	url = "http://dx.doi.org/10.1016/j.entcs.2004.09.007; http://www.bibsonomy.org/bibtex/2379d2875222eddd5cc6cb37ac1dd9da3/leonardo",
	volume = "101",
	year = 2004
}

@article{GallardoMP02,
	author = "Mar{\'i}a and Merino, Pedro and Pimentel, Ernesto",
	citeulike-article-id = "1247160",
	journal = "Journal of Object Technology",
	keywords = "checking",
	number = "2",
	pages = "101--117",
	posted-at = "2007-04-24 08:41:39",
	priority = "2",
	title = "{Debugging UML Designs with Model Checking.}",
	volume = "1",
	year = "2002"
}

@inproceedings{Selic04onthe,
	author = "Selic, Bran V.",
	booktitle = "{Formal Methods for the Design of Real-Time Systems (SFM-RT 2004), volume 3185 of LNCS}",
	pages = "181--199",
	publisher = "Springer",
	title = "{On the semantic foundations of standard UML 2.0}",
	year = "2004"
}

@article{14332,
	author = "Groote, J. F. and others",
	group = "SEN3",
	journal = "Electronic Notes in Theoretical Computer science",
	refereed = "y",
	scndgroup = "SEN2",
	size = "6p.",
	title = "{From $\mu${CRL} {To} m{CRL2}: {Motivation} {And} {Outline}}",
	volume = "162",
	year = "2006"
}

@inproceedings{remenska:using,
	author = "Remenska, Daniela and others",
	booktitle = "{Proc. CCGRID'12}",
	pages = "335--343",
	title = "{Using Model Checking to Analyze the System Behavior of the LHC Production Grid}",
	year = "2012"
}

@url{repo:remenska,
	author = "Remenska, Daniela and Homburg, Philip",
	note = "https://github.com/remenska/NFM",
	title = "{The mCRL2$\Leftrightarrow$UML toolset}",
	url = "https://github.com/remenska/NFM"
}

@inproceedings{sarma1,
	author = "Sarma, Monalisa and Kundu, Debasish and Mall, Rajib",
	booktitle = "{Proc. ADCOM '07}",
	doi = "10.1109/ADCOM.2007.68",
	masid = "50621080",
	title = "{Automatic Test Case Generation from UML Sequence Diagram}",
	year = "2007"
}

@article{New2
}

}

}

@inproceedings{Merz02modelchecking,
	author = "Merz, Stephan and Rauh, Christopher",
	booktitle = "{7th Intl. Symp. Formal Techniques in Real-Time and Fault Tolerant Systems (FTRTFT 2002}",
	pages = "395--414",
	title = "{Model checking timed UML state machines and collaborations}",
	year = "2002"
}

