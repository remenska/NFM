synch_call(1, OptimizationMindHandler, MindHandler, conn_connected(1, [JobPath, JobSanity, JobScheduling], 1))
synch_call(1, ExecutorDispatcher, __eDispatch, addExecutor(11, [JobPath, JobSanity, JobScheduling], 1))
synch_call(1, ExecutorDispatcher, __eDispatch, __idMap_keys)
synch_reply(1, ExecutorDispatcher, __eDispatch, __idMap_keys_return([]))
synch_call(1, ExecutorDispatcher, __eDispatch, __idMap_set(11, [JobPath, JobSanity, JobScheduling]))
synch_reply(1, ExecutorDispatcher, __eDispatch, __idMap_set_return)
synch_call(1, ExecutorState, __states, addExecutorState(11, [JobPath, JobSanity, JobScheduling], 1))
synch_call(1, ExecutorState, __states, __maxTasks_add(11, 1))
synch_reply(1, ExecutorState, __states, __maxTasks_add_return)
synch_call(1, ExecutorState, __states, __execTasks_keys)
synch_reply(1, ExecutorState, __states, __execTasks_keys_return([]))
synch_call(1, ExecutorState, __states, __execTasks_addeid(11))
synch_reply(1, ExecutorState, __states, __execTasks_addeid_return)
synch_call(1, ExecutorState, __states, __typeToId_keys)
synch_reply(1, ExecutorState, __states, __typeToId_keys_return([]))
synch_call(1, ExecutorState, __states, __typeToId_addeType(JobPath))
synch_reply(1, ExecutorState, __states, __typeToId_addeType_return)
synch_call(1, ExecutorState, __states, __typeToId_addeid(JobPath, 11))
synch_reply(1, ExecutorState, __states, __typeToId_addeid_return)
synch_call(1, ExecutorState, __states, __typeToId_keys)
synch_reply(1, ExecutorState, __states, __typeToId_keys_return([JobPath]))
synch_call(1, ExecutorState, __states, __typeToId_addeType(JobSanity))
synch_reply(1, ExecutorState, __states, __typeToId_addeType_return)
synch_call(1, ExecutorState, __states, __typeToId_addeid(JobSanity, 11))
synch_reply(1, ExecutorState, __states, __typeToId_addeid_return)
synch_call(1, ExecutorState, __states, __typeToId_keys)
synch_reply(1, ExecutorState, __states, __typeToId_keys_return([JobSanity, JobPath]))
synch_call(1, ExecutorState, __states, __typeToId_addeType(JobScheduling))
synch_reply(1, ExecutorState, __states, __typeToId_addeType_return)
synch_call(1, ExecutorState, __states, __typeToId_addeid(JobScheduling, 11))
synch_reply(1, ExecutorState, __states, __typeToId_addeid_return)
tau
synch_reply(1, ExecutorState, __states, addExecutorState_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes)
synch_reply(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes_return([]))
synch_call(1, ExecutorDispatcher, __eDispatch, __execTypes_add(JobPath))
synch_reply(1, ExecutorDispatcher, __eDispatch, __execTypes_add_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __execTypes_inc(JobPath))
synch_reply(1, ExecutorDispatcher, __eDispatch, __execTypes_inc_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes)
synch_reply(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes_return([JobPath]))
synch_call(1, ExecutorDispatcher, __eDispatch, __execTypes_add(JobSanity))
synch_reply(1, ExecutorDispatcher, __eDispatch, __execTypes_add_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __execTypes_inc(JobSanity))
synch_reply(1, ExecutorDispatcher, __eDispatch, __execTypes_inc_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes)
synch_reply(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes_return([JobPath, JobSanity]))
synch_call(1, ExecutorDispatcher, __eDispatch, __execTypes_add(JobScheduling))
synch_reply(1, ExecutorDispatcher, __eDispatch, __execTypes_add_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __execTypes_inc(JobScheduling))
synch_reply(1, ExecutorDispatcher, __eDispatch, __execTypes_inc_return)
tau
synch_call(1, ExecutorDispatcher, __eDispatch, __fillExecutors(JobPath, true))
synch_call(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks(JobPath))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len)
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len_return(0))
synch_reply(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks_return)
synch_call(1, ExecutorState, __states, getIdleExecutor(JobPath))
synch_call(1, ExecutorState, __states, __typeToId_eids(JobPath))
synch_reply(1, ExecutorState, __states, __typeToId_eids_return([11]))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([]))
synch_reply(1, ExecutorState, __states, freeSlots_return(1))
synch_reply(1, ExecutorState, __states, getIdleExecutor_return(11))
synch_call(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor(11, [JobPath], false))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([]))
synch_reply(1, ExecutorState, __states, freeSlots_return(1))
synch_call(1, ExecutorQueues, __queues, popTask([JobPath]))
synch_call(1, ExecutorQueues, __queues, __queues_pop(JobPath, 0))
synch_reply(1, ExecutorQueues, __queues, __queues_pop_return(-1))
synch_reply(1, ExecutorQueues, __queues, popTask_return(0, None))
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor_return(OK, 0))
tau
step3(0)
synch_reply(1, ExecutorDispatcher, __eDispatch, __fillExecutors_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __fillExecutors(JobSanity, true))
synch_call(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks(JobSanity))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len)
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len_return(0))
synch_reply(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks_return)
synch_call(1, ExecutorState, __states, getIdleExecutor(JobSanity))
synch_call(1, ExecutorState, __states, __typeToId_eids(JobSanity))
synch_reply(1, ExecutorState, __states, __typeToId_eids_return([11]))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([]))
synch_reply(1, ExecutorState, __states, freeSlots_return(1))
synch_reply(1, ExecutorState, __states, getIdleExecutor_return(11))
synch_call(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor(11, [JobSanity], false))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([]))
synch_reply(1, ExecutorState, __states, freeSlots_return(1))
synch_call(1, ExecutorQueues, __queues, popTask([JobSanity]))
synch_call(1, ExecutorQueues, __queues, __queues_pop(JobSanity, 0))
synch_reply(1, ExecutorQueues, __queues, __queues_pop_return(-1))
synch_reply(1, ExecutorQueues, __queues, popTask_return(0, None))
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor_return(OK, 0))
step3(0)
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, __fillExecutors_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __fillExecutors(JobScheduling, true))
synch_call(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks(JobScheduling))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len)
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len_return(0))
synch_reply(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks_return)
synch_call(1, ExecutorState, __states, getIdleExecutor(JobScheduling))
synch_call(1, ExecutorState, __states, __typeToId_eids(JobScheduling))
synch_reply(1, ExecutorState, __states, __typeToId_eids_return([11]))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([]))
synch_reply(1, ExecutorState, __states, freeSlots_return(1))
synch_reply(1, ExecutorState, __states, getIdleExecutor_return(11))
synch_call(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor(11, [JobScheduling], false))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([]))
synch_reply(1, ExecutorState, __states, freeSlots_return(1))
synch_call(1, ExecutorQueues, __queues, popTask([JobScheduling]))
synch_call(1, ExecutorQueues, __queues, __queues_pop(JobScheduling, 0))
synch_reply(1, ExecutorQueues, __queues, __queues_pop_return(-1))
synch_reply(1, ExecutorQueues, __queues, popTask_return(0, None))
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor_return(OK, 0))
tau
step3(0)
synch_reply(1, ExecutorDispatcher, __eDispatch, __fillExecutors_return)
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, addExecutor_return)
synch_call(1, OptimizationMindHandler, MindHandler, exec_executorConnected(11, [JobPath, JobSanity, JobScheduling]))
synch_call(1, OptimizationMindHandler, MindHandler, __loadJobs([JobPath, JobSanity, JobScheduling]))
tau
synch_call(1, JobManagerHandler, JobManager, submitJob([22]))
synch_call(1, JobManagerHandler, JobManager, __sendNewJobsToMind([22]))
asynch_call(1, OptimizationMindHandler, MindHandler, msg1(OptimizeJobs, [22]))
synch_call(1, OptimizationMindHandler, MindHandler, forgetTask(22))
synch_reply(1, JobManagerHandler, JobManager, __sendNewJobsToMind_return)
synch_reply(1, JobManagerHandler, JobManager, submitJob_return)
synch_call(1, ExecutorDispatcher, __eDispatch, removeTaskDispatcher(22))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_pop(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_pop_return)
synch_call(1, ExecutorState, __states, getExecutorOfTask(22))
synch_call(1, ExecutorState, __states, __taskInExec_get(22))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(-1))
synch_reply(1, ExecutorState, __states, getExecutorOfTask_return(0))
synch_call(1, ExecutorQueues, __queues, deleteTask(22))
synch_call(1, ExecutorQueues, __queues, __taskInQueue_get(22))
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_get_return(None))
synch_call(1, ExecutorQueues, __queues, __taskInQueue_del(22))
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_del_return)
synch_call(1, ExecutorQueues, __queues, __queues_index(None, 22))
synch_reply(1, ExecutorQueues, __queues, __queues_index_return(-1))
tau
synch_reply(1, ExecutorQueues, __queues, deleteTask_return)
synch_call(1, ExecutorState, __states, removeTask(22, 0))
synch_call(1, ExecutorState, __states, __taskInExec_get(22))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(-1))
synch_call(1, ExecutorState, __states, __taskInExec_pop(22))
synch_reply(1, ExecutorState, __states, __taskInExec_pop_return)
synch_reply(1, ExecutorState, __states, removeTask_return(false))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index_return(-1))
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, removeTaskDispatcher_return(OK))
synch_reply(1, OptimizationMindHandler, MindHandler, forgetTask_return)
synch_call(1, OptimizationMindHandler, MindHandler, executeTask(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_call(1, ExecutorDispatcher, __eDispatch, addTaskDispatcher(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_call(1, ExecutorDispatcher, __eDispatch, __addTaskIfNew(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_keys)
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_keys_return([]))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_add(taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_add_return)
synch_reply(1, ExecutorDispatcher, __eDispatch, __addTaskIfNew_return(true))
synch_call(1, ExecutorDispatcher, __eDispatch, __dispatchTask(22, true))
synch_call(1, ExecutorState, __states, getExecutorOfTask(22))
synch_call(1, ExecutorState, __states, __taskInExec_get(22))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(-1))
synch_reply(1, ExecutorState, __states, getExecutorOfTask_return(0))
synch_call(1, ExecutorDispatcher, __eDispatch, __removeFromFreezer(22))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index_return(-1))
synch_reply(1, ExecutorDispatcher, __eDispatch, __removeFromFreezer_return(false))
synch_call(1, ExecutorDispatcher, __eDispatch, __getNextExecutor(22))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_get(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_get_return(taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_call(1, MindCallbacks, __cbHolder, cbDispatch(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted)), [JobPath, JobSanity, JobScheduling]))
synch_call(1, OptimizationMindHandler, MindHandler, exec_dispatch(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted)), [JobPath, JobSanity, JobScheduling]))
synch_reply(1, OptimizationMindHandler, MindHandler, exec_dispatch_return(OK, JobPath))
synch_reply(1, MindCallbacks, __cbHolder, cbDispatch_return(OK, JobPath))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_update(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_update_return)
synch_reply(1, ExecutorDispatcher, __eDispatch, __getNextExecutor_return(OK, JobPath))
synch_call(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes)
synch_reply(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes_return([JobPath, JobSanity, JobScheduling]))
synch_call(1, ExecutorQueues, __queues, pushTask(JobPath, 22, false))
step1(22, JobPath)
synch_call(1, ExecutorQueues, __queues, __taskInQueue_keys)
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_keys_return([]))
synch_call(1, ExecutorQueues, __queues, __queues_keys)
synch_reply(1, ExecutorQueues, __queues, __queues_keys_return([]))
synch_call(1, ExecutorQueues, __queues, __queues_addetype(JobPath))
synch_reply(1, ExecutorQueues, __queues, __queues_addetype_return)
synch_call(1, ExecutorQueues, __queues, __queues_append(JobPath, 22))
synch_reply(1, ExecutorQueues, __queues, __queues_append_return)
synch_call(1, ExecutorQueues, __queues, __taskInQueue_set(22, JobPath))
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_set_return)
synch_reply(1, ExecutorQueues, __queues, pushTask_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __fillExecutors(JobPath, true))
synch_call(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks(JobPath))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len)
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len_return(0))
synch_reply(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks_return)
synch_call(1, ExecutorState, __states, getIdleExecutor(JobPath))
synch_call(1, ExecutorState, __states, __typeToId_eids(JobPath))
synch_reply(1, ExecutorState, __states, __typeToId_eids_return([11]))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([]))
synch_reply(1, ExecutorState, __states, freeSlots_return(1))
synch_reply(1, ExecutorState, __states, getIdleExecutor_return(11))
synch_call(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor(11, [JobPath], false))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([]))
synch_reply(1, ExecutorState, __states, freeSlots_return(1))
synch_call(1, ExecutorQueues, __queues, popTask([JobPath]))
synch_call(1, ExecutorQueues, __queues, __queues_pop(JobPath, 0))
synch_reply(1, ExecutorQueues, __queues, __queues_pop_return(22))
synch_call(1, ExecutorQueues, __queues, __taskInQueue_del(22))
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_del_return)
synch_reply(1, ExecutorQueues, __queues, popTask_return(22, JobPath))
step2(22, JobPath)
synch_call(1, ExecutorState, __states, addTask(11, 22))
synch_call(1, ExecutorState, __states, __taskInExec_set(22, 11))
synch_reply(1, ExecutorState, __states, __taskInExec_set_return)
synch_call(1, ExecutorState, __states, __execTasks_addtaskid(11, 22))
synch_reply(1, ExecutorState, __states, __execTasks_addtaskid_return)
synch_reply(1, ExecutorState, __states, addTask_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __msgTaskToExecutor(22, 11, JobPath))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_get(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_get_return(taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_call(1, MindCallbacks, __cbHolder, cbSendTask(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted)), 11, JobPath))
synch_reply(1, MindCallbacks, __cbHolder, cbSendTask_return(OK))
synch_reply(1, ExecutorDispatcher, __eDispatch, __msgTaskToExecutor_return(OK))
synch_reply(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor_return(OK, 22))
synch_call(1, ExecutorState, __states, getIdleExecutor(JobPath))
synch_call(1, ExecutorState, __states, __typeToId_eids(JobPath))
synch_reply(1, ExecutorState, __states, __typeToId_eids_return([11]))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([22]))
synch_reply(1, ExecutorState, __states, freeSlots_return(0))
synch_reply(1, ExecutorState, __states, getIdleExecutor_return(0))
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, __fillExecutors_return)
synch_reply(1, ExecutorDispatcher, __eDispatch, __dispatchTask_return(OK))
synch_reply(1, ExecutorDispatcher, __eDispatch, addTaskDispatcher_return(OK))
synch_reply(1, OptimizationMindHandler, MindHandler, executeTask_return(OK))
tau
asynch_call(1, MindCluster, mindCluster, msg(ProcessTask, 11, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
asynch_call(1, OptimizationMindHandler, MindHandler, msg(TaskDone, 11, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Checking, JobSanity))))
synch_call(1, ExecutorDispatcher, __eDispatch, taskProcessed(11, 22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Checking, JobSanity))))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskReceived(22, 11))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_get(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_get_return(taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_call(1, ExecutorState, __states, removeTask(22, 11))
synch_call(1, ExecutorState, __states, __taskInExec_get(22))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(11))
synch_call(1, ExecutorState, __states, __execTasks_removetaskid(11, 22))
synch_reply(1, ExecutorState, __states, __execTasks_removetaskid_return)
synch_call(1, ExecutorState, __states, __taskInExec_pop(22))
synch_reply(1, ExecutorState, __states, __taskInExec_pop_return)
synch_reply(1, ExecutorState, __states, removeTask_return(true))
synch_call(1, ExecutorDispatcher, __eDispatch, __idMap_get(11))
synch_reply(1, ExecutorDispatcher, __eDispatch, __idMap_get_return([JobPath, JobSanity, JobScheduling]))
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskReceived_return(OK, JobPath))
synch_call(1, MindCallbacks, __cbHolder, cbTaskProcessed(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Checking, JobSanity)), JobPath))
synch_reply(1, MindCallbacks, __cbHolder, cbTaskProcessed_return(OK))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_update(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Checking, JobSanity))))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_update_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __dispatchTask(22, true))
synch_call(1, ExecutorState, __states, getExecutorOfTask(22))
synch_call(1, ExecutorState, __states, __taskInExec_get(22))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(-1))
synch_reply(1, ExecutorState, __states, getExecutorOfTask_return(0))
synch_call(1, ExecutorDispatcher, __eDispatch, __removeFromFreezer(22))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index_return(-1))
synch_reply(1, ExecutorDispatcher, __eDispatch, __removeFromFreezer_return(false))
synch_call(1, ExecutorDispatcher, __eDispatch, __getNextExecutor(22))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_get(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_get_return(taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Checking, JobSanity))))
synch_call(1, MindCallbacks, __cbHolder, cbDispatch(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Checking, JobSanity)), [JobPath, JobSanity, JobScheduling]))
synch_call(1, OptimizationMindHandler, MindHandler, exec_dispatch(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Checking, JobSanity)), [JobPath, JobSanity, JobScheduling]))
synch_reply(1, OptimizationMindHandler, MindHandler, exec_dispatch_return(OK, JobSanity))
synch_reply(1, MindCallbacks, __cbHolder, cbDispatch_return(OK, JobSanity))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_update(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobSanity, statusBundle(Checking, JobSanity))))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_update_return)
synch_reply(1, ExecutorDispatcher, __eDispatch, __getNextExecutor_return(OK, JobSanity))
synch_call(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes)
synch_reply(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes_return([JobPath, JobSanity, JobScheduling]))
synch_call(1, ExecutorQueues, __queues, pushTask(JobSanity, 22, false))
step1(22, JobSanity)
synch_call(1, ExecutorQueues, __queues, __taskInQueue_keys)
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_keys_return([]))
synch_call(1, ExecutorQueues, __queues, __queues_keys)
synch_reply(1, ExecutorQueues, __queues, __queues_keys_return([JobPath]))
synch_call(1, ExecutorQueues, __queues, __queues_addetype(JobSanity))
synch_reply(1, ExecutorQueues, __queues, __queues_addetype_return)
synch_call(1, ExecutorQueues, __queues, __queues_append(JobSanity, 22))
synch_reply(1, ExecutorQueues, __queues, __queues_append_return)
synch_call(1, ExecutorQueues, __queues, __taskInQueue_set(22, JobSanity))
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_set_return)
synch_reply(1, ExecutorQueues, __queues, pushTask_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __fillExecutors(JobSanity, true))
synch_call(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks(JobSanity))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len)
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len_return(0))
synch_reply(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks_return)
synch_call(1, ExecutorState, __states, getIdleExecutor(JobSanity))
synch_call(1, ExecutorState, __states, __typeToId_eids(JobSanity))
synch_reply(1, ExecutorState, __states, __typeToId_eids_return([11]))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([]))
synch_reply(1, ExecutorState, __states, freeSlots_return(1))
synch_reply(1, ExecutorState, __states, getIdleExecutor_return(11))
synch_call(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor(11, [JobSanity], false))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([]))
synch_reply(1, ExecutorState, __states, freeSlots_return(1))
synch_call(1, ExecutorQueues, __queues, popTask([JobSanity]))
synch_call(1, ExecutorQueues, __queues, __queues_pop(JobSanity, 0))
synch_reply(1, ExecutorQueues, __queues, __queues_pop_return(22))
synch_call(1, ExecutorQueues, __queues, __taskInQueue_del(22))
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_del_return)
synch_reply(1, ExecutorQueues, __queues, popTask_return(22, JobSanity))
step2(22, JobSanity)
synch_call(1, ExecutorState, __states, addTask(11, 22))
synch_call(1, ExecutorState, __states, __taskInExec_set(22, 11))
synch_reply(1, ExecutorState, __states, __taskInExec_set_return)
synch_call(1, ExecutorState, __states, __execTasks_addtaskid(11, 22))
synch_reply(1, ExecutorState, __states, __execTasks_addtaskid_return)
synch_reply(1, ExecutorState, __states, addTask_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __msgTaskToExecutor(22, 11, JobSanity))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_get(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_get_return(taskObj(22, [JobPath, JobSanity, JobScheduling], JobSanity, statusBundle(Checking, JobSanity))))
synch_call(1, MindCallbacks, __cbHolder, cbSendTask(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobSanity, statusBundle(Checking, JobSanity)), 11, JobSanity))
synch_reply(1, MindCallbacks, __cbHolder, cbSendTask_return(OK))
synch_reply(1, ExecutorDispatcher, __eDispatch, __msgTaskToExecutor_return(OK))
synch_reply(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor_return(OK, 22))
synch_call(1, ExecutorState, __states, getIdleExecutor(JobSanity))
synch_call(1, ExecutorState, __states, __typeToId_eids(JobSanity))
synch_reply(1, ExecutorState, __states, __typeToId_eids_return([11]))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([22]))
synch_reply(1, ExecutorState, __states, freeSlots_return(0))
synch_reply(1, ExecutorState, __states, getIdleExecutor_return(0))
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, __fillExecutors_return)
synch_reply(1, ExecutorDispatcher, __eDispatch, __dispatchTask_return(OK))
synch_call(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor(11, [JobPath], false))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([22]))
synch_reply(1, ExecutorState, __states, freeSlots_return(0))
synch_call(1, ExecutorQueues, __queues, popTask([JobPath]))
synch_call(1, ExecutorQueues, __queues, __queues_pop(JobPath, 0))
synch_reply(1, ExecutorQueues, __queues, __queues_pop_return(-1))
synch_reply(1, ExecutorQueues, __queues, popTask_return(0, None))
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor_return(OK, 0))
step3(0)
synch_reply(1, ExecutorDispatcher, __eDispatch, taskProcessed_return(OK))
asynch_call(1, MindCluster, mindCluster, msg(ProcessTask, 11, taskObj(22, [JobPath, JobSanity, JobScheduling], JobSanity, statusBundle(Checking, JobSanity))))
asynch_call(1, OptimizationMindHandler, MindHandler, msg(TaskDone, 11, taskObj(22, [JobPath, JobSanity, JobScheduling], JobSanity, statusBundle(Checking, JobScheduling))))
synch_call(1, ExecutorDispatcher, __eDispatch, taskProcessed(11, 22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobSanity, statusBundle(Checking, JobScheduling))))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskReceived(22, 11))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_get(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_get_return(taskObj(22, [JobPath, JobSanity, JobScheduling], JobSanity, statusBundle(Checking, JobSanity))))
synch_call(1, ExecutorState, __states, removeTask(22, 11))
synch_call(1, ExecutorState, __states, __taskInExec_get(22))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(11))
synch_call(1, ExecutorState, __states, __execTasks_removetaskid(11, 22))
synch_reply(1, ExecutorState, __states, __execTasks_removetaskid_return)
synch_call(1, ExecutorState, __states, __taskInExec_pop(22))
synch_reply(1, ExecutorState, __states, __taskInExec_pop_return)
synch_reply(1, ExecutorState, __states, removeTask_return(true))
synch_call(1, ExecutorDispatcher, __eDispatch, __idMap_get(11))
synch_reply(1, ExecutorDispatcher, __eDispatch, __idMap_get_return([JobPath, JobSanity, JobScheduling]))
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskReceived_return(OK, JobSanity))
synch_call(1, MindCallbacks, __cbHolder, cbTaskProcessed(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobSanity, statusBundle(Checking, JobScheduling)), JobSanity))
synch_reply(1, MindCallbacks, __cbHolder, cbTaskProcessed_return(OK))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_update(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobSanity, statusBundle(Checking, JobScheduling))))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_update_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __dispatchTask(22, true))
synch_call(1, ExecutorState, __states, getExecutorOfTask(22))
synch_call(1, ExecutorState, __states, __taskInExec_get(22))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(-1))
synch_reply(1, ExecutorState, __states, getExecutorOfTask_return(0))
synch_call(1, ExecutorDispatcher, __eDispatch, __removeFromFreezer(22))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index_return(-1))
synch_reply(1, ExecutorDispatcher, __eDispatch, __removeFromFreezer_return(false))
synch_call(1, ExecutorDispatcher, __eDispatch, __getNextExecutor(22))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_get(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_get_return(taskObj(22, [JobPath, JobSanity, JobScheduling], JobSanity, statusBundle(Checking, JobScheduling))))
synch_call(1, MindCallbacks, __cbHolder, cbDispatch(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobSanity, statusBundle(Checking, JobScheduling)), [JobPath, JobSanity, JobScheduling]))
synch_call(1, OptimizationMindHandler, MindHandler, exec_dispatch(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobSanity, statusBundle(Checking, JobScheduling)), [JobPath, JobSanity, JobScheduling]))
synch_reply(1, OptimizationMindHandler, MindHandler, exec_dispatch_return(OK, JobScheduling))
synch_reply(1, MindCallbacks, __cbHolder, cbDispatch_return(OK, JobScheduling))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_update(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobScheduling, statusBundle(Checking, JobScheduling))))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_update_return)
synch_reply(1, ExecutorDispatcher, __eDispatch, __getNextExecutor_return(OK, JobScheduling))
synch_call(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes)
synch_reply(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes_return([JobPath, JobSanity, JobScheduling]))
synch_call(1, ExecutorQueues, __queues, pushTask(JobScheduling, 22, false))
step1(22, JobScheduling)
synch_call(1, ExecutorQueues, __queues, __taskInQueue_keys)
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_keys_return([]))
synch_call(1, ExecutorQueues, __queues, __queues_keys)
synch_reply(1, ExecutorQueues, __queues, __queues_keys_return([JobPath, JobSanity]))
synch_call(1, ExecutorQueues, __queues, __queues_addetype(JobScheduling))
synch_reply(1, ExecutorQueues, __queues, __queues_addetype_return)
synch_call(1, ExecutorQueues, __queues, __queues_append(JobScheduling, 22))
synch_reply(1, ExecutorQueues, __queues, __queues_append_return)
synch_call(1, ExecutorQueues, __queues, __taskInQueue_set(22, JobScheduling))
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_set_return)
synch_reply(1, ExecutorQueues, __queues, pushTask_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __fillExecutors(JobScheduling, true))
synch_call(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks(JobScheduling))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len)
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len_return(0))
synch_reply(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks_return)
synch_call(1, ExecutorState, __states, getIdleExecutor(JobScheduling))
synch_call(1, ExecutorState, __states, __typeToId_eids(JobScheduling))
synch_reply(1, ExecutorState, __states, __typeToId_eids_return([11]))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([]))
synch_reply(1, ExecutorState, __states, freeSlots_return(1))
synch_reply(1, ExecutorState, __states, getIdleExecutor_return(11))
synch_call(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor(11, [JobScheduling], false))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([]))
synch_reply(1, ExecutorState, __states, freeSlots_return(1))
synch_call(1, ExecutorQueues, __queues, popTask([JobScheduling]))
synch_call(1, ExecutorQueues, __queues, __queues_pop(JobScheduling, 0))
synch_reply(1, ExecutorQueues, __queues, __queues_pop_return(22))
synch_call(1, ExecutorQueues, __queues, __taskInQueue_del(22))
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_del_return)
synch_reply(1, ExecutorQueues, __queues, popTask_return(22, JobScheduling))
step2(22, JobScheduling)
synch_call(1, ExecutorState, __states, addTask(11, 22))
synch_call(1, ExecutorState, __states, __taskInExec_set(22, 11))
synch_reply(1, ExecutorState, __states, __taskInExec_set_return)
synch_call(1, ExecutorState, __states, __execTasks_addtaskid(11, 22))
synch_reply(1, ExecutorState, __states, __execTasks_addtaskid_return)
synch_reply(1, ExecutorState, __states, addTask_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __msgTaskToExecutor(22, 11, JobScheduling))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_get(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_get_return(taskObj(22, [JobPath, JobSanity, JobScheduling], JobScheduling, statusBundle(Checking, JobScheduling))))
synch_call(1, MindCallbacks, __cbHolder, cbSendTask(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobScheduling, statusBundle(Checking, JobScheduling)), 11, JobScheduling))
synch_reply(1, MindCallbacks, __cbHolder, cbSendTask_return(OK))
synch_reply(1, ExecutorDispatcher, __eDispatch, __msgTaskToExecutor_return(OK))
synch_reply(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor_return(OK, 22))
synch_call(1, ExecutorState, __states, getIdleExecutor(JobScheduling))
synch_call(1, ExecutorState, __states, __typeToId_eids(JobScheduling))
synch_reply(1, ExecutorState, __states, __typeToId_eids_return([11]))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([22]))
synch_reply(1, ExecutorState, __states, freeSlots_return(0))
synch_reply(1, ExecutorState, __states, getIdleExecutor_return(0))
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, __fillExecutors_return)
synch_reply(1, ExecutorDispatcher, __eDispatch, __dispatchTask_return(OK))
synch_call(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor(11, [JobSanity], false))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([22]))
synch_reply(1, ExecutorState, __states, freeSlots_return(0))
synch_call(1, ExecutorQueues, __queues, popTask([JobSanity]))
synch_call(1, ExecutorQueues, __queues, __queues_pop(JobSanity, 0))
synch_reply(1, ExecutorQueues, __queues, __queues_pop_return(-1))
synch_reply(1, ExecutorQueues, __queues, popTask_return(0, None))
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor_return(OK, 0))
step3(0)
synch_reply(1, ExecutorDispatcher, __eDispatch, taskProcessed_return(OK))
synch_call(1, JobManagerHandler, JobManager, submitJob([333]))
synch_call(1, JobManagerHandler, JobManager, __sendNewJobsToMind([333]))
asynch_call(1, OptimizationMindHandler, MindHandler, msg1(OptimizeJobs, [333]))
synch_call(1, OptimizationMindHandler, MindHandler, forgetTask(333))
synch_call(1, ExecutorDispatcher, __eDispatch, removeTaskDispatcher(333))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_pop(333))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_pop_return)
synch_call(1, ExecutorState, __states, getExecutorOfTask(333))
synch_call(1, ExecutorState, __states, __taskInExec_get(333))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(-1))
synch_reply(1, ExecutorState, __states, getExecutorOfTask_return(0))
synch_call(1, ExecutorQueues, __queues, deleteTask(333))
synch_call(1, ExecutorQueues, __queues, __taskInQueue_get(333))
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_get_return(None))
synch_call(1, ExecutorQueues, __queues, __taskInQueue_del(333))
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_del_return)
synch_call(1, ExecutorQueues, __queues, __queues_index(None, 333))
synch_reply(1, ExecutorQueues, __queues, __queues_index_return(-1))
tau
synch_reply(1, ExecutorQueues, __queues, deleteTask_return)
synch_call(1, ExecutorState, __states, removeTask(333, 0))
synch_call(1, ExecutorState, __states, __taskInExec_get(333))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(-1))
synch_call(1, ExecutorState, __states, __taskInExec_pop(333))
synch_reply(1, ExecutorState, __states, __taskInExec_pop_return)
synch_reply(1, ExecutorState, __states, removeTask_return(false))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index(333))
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index_return(-1))
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, removeTaskDispatcher_return(OK))
synch_reply(1, OptimizationMindHandler, MindHandler, forgetTask_return)
synch_reply(1, JobManagerHandler, JobManager, __sendNewJobsToMind_return)
synch_reply(1, JobManagerHandler, JobManager, submitJob_return)
synch_call(1, OptimizationMindHandler, MindHandler, executeTask(333, taskObj(333, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_call(1, ExecutorDispatcher, __eDispatch, addTaskDispatcher(333, taskObj(333, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_call(1, ExecutorDispatcher, __eDispatch, __addTaskIfNew(333, taskObj(333, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_keys)
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_keys_return([22]))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_add(taskObj(333, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_add_return)
synch_reply(1, ExecutorDispatcher, __eDispatch, __addTaskIfNew_return(true))
synch_call(1, ExecutorDispatcher, __eDispatch, __dispatchTask(333, true))
synch_call(1, ExecutorState, __states, getExecutorOfTask(333))
synch_call(1, ExecutorState, __states, __taskInExec_get(333))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(-1))
synch_reply(1, ExecutorState, __states, getExecutorOfTask_return(0))
synch_call(1, ExecutorDispatcher, __eDispatch, __removeFromFreezer(333))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index(333))
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index_return(-1))
synch_reply(1, ExecutorDispatcher, __eDispatch, __removeFromFreezer_return(false))
synch_call(1, ExecutorDispatcher, __eDispatch, __getNextExecutor(333))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_get(333))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_get_return(taskObj(333, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_call(1, MindCallbacks, __cbHolder, cbDispatch(333, taskObj(333, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted)), [JobPath, JobSanity, JobScheduling]))
synch_call(1, OptimizationMindHandler, MindHandler, exec_dispatch(333, taskObj(333, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted)), [JobPath, JobSanity, JobScheduling]))
synch_reply(1, OptimizationMindHandler, MindHandler, exec_dispatch_return(OK, JobPath))
synch_reply(1, MindCallbacks, __cbHolder, cbDispatch_return(OK, JobPath))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_update(333, taskObj(333, [JobPath, JobSanity, JobScheduling], JobPath, statusBundle(Received, JobAccepted))))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_update_return)
synch_reply(1, ExecutorDispatcher, __eDispatch, __getNextExecutor_return(OK, JobPath))
synch_call(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes)
synch_reply(1, ExecutorDispatcher, __eDispatch, __execTypes_get_eTypes_return([JobPath, JobSanity, JobScheduling]))
synch_call(1, ExecutorQueues, __queues, pushTask(JobPath, 333, false))
step1(333, JobPath)
synch_call(1, ExecutorQueues, __queues, __taskInQueue_keys)
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_keys_return([]))
synch_call(1, ExecutorQueues, __queues, __queues_keys)
synch_reply(1, ExecutorQueues, __queues, __queues_keys_return([JobPath, JobSanity, JobScheduling]))
tau
synch_call(1, ExecutorQueues, __queues, __queues_append(JobPath, 333))
synch_reply(1, ExecutorQueues, __queues, __queues_append_return)
synch_call(1, ExecutorQueues, __queues, __taskInQueue_set(333, JobPath))
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_set_return)
synch_reply(1, ExecutorQueues, __queues, pushTask_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __fillExecutors(JobPath, true))
synch_call(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks(JobPath))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len)
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_len_return(0))
synch_reply(1, ExecutorDispatcher, __eDispatch, __unfreezeTasks_return)
synch_call(1, ExecutorState, __states, getIdleExecutor(JobPath))
synch_call(1, ExecutorState, __states, __typeToId_eids(JobPath))
synch_reply(1, ExecutorState, __states, __typeToId_eids_return([11]))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([22]))
synch_reply(1, ExecutorState, __states, freeSlots_return(0))
synch_reply(1, ExecutorState, __states, getIdleExecutor_return(0))
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, __fillExecutors_return)
synch_reply(1, ExecutorDispatcher, __eDispatch, __dispatchTask_return(OK))
synch_reply(1, ExecutorDispatcher, __eDispatch, addTaskDispatcher_return(OK))
synch_reply(1, OptimizationMindHandler, MindHandler, executeTask_return(OK))
tau
asynch_call(1, MindCluster, mindCluster, msg(ProcessTask, 11, taskObj(22, [JobPath, JobSanity, JobScheduling], JobScheduling, statusBundle(Checking, JobScheduling))))
asynch_call(1, OptimizationMindHandler, MindHandler, msg(TaskDone, 11, taskObj(22, [JobPath, JobSanity, JobScheduling], JobScheduling, statusBundle(Waiting, PilotAgentSubmission))))
synch_call(1, ExecutorDispatcher, __eDispatch, taskProcessed(11, 22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobScheduling, statusBundle(Waiting, PilotAgentSubmission))))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskReceived(22, 11))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_get(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_get_return(taskObj(22, [JobPath, JobSanity, JobScheduling], JobScheduling, statusBundle(Checking, JobScheduling))))
synch_call(1, ExecutorState, __states, removeTask(22, 11))
synch_call(1, ExecutorState, __states, __taskInExec_get(22))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(11))
synch_call(1, ExecutorState, __states, __execTasks_removetaskid(11, 22))
synch_reply(1, ExecutorState, __states, __execTasks_removetaskid_return)
synch_call(1, ExecutorState, __states, __taskInExec_pop(22))
synch_reply(1, ExecutorState, __states, __taskInExec_pop_return)
synch_reply(1, ExecutorState, __states, removeTask_return(true))
synch_call(1, ExecutorDispatcher, __eDispatch, __idMap_get(11))
synch_reply(1, ExecutorDispatcher, __eDispatch, __idMap_get_return([JobPath, JobSanity, JobScheduling]))
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskReceived_return(OK, JobScheduling))
synch_call(1, MindCallbacks, __cbHolder, cbTaskProcessed(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobScheduling, statusBundle(Waiting, PilotAgentSubmission)), JobScheduling))
synch_reply(1, MindCallbacks, __cbHolder, cbTaskProcessed_return(OK))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_update(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobScheduling, statusBundle(Waiting, PilotAgentSubmission))))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_update_return)
synch_call(1, ExecutorDispatcher, __eDispatch, __dispatchTask(22, true))
synch_call(1, ExecutorState, __states, getExecutorOfTask(22))
synch_call(1, ExecutorState, __states, __taskInExec_get(22))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(-1))
synch_reply(1, ExecutorState, __states, getExecutorOfTask_return(0))
synch_call(1, ExecutorDispatcher, __eDispatch, __removeFromFreezer(22))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index_return(-1))
synch_reply(1, ExecutorDispatcher, __eDispatch, __removeFromFreezer_return(false))
synch_call(1, ExecutorDispatcher, __eDispatch, __getNextExecutor(22))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_get(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_get_return(taskObj(22, [JobPath, JobSanity, JobScheduling], JobScheduling, statusBundle(Waiting, PilotAgentSubmission))))
synch_call(1, MindCallbacks, __cbHolder, cbDispatch(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobScheduling, statusBundle(Waiting, PilotAgentSubmission)), [JobPath, JobSanity, JobScheduling]))
synch_call(1, OptimizationMindHandler, MindHandler, exec_dispatch(22, taskObj(22, [JobPath, JobSanity, JobScheduling], JobScheduling, statusBundle(Waiting, PilotAgentSubmission)), [JobPath, JobSanity, JobScheduling]))
synch_reply(1, OptimizationMindHandler, MindHandler, exec_dispatch_return(OK, None))
synch_reply(1, MindCallbacks, __cbHolder, cbDispatch_return(OK, None))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_update(22, taskObj(22, [JobPath, JobSanity, JobScheduling], None, statusBundle(Waiting, PilotAgentSubmission))))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_update_return)
synch_reply(1, ExecutorDispatcher, __eDispatch, __getNextExecutor_return(OK, None))
synch_call(1, ExecutorDispatcher, __eDispatch, removeTaskDispatcher(22))
synch_call(1, ExecutorDispatcher, __eDispatch, __tasks_pop(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __tasks_pop_return)
synch_call(1, ExecutorState, __states, getExecutorOfTask(22))
synch_call(1, ExecutorState, __states, __taskInExec_get(22))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(-1))
synch_reply(1, ExecutorState, __states, getExecutorOfTask_return(0))
synch_call(1, ExecutorQueues, __queues, deleteTask(22))
synch_call(1, ExecutorQueues, __queues, __taskInQueue_get(22))
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_get_return(None))
synch_call(1, ExecutorQueues, __queues, __taskInQueue_del(22))
synch_reply(1, ExecutorQueues, __queues, __taskInQueue_del_return)
synch_call(1, ExecutorQueues, __queues, __queues_index(None, 22))
synch_reply(1, ExecutorQueues, __queues, __queues_index_return(-1))
tau
synch_reply(1, ExecutorQueues, __queues, deleteTask_return)
synch_call(1, ExecutorState, __states, removeTask(22, 0))
synch_call(1, ExecutorState, __states, __taskInExec_get(22))
synch_reply(1, ExecutorState, __states, __taskInExec_get_return(-1))
synch_call(1, ExecutorState, __states, __taskInExec_pop(22))
synch_reply(1, ExecutorState, __states, __taskInExec_pop_return)
synch_reply(1, ExecutorState, __states, removeTask_return(false))
synch_call(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index(22))
synch_reply(1, ExecutorDispatcher, __eDispatch, __taskFreezer_index_return(-1))
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, removeTaskDispatcher_return(OK))
synch_reply(1, ExecutorDispatcher, __eDispatch, __dispatchTask_return(OK))
synch_call(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor(11, [JobScheduling], false))
synch_call(1, ExecutorState, __states, freeSlots(11))
synch_call(1, ExecutorState, __states, __maxTasks_get(11))
synch_reply(1, ExecutorState, __states, __maxTasks_get_return(1))
synch_call(1, ExecutorState, __states, __execTasks_taskids(11))
synch_reply(1, ExecutorState, __states, __execTasks_taskids_return([]))
synch_reply(1, ExecutorState, __states, freeSlots_return(1))
synch_call(1, ExecutorQueues, __queues, popTask([JobScheduling]))
synch_call(1, ExecutorQueues, __queues, __queues_pop(JobScheduling, 0))
synch_reply(1, ExecutorQueues, __queues, __queues_pop_return(-1))
synch_reply(1, ExecutorQueues, __queues, popTask_return(0, None))
tau
synch_reply(1, ExecutorDispatcher, __eDispatch, __sendTaskToExecutor_return(OK, 0))
synch_reply(1, ExecutorDispatcher, __eDispatch, taskProcessed_return(OK))
step3(0)
found
